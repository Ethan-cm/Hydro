
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 07 00 20 29 12 00 08 7b 2c 00 08 fd 11 00 08     ... )...{,......
 8000010:	fd 11 00 08 fd 11 00 08 fd 11 00 08 00 00 00 00     ................
	...
 800002c:	29 0f 00 08 fd 11 00 08 00 00 00 00 d5 0e 00 08     )...............
 800003c:	49 1b 00 08                                         I...

08000040 <_irq_vector_table>:
 8000040:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000050:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000060:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000070:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000080:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000090:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 80000a0:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 80000b0:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 80000c0:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 80000d0:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 80000e0:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 80000f0:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000100:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000110:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000120:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000130:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000140:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000150:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000160:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000170:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000180:	d9 0f 00 08 d9 0f 00 08 d9 0f 00 08 d9 0f 00 08     ................
 8000190:	d9 0f 00 08 d9 0f 00 08                             ........

Disassembly of section text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f000 f808 	bl	80001cc <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <__udivmoddi4>:
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d0:	4607      	mov	r7, r0
 80001d2:	468c      	mov	ip, r1
 80001d4:	4608      	mov	r0, r1
 80001d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001d8:	4615      	mov	r5, r2
 80001da:	463c      	mov	r4, r7
 80001dc:	4619      	mov	r1, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f040 80c6 	bne.w	8000370 <__udivmoddi4+0x1a4>
 80001e4:	4282      	cmp	r2, r0
 80001e6:	fab2 f782 	clz	r7, r2
 80001ea:	d946      	bls.n	800027a <__udivmoddi4+0xae>
 80001ec:	b14f      	cbz	r7, 8000202 <__udivmoddi4+0x36>
 80001ee:	f1c7 0e20 	rsb	lr, r7, #32
 80001f2:	fa24 fe0e 	lsr.w	lr, r4, lr
 80001f6:	fa00 f307 	lsl.w	r3, r0, r7
 80001fa:	40bd      	lsls	r5, r7
 80001fc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000200:	40bc      	lsls	r4, r7
 8000202:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000206:	fa1f fe85 	uxth.w	lr, r5
 800020a:	fbbc f9f8 	udiv	r9, ip, r8
 800020e:	0c22      	lsrs	r2, r4, #16
 8000210:	fb08 c319 	mls	r3, r8, r9, ip
 8000214:	fb09 fa0e 	mul.w	sl, r9, lr
 8000218:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800021c:	459a      	cmp	sl, r3
 800021e:	d928      	bls.n	8000272 <__udivmoddi4+0xa6>
 8000220:	18eb      	adds	r3, r5, r3
 8000222:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000226:	d204      	bcs.n	8000232 <__udivmoddi4+0x66>
 8000228:	459a      	cmp	sl, r3
 800022a:	d902      	bls.n	8000232 <__udivmoddi4+0x66>
 800022c:	f1a9 0002 	sub.w	r0, r9, #2
 8000230:	442b      	add	r3, r5
 8000232:	eba3 030a 	sub.w	r3, r3, sl
 8000236:	b2a4      	uxth	r4, r4
 8000238:	fbb3 f2f8 	udiv	r2, r3, r8
 800023c:	fb08 3312 	mls	r3, r8, r2, r3
 8000240:	fb02 fe0e 	mul.w	lr, r2, lr
 8000244:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000248:	45a6      	cmp	lr, r4
 800024a:	d914      	bls.n	8000276 <__udivmoddi4+0xaa>
 800024c:	192c      	adds	r4, r5, r4
 800024e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000252:	d203      	bcs.n	800025c <__udivmoddi4+0x90>
 8000254:	45a6      	cmp	lr, r4
 8000256:	d901      	bls.n	800025c <__udivmoddi4+0x90>
 8000258:	1e93      	subs	r3, r2, #2
 800025a:	442c      	add	r4, r5
 800025c:	eba4 040e 	sub.w	r4, r4, lr
 8000260:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000264:	b11e      	cbz	r6, 800026e <__udivmoddi4+0xa2>
 8000266:	40fc      	lsrs	r4, r7
 8000268:	2300      	movs	r3, #0
 800026a:	6034      	str	r4, [r6, #0]
 800026c:	6073      	str	r3, [r6, #4]
 800026e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000272:	4648      	mov	r0, r9
 8000274:	e7dd      	b.n	8000232 <__udivmoddi4+0x66>
 8000276:	4613      	mov	r3, r2
 8000278:	e7f0      	b.n	800025c <__udivmoddi4+0x90>
 800027a:	b902      	cbnz	r2, 800027e <__udivmoddi4+0xb2>
 800027c:	deff      	udf	#255	; 0xff
 800027e:	bb87      	cbnz	r7, 80002e2 <__udivmoddi4+0x116>
 8000280:	1a83      	subs	r3, r0, r2
 8000282:	2101      	movs	r1, #1
 8000284:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000288:	b2aa      	uxth	r2, r5
 800028a:	fbb3 fcfe 	udiv	ip, r3, lr
 800028e:	0c20      	lsrs	r0, r4, #16
 8000290:	fb0e 331c 	mls	r3, lr, ip, r3
 8000294:	fb0c f802 	mul.w	r8, ip, r2
 8000298:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800029c:	4598      	cmp	r8, r3
 800029e:	d963      	bls.n	8000368 <__udivmoddi4+0x19c>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002a6:	d204      	bcs.n	80002b2 <__udivmoddi4+0xe6>
 80002a8:	4598      	cmp	r8, r3
 80002aa:	d902      	bls.n	80002b2 <__udivmoddi4+0xe6>
 80002ac:	f1ac 0002 	sub.w	r0, ip, #2
 80002b0:	442b      	add	r3, r5
 80002b2:	eba3 0308 	sub.w	r3, r3, r8
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	fb0c f202 	mul.w	r2, ip, r2
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	42a2      	cmp	r2, r4
 80002ca:	d94f      	bls.n	800036c <__udivmoddi4+0x1a0>
 80002cc:	192c      	adds	r4, r5, r4
 80002ce:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80002d2:	d204      	bcs.n	80002de <__udivmoddi4+0x112>
 80002d4:	42a2      	cmp	r2, r4
 80002d6:	d902      	bls.n	80002de <__udivmoddi4+0x112>
 80002d8:	f1ac 0302 	sub.w	r3, ip, #2
 80002dc:	442c      	add	r4, r5
 80002de:	1aa4      	subs	r4, r4, r2
 80002e0:	e7be      	b.n	8000260 <__udivmoddi4+0x94>
 80002e2:	f1c7 0c20 	rsb	ip, r7, #32
 80002e6:	fa20 f80c 	lsr.w	r8, r0, ip
 80002ea:	fa00 f307 	lsl.w	r3, r0, r7
 80002ee:	fa24 fc0c 	lsr.w	ip, r4, ip
 80002f2:	40bd      	lsls	r5, r7
 80002f4:	ea4c 0203 	orr.w	r2, ip, r3
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	b2ab      	uxth	r3, r5
 80002fe:	fbb8 fcfe 	udiv	ip, r8, lr
 8000302:	0c11      	lsrs	r1, r2, #16
 8000304:	fb0e 801c 	mls	r0, lr, ip, r8
 8000308:	fb0c f903 	mul.w	r9, ip, r3
 800030c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000310:	4581      	cmp	r9, r0
 8000312:	fa04 f407 	lsl.w	r4, r4, r7
 8000316:	d923      	bls.n	8000360 <__udivmoddi4+0x194>
 8000318:	1828      	adds	r0, r5, r0
 800031a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800031e:	d204      	bcs.n	800032a <__udivmoddi4+0x15e>
 8000320:	4581      	cmp	r9, r0
 8000322:	d902      	bls.n	800032a <__udivmoddi4+0x15e>
 8000324:	f1ac 0102 	sub.w	r1, ip, #2
 8000328:	4428      	add	r0, r5
 800032a:	eba0 0009 	sub.w	r0, r0, r9
 800032e:	b292      	uxth	r2, r2
 8000330:	fbb0 fcfe 	udiv	ip, r0, lr
 8000334:	fb0e 001c 	mls	r0, lr, ip, r0
 8000338:	fb0c f803 	mul.w	r8, ip, r3
 800033c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000340:	4598      	cmp	r8, r3
 8000342:	d90f      	bls.n	8000364 <__udivmoddi4+0x198>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800034a:	d204      	bcs.n	8000356 <__udivmoddi4+0x18a>
 800034c:	4598      	cmp	r8, r3
 800034e:	d902      	bls.n	8000356 <__udivmoddi4+0x18a>
 8000350:	f1ac 0202 	sub.w	r2, ip, #2
 8000354:	442b      	add	r3, r5
 8000356:	eba3 0308 	sub.w	r3, r3, r8
 800035a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800035e:	e791      	b.n	8000284 <__udivmoddi4+0xb8>
 8000360:	4661      	mov	r1, ip
 8000362:	e7e2      	b.n	800032a <__udivmoddi4+0x15e>
 8000364:	4662      	mov	r2, ip
 8000366:	e7f6      	b.n	8000356 <__udivmoddi4+0x18a>
 8000368:	4660      	mov	r0, ip
 800036a:	e7a2      	b.n	80002b2 <__udivmoddi4+0xe6>
 800036c:	4663      	mov	r3, ip
 800036e:	e7b6      	b.n	80002de <__udivmoddi4+0x112>
 8000370:	4283      	cmp	r3, r0
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0x1b4>
 8000374:	b10e      	cbz	r6, 800037a <__udivmoddi4+0x1ae>
 8000376:	e9c6 7000 	strd	r7, r0, [r6]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e776      	b.n	800026e <__udivmoddi4+0xa2>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	b981      	cbnz	r1, 80003a8 <__udivmoddi4+0x1dc>
 8000386:	4283      	cmp	r3, r0
 8000388:	d301      	bcc.n	800038e <__udivmoddi4+0x1c2>
 800038a:	42ba      	cmp	r2, r7
 800038c:	d80a      	bhi.n	80003a4 <__udivmoddi4+0x1d8>
 800038e:	1abc      	subs	r4, r7, r2
 8000390:	eb60 0303 	sbc.w	r3, r0, r3
 8000394:	2001      	movs	r0, #1
 8000396:	469c      	mov	ip, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d068      	beq.n	800046e <__udivmoddi4+0x2a2>
 800039c:	e9c6 4c00 	strd	r4, ip, [r6]
 80003a0:	2100      	movs	r1, #0
 80003a2:	e764      	b.n	800026e <__udivmoddi4+0xa2>
 80003a4:	4608      	mov	r0, r1
 80003a6:	e7f7      	b.n	8000398 <__udivmoddi4+0x1cc>
 80003a8:	f1c1 0c20 	rsb	ip, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f40c 	lsr.w	r4, r2, ip
 80003b2:	431c      	orrs	r4, r3
 80003b4:	fa02 f501 	lsl.w	r5, r2, r1
 80003b8:	fa00 f301 	lsl.w	r3, r0, r1
 80003bc:	fa27 f20c 	lsr.w	r2, r7, ip
 80003c0:	fa20 fb0c 	lsr.w	fp, r0, ip
 80003c4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003c8:	4313      	orrs	r3, r2
 80003ca:	fbbb f8f9 	udiv	r8, fp, r9
 80003ce:	fa1f fe84 	uxth.w	lr, r4
 80003d2:	fb09 bb18 	mls	fp, r9, r8, fp
 80003d6:	0c1a      	lsrs	r2, r3, #16
 80003d8:	fb08 fa0e 	mul.w	sl, r8, lr
 80003dc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80003e0:	4592      	cmp	sl, r2
 80003e2:	fa07 f701 	lsl.w	r7, r7, r1
 80003e6:	d93e      	bls.n	8000466 <__udivmoddi4+0x29a>
 80003e8:	18a2      	adds	r2, r4, r2
 80003ea:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ee:	d204      	bcs.n	80003fa <__udivmoddi4+0x22e>
 80003f0:	4592      	cmp	sl, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x22e>
 80003f4:	f1a8 0002 	sub.w	r0, r8, #2
 80003f8:	4422      	add	r2, r4
 80003fa:	eba2 020a 	sub.w	r2, r2, sl
 80003fe:	b29b      	uxth	r3, r3
 8000400:	fbb2 f8f9 	udiv	r8, r2, r9
 8000404:	fb09 2218 	mls	r2, r9, r8, r2
 8000408:	fb08 fe0e 	mul.w	lr, r8, lr
 800040c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000410:	4596      	cmp	lr, r2
 8000412:	d92a      	bls.n	800046a <__udivmoddi4+0x29e>
 8000414:	18a2      	adds	r2, r4, r2
 8000416:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800041a:	d204      	bcs.n	8000426 <__udivmoddi4+0x25a>
 800041c:	4596      	cmp	lr, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x25a>
 8000420:	f1a8 0302 	sub.w	r3, r8, #2
 8000424:	4422      	add	r2, r4
 8000426:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800042a:	fba0 9305 	umull	r9, r3, r0, r5
 800042e:	eba2 020e 	sub.w	r2, r2, lr
 8000432:	429a      	cmp	r2, r3
 8000434:	46ce      	mov	lr, r9
 8000436:	4698      	mov	r8, r3
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x274>
 800043a:	d106      	bne.n	800044a <__udivmoddi4+0x27e>
 800043c:	454f      	cmp	r7, r9
 800043e:	d204      	bcs.n	800044a <__udivmoddi4+0x27e>
 8000440:	ebb9 0e05 	subs.w	lr, r9, r5
 8000444:	eb63 0804 	sbc.w	r8, r3, r4
 8000448:	3801      	subs	r0, #1
 800044a:	b186      	cbz	r6, 800046e <__udivmoddi4+0x2a2>
 800044c:	ebb7 030e 	subs.w	r3, r7, lr
 8000450:	eb62 0708 	sbc.w	r7, r2, r8
 8000454:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000458:	40cb      	lsrs	r3, r1
 800045a:	ea4c 0303 	orr.w	r3, ip, r3
 800045e:	40cf      	lsrs	r7, r1
 8000460:	e9c6 3700 	strd	r3, r7, [r6]
 8000464:	e79c      	b.n	80003a0 <__udivmoddi4+0x1d4>
 8000466:	4640      	mov	r0, r8
 8000468:	e7c7      	b.n	80003fa <__udivmoddi4+0x22e>
 800046a:	4643      	mov	r3, r8
 800046c:	e7db      	b.n	8000426 <__udivmoddi4+0x25a>
 800046e:	4631      	mov	r1, r6
 8000470:	e6fd      	b.n	800026e <__udivmoddi4+0xa2>
	...

08000474 <lcdinit>:
	return;

}
 

void lcdinit(const struct device *inputdevice){
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
	PD3 = D4
	PD4 = E
	PD5 = RS
	 */
	k_msleep(15); //15 ms delay at start of operation in order to allow internal function of LCD to initalize properlyS
	int pinarray[] = {0 /*D7*/,1 /*D6*/,2 /*D5*/,3 /*D4*/,4 /*E*/, 5 /*RS*/};
 8000476:	4e1d      	ldr	r6, [pc, #116]	; (80004ec <lcdinit+0x78>)
void lcdinit(const struct device *inputdevice){
 8000478:	b087      	sub	sp, #28
 800047a:	4604      	mov	r4, r0
	k_msleep(15); //15 ms delay at start of operation in order to allow internal function of LCD to initalize properlyS
 800047c:	200f      	movs	r0, #15
 800047e:	f002 fae2 	bl	8002a46 <k_msleep.isra.0>
	int pinarray[] = {0 /*D7*/,1 /*D6*/,2 /*D5*/,3 /*D4*/,4 /*E*/, 5 /*RS*/};
 8000482:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000484:	466d      	mov	r5, sp
 8000486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000488:	e896 0003 	ldmia.w	r6, {r0, r1}
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800048c:	2701      	movs	r7, #1
 800048e:	e885 0003 	stmia.w	r5, {r0, r1}

	for (int i = 0; i <= sizeof(pinarray) ; i++){ //function that configures all the pins to output
 8000492:	466e      	mov	r6, sp
 8000494:	2500      	movs	r5, #0
		int pin = pinarray[i];
 8000496:	f856 1b04 	ldr.w	r1, [r6], #4
	struct gpio_driver_data *data =
 800049a:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
 800049c:	68a0      	ldr	r0, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800049e:	6813      	ldr	r3, [r2, #0]
 80004a0:	b2c9      	uxtb	r1, r1
 80004a2:	fa07 fc01 	lsl.w	ip, r7, r1
 80004a6:	ea23 030c 	bic.w	r3, r3, ip
 80004aa:	6013      	str	r3, [r2, #0]
	for (int i = 0; i <= sizeof(pinarray) ; i++){ //function that configures all the pins to output
 80004ac:	3501      	adds	r5, #1
	}

	return api->pin_configure(port, pin, flags);
 80004ae:	6803      	ldr	r3, [r0, #0]
 80004b0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80004b4:	4620      	mov	r0, r4
 80004b6:	4798      	blx	r3
 80004b8:	2d19      	cmp	r5, #25
 80004ba:	d1ec      	bne.n	8000496 <lcdinit+0x22>
		gpio_pin_configure(inputdevice, pin, GPIO_OUTPUT_ACTIVE);
	}
	uint8_t initcmd = (LCD_CMD_CONFIG | LCD_CMD_CONFIG_4BITMODE);
	lcdinitwrite(inputdevice, initcmd);
 80004bc:	2120      	movs	r1, #32
 80004be:	4620      	mov	r0, r4
 80004c0:	f002 fade 	bl	8002a80 <lcdinitwrite>
	k_msleep(10);
 80004c4:	200a      	movs	r0, #10
 80004c6:	f002 fabe 	bl	8002a46 <k_msleep.isra.0>
	initcmd = (LCD_CMD_CONFIG | LCD_CMD_CONFIG_2ROWS | LCD_CMD_CONFIG_5X8 | LCD_CMD_CONFIG_4BITMODE); 
	lcdcmdwrite(inputdevice, initcmd);
 80004ca:	2128      	movs	r1, #40	; 0x28
 80004cc:	4620      	mov	r0, r4
 80004ce:	f002 fb31 	bl	8002b34 <lcdcmdwrite>
	k_msleep(10);
 80004d2:	200a      	movs	r0, #10
 80004d4:	f002 fab7 	bl	8002a46 <k_msleep.isra.0>
	initcmd = (LCD_CMD_DISPLAY | LCD_CMD_DISPLAY_ON); //config onoff 0b0000 1000 | 0b 0000 0100 = 0b0000 1100 = 0x0C
	lcdcmdwrite(inputdevice, initcmd);
 80004d8:	4620      	mov	r0, r4
 80004da:	210c      	movs	r1, #12
 80004dc:	f002 fb2a 	bl	8002b34 <lcdcmdwrite>
	k_msleep(10);
 80004e0:	200a      	movs	r0, #10
	return; 
 80004e2:	b007      	add	sp, #28
 80004e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_msleep(10);
 80004e8:	f002 baad 	b.w	8002a46 <k_msleep.isra.0>
 80004ec:	08003920 	.word	0x08003920

080004f0 <main>:
void main(void){
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80004f2:	481a      	ldr	r0, [pc, #104]	; (800055c <main+0x6c>)
 80004f4:	f001 fd12 	bl	8001f1c <z_impl_device_get_binding>
 80004f8:	4604      	mov	r4, r0
 80004fa:	4818      	ldr	r0, [pc, #96]	; (800055c <main+0x6c>)
 80004fc:	f001 fd0e 	bl	8001f1c <z_impl_device_get_binding>
 8000500:	4605      	mov	r5, r0
	struct gpio_driver_data *data =
 8000502:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 8000504:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8000506:	6813      	ldr	r3, [r2, #0]
 8000508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800050c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 800050e:	680b      	ldr	r3, [r1, #0]
 8000510:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000514:	210f      	movs	r1, #15
 8000516:	4798      	blx	r3
	lcdinit(lcd);
 8000518:	4620      	mov	r0, r4
 800051a:	f7ff ffab 	bl	8000474 <lcdinit>
	gpio_pin_set(blue, PIN3, 1);
 800051e:	4628      	mov	r0, r5
 8000520:	2201      	movs	r2, #1
 8000522:	210f      	movs	r1, #15
 8000524:	f002 fa7f 	bl	8002a26 <gpio_pin_set.isra.0>
 8000528:	2500      	movs	r5, #0
		lcdcmdwrite(lcd,LCD_CMD_CLEAR);
 800052a:	2101      	movs	r1, #1
 800052c:	4620      	mov	r0, r4
 800052e:	f002 fb01 	bl	8002b34 <lcdcmdwrite>
		lcdcursorposition(lcd, 0, column);
 8000532:	b2ea      	uxtb	r2, r5
 8000534:	2100      	movs	r1, #0
 8000536:	4620      	mov	r0, r4
 8000538:	f002 fb12 	bl	8002b60 <lcdcursorposition>
		for (int i = 0; i <sizeof(str) -1; i++){
 800053c:	4f08      	ldr	r7, [pc, #32]	; (8000560 <main+0x70>)
 800053e:	2600      	movs	r6, #0
			lcddatawrite(lcd, str[i]);
 8000540:	f817 1b01 	ldrb.w	r1, [r7], #1
 8000544:	4620      	mov	r0, r4
		for (int i = 0; i <sizeof(str) -1; i++){
 8000546:	3601      	adds	r6, #1
			lcddatawrite(lcd, str[i]);
 8000548:	f002 faff 	bl	8002b4a <lcddatawrite>
		for (int i = 0; i <sizeof(str) -1; i++){
 800054c:	2e07      	cmp	r6, #7
 800054e:	d1f7      	bne.n	8000540 <main+0x50>
		k_msleep(100);
 8000550:	2064      	movs	r0, #100	; 0x64
 8000552:	f002 fa78 	bl	8002a46 <k_msleep.isra.0>
	while(1){
 8000556:	3501      	adds	r5, #1
		lcdcmdwrite(lcd,LCD_CMD_CLEAR);
 8000558:	e7e7      	b.n	800052a <main+0x3a>
 800055a:	bf00      	nop
 800055c:	08003afa 	.word	0x08003afa
 8000560:	08003b00 	.word	0x08003b00

08000564 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000564:	680b      	ldr	r3, [r1, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800056a:	4b01      	ldr	r3, [pc, #4]	; (8000570 <char_out+0xc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4718      	bx	r3
 8000570:	20000000 	.word	0x20000000

08000574 <__printk_hook_install>:
	_char_out = fn;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <__printk_hook_install+0x8>)
 8000576:	6018      	str	r0, [r3, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000

08000580 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8000580:	b507      	push	{r0, r1, r2, lr}
 8000582:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8000584:	2100      	movs	r1, #0
{
 8000586:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 8000588:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <vprintk+0x18>)
 800058c:	a901      	add	r1, sp, #4
 800058e:	f000 f805 	bl	800059c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8000592:	b003      	add	sp, #12
 8000594:	f85d fb04 	ldr.w	pc, [sp], #4
 8000598:	08000565 	.word	0x08000565

0800059c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 800059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005a0:	b091      	sub	sp, #68	; 0x44
 80005a2:	468b      	mov	fp, r1
 80005a4:	9002      	str	r0, [sp, #8]
 80005a6:	4692      	mov	sl, r2
 80005a8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80005aa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80005ac:	f89a 0000 	ldrb.w	r0, [sl]
 80005b0:	b908      	cbnz	r0, 80005b6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80005b2:	4628      	mov	r0, r5
 80005b4:	e35f      	b.n	8000c76 <cbvprintf+0x6da>
		if (*fp != '%') {
 80005b6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80005b8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 80005bc:	d007      	beq.n	80005ce <cbvprintf+0x32>
			OUTC('%');
 80005be:	9b02      	ldr	r3, [sp, #8]
 80005c0:	4659      	mov	r1, fp
 80005c2:	4798      	blx	r3
 80005c4:	2800      	cmp	r0, #0
 80005c6:	f2c0 8356 	blt.w	8000c76 <cbvprintf+0x6da>
 80005ca:	3501      	adds	r5, #1
			break;
 80005cc:	e212      	b.n	80009f4 <cbvprintf+0x458>
		} state = {
 80005ce:	2218      	movs	r2, #24
 80005d0:	2100      	movs	r1, #0
 80005d2:	a80a      	add	r0, sp, #40	; 0x28
 80005d4:	f002 fb7f 	bl	8002cd6 <memset>
	if (*sp == '%') {
 80005d8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80005dc:	2b25      	cmp	r3, #37	; 0x25
 80005de:	d078      	beq.n	80006d2 <cbvprintf+0x136>
 80005e0:	2200      	movs	r2, #0
 80005e2:	4610      	mov	r0, r2
 80005e4:	4696      	mov	lr, r2
 80005e6:	4694      	mov	ip, r2
 80005e8:	4616      	mov	r6, r2
 80005ea:	4639      	mov	r1, r7
		switch (*sp) {
 80005ec:	f817 3b01 	ldrb.w	r3, [r7], #1
 80005f0:	2b2b      	cmp	r3, #43	; 0x2b
 80005f2:	f000 809d 	beq.w	8000730 <cbvprintf+0x194>
 80005f6:	f200 8094 	bhi.w	8000722 <cbvprintf+0x186>
 80005fa:	2b20      	cmp	r3, #32
 80005fc:	f000 809b 	beq.w	8000736 <cbvprintf+0x19a>
 8000600:	2b23      	cmp	r3, #35	; 0x23
 8000602:	f000 809b 	beq.w	800073c <cbvprintf+0x1a0>
 8000606:	b12e      	cbz	r6, 8000614 <cbvprintf+0x78>
 8000608:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800060c:	f046 0604 	orr.w	r6, r6, #4
 8000610:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000614:	f1bc 0f00 	cmp.w	ip, #0
 8000618:	d005      	beq.n	8000626 <cbvprintf+0x8a>
 800061a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800061e:	f046 0608 	orr.w	r6, r6, #8
 8000622:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000626:	f1be 0f00 	cmp.w	lr, #0
 800062a:	d005      	beq.n	8000638 <cbvprintf+0x9c>
 800062c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000630:	f046 0610 	orr.w	r6, r6, #16
 8000634:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000638:	b128      	cbz	r0, 8000646 <cbvprintf+0xaa>
 800063a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 800063e:	f040 0020 	orr.w	r0, r0, #32
 8000642:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8000646:	b12a      	cbz	r2, 8000654 <cbvprintf+0xb8>
 8000648:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800064c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000650:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 8000654:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000658:	f002 0044 	and.w	r0, r2, #68	; 0x44
 800065c:	2844      	cmp	r0, #68	; 0x44
 800065e:	d103      	bne.n	8000668 <cbvprintf+0xcc>
		conv->flag_zero = false;
 8000660:	f36f 1286 	bfc	r2, #6, #1
 8000664:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 8000668:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 800066c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 800066e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000672:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8000676:	d17b      	bne.n	8000770 <cbvprintf+0x1d4>
		conv->width_star = true;
 8000678:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800067c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
 8000680:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000682:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	2a2e      	cmp	r2, #46	; 0x2e
 800068a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800068e:	bf0c      	ite	eq
 8000690:	2101      	moveq	r1, #1
 8000692:	2100      	movne	r1, #0
 8000694:	f361 0241 	bfi	r2, r1, #1, #1
 8000698:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 800069c:	d174      	bne.n	8000788 <cbvprintf+0x1ec>
	if (*sp == '*') {
 800069e:	785a      	ldrb	r2, [r3, #1]
 80006a0:	2a2a      	cmp	r2, #42	; 0x2a
 80006a2:	d06a      	beq.n	800077a <cbvprintf+0x1de>
	++sp;
 80006a4:	3301      	adds	r3, #1
	size_t val = 0;
 80006a6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 80006a8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80006aa:	4618      	mov	r0, r3
 80006ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80006b0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80006b4:	2f09      	cmp	r7, #9
 80006b6:	f240 808e 	bls.w	80007d6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 80006ba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 80006be:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 80006c0:	f3c2 0040 	ubfx	r0, r2, #1, #1
 80006c4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 80006c8:	f361 0241 	bfi	r2, r1, #1, #1
 80006cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 80006d0:	e05a      	b.n	8000788 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
 80006d2:	f10a 0702 	add.w	r7, sl, #2
 80006d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 80006da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80006de:	07d9      	lsls	r1, r3, #31
 80006e0:	f140 8149 	bpl.w	8000976 <cbvprintf+0x3da>
			width = va_arg(ap, int);
 80006e4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 80006e8:	f1b9 0f00 	cmp.w	r9, #0
 80006ec:	da07      	bge.n	80006fe <cbvprintf+0x162>
				conv->flag_dash = true;
 80006ee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80006f2:	f042 0204 	orr.w	r2, r2, #4
 80006f6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 80006fa:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
 80006fe:	075a      	lsls	r2, r3, #29
 8000700:	f140 8142 	bpl.w	8000988 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
 8000704:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 8000708:	f1b8 0f00 	cmp.w	r8, #0
 800070c:	f280 8141 	bge.w	8000992 <cbvprintf+0x3f6>
				conv->prec_present = false;
 8000710:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000714:	f36f 0341 	bfc	r3, #1, #1
 8000718:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 800071c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000720:	e137      	b.n	8000992 <cbvprintf+0x3f6>
		switch (*sp) {
 8000722:	2b2d      	cmp	r3, #45	; 0x2d
 8000724:	d00c      	beq.n	8000740 <cbvprintf+0x1a4>
 8000726:	2b30      	cmp	r3, #48	; 0x30
 8000728:	f47f af6d 	bne.w	8000606 <cbvprintf+0x6a>
			conv->flag_zero = true;
 800072c:	2201      	movs	r2, #1
	} while (loop);
 800072e:	e75c      	b.n	80005ea <cbvprintf+0x4e>
			conv->flag_plus = true;
 8000730:	f04f 0c01 	mov.w	ip, #1
 8000734:	e759      	b.n	80005ea <cbvprintf+0x4e>
			conv->flag_space = true;
 8000736:	f04f 0e01 	mov.w	lr, #1
 800073a:	e756      	b.n	80005ea <cbvprintf+0x4e>
			conv->flag_hash = true;
 800073c:	2001      	movs	r0, #1
 800073e:	e754      	b.n	80005ea <cbvprintf+0x4e>
		switch (*sp) {
 8000740:	2601      	movs	r6, #1
 8000742:	e752      	b.n	80005ea <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
 8000744:	fb0c 0202 	mla	r2, ip, r2, r0
 8000748:	3a30      	subs	r2, #48	; 0x30
 800074a:	4633      	mov	r3, r6
 800074c:	461e      	mov	r6, r3
 800074e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000752:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000756:	2f09      	cmp	r7, #9
 8000758:	d9f4      	bls.n	8000744 <cbvprintf+0x1a8>
	if (sp != wp) {
 800075a:	4299      	cmp	r1, r3
 800075c:	d093      	beq.n	8000686 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 800075e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 8000762:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 8000764:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8000766:	f362 0141 	bfi	r1, r2, #1, #1
 800076a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 800076e:	e78a      	b.n	8000686 <cbvprintf+0xea>
 8000770:	460b      	mov	r3, r1
	size_t val = 0;
 8000772:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000774:	f04f 0c0a 	mov.w	ip, #10
 8000778:	e7e8      	b.n	800074c <cbvprintf+0x1b0>
		conv->prec_star = true;
 800077a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800077e:	f042 0204 	orr.w	r2, r2, #4
 8000782:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 8000786:	3302      	adds	r3, #2
	switch (*sp) {
 8000788:	461f      	mov	r7, r3
 800078a:	f817 2b01 	ldrb.w	r2, [r7], #1
 800078e:	2a6c      	cmp	r2, #108	; 0x6c
 8000790:	d041      	beq.n	8000816 <cbvprintf+0x27a>
 8000792:	d825      	bhi.n	80007e0 <cbvprintf+0x244>
 8000794:	2a68      	cmp	r2, #104	; 0x68
 8000796:	d02b      	beq.n	80007f0 <cbvprintf+0x254>
 8000798:	2a6a      	cmp	r2, #106	; 0x6a
 800079a:	d046      	beq.n	800082a <cbvprintf+0x28e>
 800079c:	2a4c      	cmp	r2, #76	; 0x4c
 800079e:	d04c      	beq.n	800083a <cbvprintf+0x29e>
 80007a0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 80007a2:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007a6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 80007aa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 80007ae:	2a78      	cmp	r2, #120	; 0x78
 80007b0:	f200 80d9 	bhi.w	8000966 <cbvprintf+0x3ca>
 80007b4:	2a57      	cmp	r2, #87	; 0x57
 80007b6:	d84d      	bhi.n	8000854 <cbvprintf+0x2b8>
 80007b8:	2a41      	cmp	r2, #65	; 0x41
 80007ba:	d003      	beq.n	80007c4 <cbvprintf+0x228>
 80007bc:	3a45      	subs	r2, #69	; 0x45
 80007be:	2a02      	cmp	r2, #2
 80007c0:	f200 80d1 	bhi.w	8000966 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 80007c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 80007c8:	2204      	movs	r2, #4
 80007ca:	f362 0302 	bfi	r3, r2, #0, #3
 80007ce:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 80007d2:	2301      	movs	r3, #1
			break;
 80007d4:	e09e      	b.n	8000914 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
 80007d6:	fb06 2101 	mla	r1, r6, r1, r2
 80007da:	3930      	subs	r1, #48	; 0x30
 80007dc:	4603      	mov	r3, r0
 80007de:	e764      	b.n	80006aa <cbvprintf+0x10e>
	switch (*sp) {
 80007e0:	2a74      	cmp	r2, #116	; 0x74
 80007e2:	d026      	beq.n	8000832 <cbvprintf+0x296>
 80007e4:	2a7a      	cmp	r2, #122	; 0x7a
 80007e6:	d1db      	bne.n	80007a0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
 80007e8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80007ec:	2206      	movs	r2, #6
 80007ee:	e00d      	b.n	800080c <cbvprintf+0x270>
		if (*++sp == 'h') {
 80007f0:	785a      	ldrb	r2, [r3, #1]
 80007f2:	2a68      	cmp	r2, #104	; 0x68
 80007f4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80007f8:	d106      	bne.n	8000808 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
 80007fa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80007fc:	f361 02c6 	bfi	r2, r1, #3, #4
 8000800:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 8000804:	1c9f      	adds	r7, r3, #2
 8000806:	e7cc      	b.n	80007a2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
 8000808:	4613      	mov	r3, r2
 800080a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 800080c:	f362 03c6 	bfi	r3, r2, #3, #4
 8000810:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 8000814:	e7c5      	b.n	80007a2 <cbvprintf+0x206>
		if (*++sp == 'l') {
 8000816:	785a      	ldrb	r2, [r3, #1]
 8000818:	2a6c      	cmp	r2, #108	; 0x6c
 800081a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800081e:	d101      	bne.n	8000824 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
 8000820:	2104      	movs	r1, #4
 8000822:	e7eb      	b.n	80007fc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
 8000824:	4613      	mov	r3, r2
 8000826:	2203      	movs	r2, #3
 8000828:	e7f0      	b.n	800080c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
 800082a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800082e:	2205      	movs	r2, #5
 8000830:	e7ec      	b.n	800080c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
 8000832:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000836:	2207      	movs	r2, #7
 8000838:	e7e8      	b.n	800080c <cbvprintf+0x270>
		conv->unsupported = true;
 800083a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800083e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000842:	f023 0302 	bic.w	r3, r3, #2
 8000846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 8000852:	e7a6      	b.n	80007a2 <cbvprintf+0x206>
	switch (conv->specifier) {
 8000854:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8000858:	2920      	cmp	r1, #32
 800085a:	f200 8084 	bhi.w	8000966 <cbvprintf+0x3ca>
 800085e:	a001      	add	r0, pc, #4	; (adr r0, 8000864 <cbvprintf+0x2c8>)
 8000860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000864:	08000929 	.word	0x08000929
 8000868:	08000967 	.word	0x08000967
 800086c:	08000967 	.word	0x08000967
 8000870:	08000967 	.word	0x08000967
 8000874:	08000967 	.word	0x08000967
 8000878:	08000967 	.word	0x08000967
 800087c:	08000967 	.word	0x08000967
 8000880:	08000967 	.word	0x08000967
 8000884:	08000967 	.word	0x08000967
 8000888:	080007c5 	.word	0x080007c5
 800088c:	08000967 	.word	0x08000967
 8000890:	08000929 	.word	0x08000929
 8000894:	080008e9 	.word	0x080008e9
 8000898:	080007c5 	.word	0x080007c5
 800089c:	080007c5 	.word	0x080007c5
 80008a0:	080007c5 	.word	0x080007c5
 80008a4:	08000967 	.word	0x08000967
 80008a8:	080008e9 	.word	0x080008e9
 80008ac:	08000967 	.word	0x08000967
 80008b0:	08000967 	.word	0x08000967
 80008b4:	08000967 	.word	0x08000967
 80008b8:	08000967 	.word	0x08000967
 80008bc:	08000931 	.word	0x08000931
 80008c0:	08000929 	.word	0x08000929
 80008c4:	0800094d 	.word	0x0800094d
 80008c8:	08000967 	.word	0x08000967
 80008cc:	08000967 	.word	0x08000967
 80008d0:	0800094d 	.word	0x0800094d
 80008d4:	08000967 	.word	0x08000967
 80008d8:	08000929 	.word	0x08000929
 80008dc:	08000967 	.word	0x08000967
 80008e0:	08000967 	.word	0x08000967
 80008e4:	08000929 	.word	0x08000929
		conv->specifier_cat = SPECIFIER_SINT;
 80008e8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80008ec:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008ee:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 80008f2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80008f6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80008f8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 80008fc:	bf02      	ittt	eq
 80008fe:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 8000902:	f041 0101 	orreq.w	r1, r1, #1
 8000906:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 800090a:	2a63      	cmp	r2, #99	; 0x63
 800090c:	d131      	bne.n	8000972 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800090e:	3b00      	subs	r3, #0
 8000910:	bf18      	it	ne
 8000912:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000914:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000918:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800091c:	430b      	orrs	r3, r1
 800091e:	f363 0241 	bfi	r2, r3, #1, #1
 8000922:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000926:	e6d8      	b.n	80006da <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 8000928:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 800092c:	2002      	movs	r0, #2
 800092e:	e7de      	b.n	80008ee <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 8000930:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000934:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8000938:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 800093c:	2103      	movs	r1, #3
 800093e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000942:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8000944:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000948:	4143      	adcs	r3, r0
 800094a:	e7e3      	b.n	8000914 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 800094c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000950:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000952:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000956:	f361 0202 	bfi	r2, r1, #0, #3
 800095a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 800095e:	bf14      	ite	ne
 8000960:	2301      	movne	r3, #1
 8000962:	2300      	moveq	r3, #0
 8000964:	e7d6      	b.n	8000914 <cbvprintf+0x378>
		conv->invalid = true;
 8000966:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 8000972:	2300      	movs	r3, #0
 8000974:	e7ce      	b.n	8000914 <cbvprintf+0x378>
		} else if (conv->width_present) {
 8000976:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 800097a:	2a00      	cmp	r2, #0
			width = conv->width_value;
 800097c:	bfb4      	ite	lt
 800097e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 8000982:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
 8000986:	e6ba      	b.n	80006fe <cbvprintf+0x162>
		} else if (conv->prec_present) {
 8000988:	079b      	lsls	r3, r3, #30
 800098a:	f57f aec7 	bpl.w	800071c <cbvprintf+0x180>
			precision = conv->prec_value;
 800098e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 8000992:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 8000996:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000998:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 800099c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 80009a0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80009a4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80009a6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80009aa:	d138      	bne.n	8000a1e <cbvprintf+0x482>
			switch (length_mod) {
 80009ac:	1ecb      	subs	r3, r1, #3
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d822      	bhi.n	80009f8 <cbvprintf+0x45c>
 80009b2:	e8df f003 	tbb	[pc, r3]
 80009b6:	0903      	.short	0x0903
 80009b8:	2109      	.short	0x2109
 80009ba:	21          	.byte	0x21
 80009bb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 80009bc:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 80009c0:	17da      	asrs	r2, r3, #31
 80009c2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 80009c6:	e006      	b.n	80009d6 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 80009c8:	3407      	adds	r4, #7
 80009ca:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 80009ce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80009d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 80009d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80009da:	f013 0603 	ands.w	r6, r3, #3
 80009de:	d056      	beq.n	8000a8e <cbvprintf+0x4f2>
			OUTS(sp, fp);
 80009e0:	9802      	ldr	r0, [sp, #8]
 80009e2:	463b      	mov	r3, r7
 80009e4:	4652      	mov	r2, sl
 80009e6:	4659      	mov	r1, fp
 80009e8:	f002 f924 	bl	8002c34 <outs>
 80009ec:	2800      	cmp	r0, #0
 80009ee:	f2c0 8142 	blt.w	8000c76 <cbvprintf+0x6da>
 80009f2:	4405      	add	r5, r0
			continue;
 80009f4:	46ba      	mov	sl, r7
 80009f6:	e5d9      	b.n	80005ac <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80009f8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 80009fc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80009fe:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000a02:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000a06:	d105      	bne.n	8000a14 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
 8000a08:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 8000a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8000a0e:	2300      	movs	r3, #0
 8000a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a12:	e7e0      	b.n	80009d6 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
 8000a14:	2902      	cmp	r1, #2
 8000a16:	d1de      	bne.n	80009d6 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
 8000a18:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8000a1c:	e7d0      	b.n	80009c0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d123      	bne.n	8000a6a <cbvprintf+0x4ce>
			switch (length_mod) {
 8000a22:	1ecb      	subs	r3, r1, #3
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d813      	bhi.n	8000a50 <cbvprintf+0x4b4>
 8000a28:	e8df f003 	tbb	[pc, r3]
 8000a2c:	120a0a03 	.word	0x120a0a03
 8000a30:	12          	.byte	0x12
 8000a31:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8000a32:	6822      	ldr	r2, [r4, #0]
 8000a34:	920a      	str	r2, [sp, #40]	; 0x28
 8000a36:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8000a38:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8000a3a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	e7ca      	b.n	80009d6 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
 8000a40:	1de0      	adds	r0, r4, #7
 8000a42:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8000a46:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8000a4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8000a4e:	e7f5      	b.n	8000a3c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
 8000a50:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a54:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000a56:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000a58:	f04f 0300 	mov.w	r3, #0
 8000a5c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 8000a5e:	d0d3      	beq.n	8000a08 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
 8000a60:	2902      	cmp	r1, #2
 8000a62:	d1b8      	bne.n	80009d6 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
 8000a64:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8000a68:	e7d0      	b.n	8000a0c <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d109      	bne.n	8000a82 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
 8000a6e:	1de3      	adds	r3, r4, #7
 8000a70:	f023 0307 	bic.w	r3, r3, #7
 8000a74:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8000a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000a80:	e7a9      	b.n	80009d6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000a82:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000a84:	bf04      	itt	eq
 8000a86:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000a8a:	930a      	streq	r3, [sp, #40]	; 0x28
 8000a8c:	e7a3      	b.n	80009d6 <cbvprintf+0x43a>
		switch (conv->specifier) {
 8000a8e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000a92:	2878      	cmp	r0, #120	; 0x78
 8000a94:	d8ae      	bhi.n	80009f4 <cbvprintf+0x458>
 8000a96:	2862      	cmp	r0, #98	; 0x62
 8000a98:	d822      	bhi.n	8000ae0 <cbvprintf+0x544>
 8000a9a:	2825      	cmp	r0, #37	; 0x25
 8000a9c:	f43f ad8f 	beq.w	80005be <cbvprintf+0x22>
 8000aa0:	2858      	cmp	r0, #88	; 0x58
 8000aa2:	d1a7      	bne.n	80009f4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000aa4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000aae:	ab04      	add	r3, sp, #16
 8000ab0:	aa0c      	add	r2, sp, #48	; 0x30
 8000ab2:	f002 f879 	bl	8002ba8 <encode_uint>
 8000ab6:	4682      	mov	sl, r0
			if (precision >= 0) {
 8000ab8:	f1b8 0f00 	cmp.w	r8, #0
 8000abc:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000ac0:	db0c      	blt.n	8000adc <cbvprintf+0x540>
				conv->flag_zero = false;
 8000ac2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000ac6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8000aca:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000ace:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8000ad0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000ad4:	d902      	bls.n	8000adc <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
 8000ad6:	eba8 0303 	sub.w	r3, r8, r3
 8000ada:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000adc:	4680      	mov	r8, r0
 8000ade:	e03d      	b.n	8000b5c <cbvprintf+0x5c0>
		switch (conv->specifier) {
 8000ae0:	3863      	subs	r0, #99	; 0x63
 8000ae2:	2815      	cmp	r0, #21
 8000ae4:	d886      	bhi.n	80009f4 <cbvprintf+0x458>
 8000ae6:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <cbvprintf+0x550>)
 8000ae8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000aec:	08000b6d 	.word	0x08000b6d
 8000af0:	08000bd1 	.word	0x08000bd1
 8000af4:	080009f5 	.word	0x080009f5
 8000af8:	080009f5 	.word	0x080009f5
 8000afc:	080009f5 	.word	0x080009f5
 8000b00:	080009f5 	.word	0x080009f5
 8000b04:	08000bd1 	.word	0x08000bd1
 8000b08:	080009f5 	.word	0x080009f5
 8000b0c:	080009f5 	.word	0x080009f5
 8000b10:	080009f5 	.word	0x080009f5
 8000b14:	080009f5 	.word	0x080009f5
 8000b18:	08000c2b 	.word	0x08000c2b
 8000b1c:	08000bf9 	.word	0x08000bf9
 8000b20:	08000bfd 	.word	0x08000bfd
 8000b24:	080009f5 	.word	0x080009f5
 8000b28:	080009f5 	.word	0x080009f5
 8000b2c:	08000b45 	.word	0x08000b45
 8000b30:	080009f5 	.word	0x080009f5
 8000b34:	08000bf9 	.word	0x08000bf9
 8000b38:	080009f5 	.word	0x080009f5
 8000b3c:	080009f5 	.word	0x080009f5
 8000b40:	08000bf9 	.word	0x08000bf9
			if (precision >= 0) {
 8000b44:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8000b48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 8000b4c:	db0a      	blt.n	8000b64 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
 8000b4e:	4641      	mov	r1, r8
 8000b50:	4650      	mov	r0, sl
 8000b52:	f002 f8a0 	bl	8002c96 <strnlen>
			bpe = bps + len;
 8000b56:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 8000b5a:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000b5c:	f1ba 0f00 	cmp.w	sl, #0
 8000b60:	d10c      	bne.n	8000b7c <cbvprintf+0x5e0>
 8000b62:	e747      	b.n	80009f4 <cbvprintf+0x458>
				len = strlen(bps);
 8000b64:	4650      	mov	r0, sl
 8000b66:	f002 f88f 	bl	8002c88 <strlen>
 8000b6a:	e7f4      	b.n	8000b56 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b6e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 8000b72:	2600      	movs	r6, #0
			bps = buf;
 8000b74:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
 8000b78:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
 8000b7c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 8000b80:	b106      	cbz	r6, 8000b84 <cbvprintf+0x5e8>
			nj_len += 1U;
 8000b82:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000b84:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000b88:	06d0      	lsls	r0, r2, #27
 8000b8a:	d568      	bpl.n	8000c5e <cbvprintf+0x6c2>
			nj_len += 2U;
 8000b8c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000b8e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000b90:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000b92:	bf48      	it	mi
 8000b94:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000b96:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000b98:	bf48      	it	mi
 8000b9a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000b9c:	f1b9 0f00 	cmp.w	r9, #0
 8000ba0:	dd76      	ble.n	8000c90 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
 8000ba2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000ba6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 8000baa:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	0753      	lsls	r3, r2, #29
 8000bb2:	d46d      	bmi.n	8000c90 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
 8000bb4:	0650      	lsls	r0, r2, #25
 8000bb6:	d561      	bpl.n	8000c7c <cbvprintf+0x6e0>
					if (sign != 0) {
 8000bb8:	b146      	cbz	r6, 8000bcc <cbvprintf+0x630>
						OUTC(sign);
 8000bba:	9b02      	ldr	r3, [sp, #8]
 8000bbc:	4659      	mov	r1, fp
 8000bbe:	4630      	mov	r0, r6
 8000bc0:	4798      	blx	r3
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	db57      	blt.n	8000c76 <cbvprintf+0x6da>
						sign = 0;
 8000bc6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000bc8:	3501      	adds	r5, #1
						sign = 0;
 8000bca:	461e      	mov	r6, r3
					pad = '0';
 8000bcc:	2330      	movs	r3, #48	; 0x30
 8000bce:	e056      	b.n	8000c7e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
 8000bd0:	071e      	lsls	r6, r3, #28
 8000bd2:	d40f      	bmi.n	8000bf4 <cbvprintf+0x658>
				sign = ' ';
 8000bd4:	f013 0610 	ands.w	r6, r3, #16
 8000bd8:	bf18      	it	ne
 8000bda:	2620      	movne	r6, #32
			sint = value->sint;
 8000bdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f6bf af5f 	bge.w	8000aa4 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
 8000be6:	4252      	negs	r2, r2
 8000be8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8000bf0:	262d      	movs	r6, #45	; 0x2d
 8000bf2:	e757      	b.n	8000aa4 <cbvprintf+0x508>
				sign = '+';
 8000bf4:	262b      	movs	r6, #43	; 0x2b
 8000bf6:	e7f1      	b.n	8000bdc <cbvprintf+0x640>
		switch (conv->specifier) {
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	e753      	b.n	8000aa4 <cbvprintf+0x508>
			if (value->ptr != NULL) {
 8000bfc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000bfe:	b340      	cbz	r0, 8000c52 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c00:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	aa0c      	add	r2, sp, #48	; 0x30
 8000c08:	ab04      	add	r3, sp, #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f001 ffcc 	bl	8002ba8 <encode_uint>
				conv->altform_0c = true;
 8000c10:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8000c14:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000c18:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c20:	4682      	mov	sl, r0
				conv->altform_0c = true;
 8000c22:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8000c26:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000c28:	e746      	b.n	8000ab8 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
 8000c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000c2c:	2907      	cmp	r1, #7
 8000c2e:	f63f aee1 	bhi.w	80009f4 <cbvprintf+0x458>
 8000c32:	e8df f001 	tbb	[pc, r1]
 8000c36:	040c      	.short	0x040c
 8000c38:	08080c06 	.word	0x08080c06
 8000c3c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000c3e:	701d      	strb	r5, [r3, #0]
		break;
 8000c40:	e6d8      	b.n	80009f4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
 8000c42:	801d      	strh	r5, [r3, #0]
		break;
 8000c44:	e6d6      	b.n	80009f4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 8000c46:	17ea      	asrs	r2, r5, #31
 8000c48:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000c4c:	e6d2      	b.n	80009f4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000c4e:	601d      	str	r5, [r3, #0]
		break;
 8000c50:	e6d0      	b.n	80009f4 <cbvprintf+0x458>
			bps = "(nil)";
 8000c52:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000d1c <cbvprintf+0x780>
 8000c56:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000c58:	f10a 0805 	add.w	r8, sl, #5
 8000c5c:	e78e      	b.n	8000b7c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
 8000c5e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000c60:	bf48      	it	mi
 8000c62:	3301      	addmi	r3, #1
 8000c64:	e793      	b.n	8000b8e <cbvprintf+0x5f2>
					OUTC(pad);
 8000c66:	4618      	mov	r0, r3
 8000c68:	9303      	str	r3, [sp, #12]
 8000c6a:	4659      	mov	r1, fp
 8000c6c:	9b02      	ldr	r3, [sp, #8]
 8000c6e:	4798      	blx	r3
 8000c70:	2800      	cmp	r0, #0
 8000c72:	9b03      	ldr	r3, [sp, #12]
 8000c74:	da04      	bge.n	8000c80 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
 8000c76:	b011      	add	sp, #68	; 0x44
 8000c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000c7c:	2320      	movs	r3, #32
 8000c7e:	444d      	add	r5, r9
 8000c80:	464a      	mov	r2, r9
				while (width-- > 0) {
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	eba5 0109 	sub.w	r1, r5, r9
 8000c88:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8000c8c:	dceb      	bgt.n	8000c66 <cbvprintf+0x6ca>
 8000c8e:	460d      	mov	r5, r1
		if (sign != 0) {
 8000c90:	b136      	cbz	r6, 8000ca0 <cbvprintf+0x704>
			OUTC(sign);
 8000c92:	9b02      	ldr	r3, [sp, #8]
 8000c94:	4659      	mov	r1, fp
 8000c96:	4630      	mov	r0, r6
 8000c98:	4798      	blx	r3
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	dbeb      	blt.n	8000c76 <cbvprintf+0x6da>
 8000c9e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000ca0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000ca4:	06d9      	lsls	r1, r3, #27
 8000ca6:	d401      	bmi.n	8000cac <cbvprintf+0x710>
 8000ca8:	071a      	lsls	r2, r3, #28
 8000caa:	d506      	bpl.n	8000cba <cbvprintf+0x71e>
				OUTC('0');
 8000cac:	9b02      	ldr	r3, [sp, #8]
 8000cae:	4659      	mov	r1, fp
 8000cb0:	2030      	movs	r0, #48	; 0x30
 8000cb2:	4798      	blx	r3
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	dbde      	blt.n	8000c76 <cbvprintf+0x6da>
 8000cb8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000cba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000cbe:	06db      	lsls	r3, r3, #27
 8000cc0:	d507      	bpl.n	8000cd2 <cbvprintf+0x736>
				OUTC(conv->specifier);
 8000cc2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000cc6:	9b02      	ldr	r3, [sp, #8]
 8000cc8:	4659      	mov	r1, fp
 8000cca:	4798      	blx	r3
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	dbd2      	blt.n	8000c76 <cbvprintf+0x6da>
 8000cd0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000cd2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000cd4:	442e      	add	r6, r5
 8000cd6:	1b73      	subs	r3, r6, r5
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dc16      	bgt.n	8000d0a <cbvprintf+0x76e>
			OUTS(bps, bpe);
 8000cdc:	9802      	ldr	r0, [sp, #8]
 8000cde:	4643      	mov	r3, r8
 8000ce0:	4652      	mov	r2, sl
 8000ce2:	4659      	mov	r1, fp
 8000ce4:	f001 ffa6 	bl	8002c34 <outs>
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	dbc4      	blt.n	8000c76 <cbvprintf+0x6da>
 8000cec:	4405      	add	r5, r0
		while (width > 0) {
 8000cee:	44a9      	add	r9, r5
 8000cf0:	eba9 0305 	sub.w	r3, r9, r5
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f77f ae7d 	ble.w	80009f4 <cbvprintf+0x458>
			OUTC(' ');
 8000cfa:	9b02      	ldr	r3, [sp, #8]
 8000cfc:	4659      	mov	r1, fp
 8000cfe:	2020      	movs	r0, #32
 8000d00:	4798      	blx	r3
 8000d02:	2800      	cmp	r0, #0
 8000d04:	dbb7      	blt.n	8000c76 <cbvprintf+0x6da>
 8000d06:	3501      	adds	r5, #1
			--width;
 8000d08:	e7f2      	b.n	8000cf0 <cbvprintf+0x754>
				OUTC('0');
 8000d0a:	9b02      	ldr	r3, [sp, #8]
 8000d0c:	4659      	mov	r1, fp
 8000d0e:	2030      	movs	r0, #48	; 0x30
 8000d10:	4798      	blx	r3
 8000d12:	2800      	cmp	r0, #0
 8000d14:	dbaf      	blt.n	8000c76 <cbvprintf+0x6da>
 8000d16:	3501      	adds	r5, #1
 8000d18:	e7dd      	b.n	8000cd6 <cbvprintf+0x73a>
 8000d1a:	bf00      	nop
 8000d1c:	08003b08 	.word	0x08003b08

08000d20 <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <st_stm32f4_init+0x34>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d28:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d30:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000d32:	f04f 0210 	mov.w	r2, #16
 8000d36:	f3ef 8311 	mrs	r3, BASEPRI
 8000d3a:	f382 8812 	msr	BASEPRI_MAX, r2
 8000d3e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000d42:	f383 8811 	msr	BASEPRI, r3
 8000d46:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000d4a:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <st_stm32f4_init+0x38>)
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <st_stm32f4_init+0x3c>)
 8000d4e:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000d50:	2000      	movs	r0, #0
 8000d52:	4770      	bx	lr
 8000d54:	40023c00 	.word	0x40023c00
 8000d58:	2000002c 	.word	0x2000002c
 8000d5c:	00f42400 	.word	0x00f42400

08000d60 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8000d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 8000d64:	4688      	mov	r8, r1
 8000d66:	b379      	cbz	r1, 8000dc8 <stm32_dt_pinctrl_configure+0x68>
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 8000d68:	2600      	movs	r6, #0
	port_device = gpio_ports[STM32_PORT(pin)];
 8000d6a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8000dd4 <stm32_dt_pinctrl_configure+0x74>
 8000d6e:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 8000d70:	4635      	mov	r5, r6
		mux = pinctrl[i].pinmux;
 8000d72:	f854 0c04 	ldr.w	r0, [r4, #-4]
		} else {
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8000d76:	f010 0ff0 	tst.w	r0, #240	; 0xf0
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8000d7a:	fa5f fb80 	uxtb.w	fp, r0
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8000d7e:	d10e      	bne.n	8000d9e <stm32_dt_pinctrl_configure+0x3e>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8000d80:	6825      	ldr	r5, [r4, #0]
 8000d82:	f045 0520 	orr.w	r5, r5, #32
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8000d86:	f3c0 2a07 	ubfx	sl, r0, #8, #8
	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8000d8a:	f3c0 3003 	ubfx	r0, r0, #12, #4
 8000d8e:	280a      	cmp	r0, #10
 8000d90:	d81d      	bhi.n	8000dce <stm32_dt_pinctrl_configure+0x6e>
	port_device = gpio_ports[STM32_PORT(pin)];
 8000d92:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8000d96:	b93f      	cbnz	r7, 8000da8 <stm32_dt_pinctrl_configure+0x48>
		return -ENODEV;
 8000d98:	f06f 0012 	mvn.w	r0, #18
 8000d9c:	e015      	b.n	8000dca <stm32_dt_pinctrl_configure+0x6a>
			func = STM32_MODER_ANALOG_MODE;
 8000d9e:	f1bb 0f10 	cmp.w	fp, #16
 8000da2:	bf08      	it	eq
 8000da4:	2530      	moveq	r5, #48	; 0x30
 8000da6:	e7ee      	b.n	8000d86 <stm32_dt_pinctrl_configure+0x26>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8000da8:	4638      	mov	r0, r7
 8000daa:	f002 fa90 	bl	80032ce <z_device_ready>
 8000dae:	3408      	adds	r4, #8
 8000db0:	2800      	cmp	r0, #0
 8000db2:	d0f1      	beq.n	8000d98 <stm32_dt_pinctrl_configure+0x38>
	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8000db4:	465b      	mov	r3, fp
 8000db6:	462a      	mov	r2, r5
 8000db8:	f00a 010f 	and.w	r1, sl, #15
 8000dbc:	4638      	mov	r0, r7
	for (int i = 0; i < list_size; i++) {
 8000dbe:	3601      	adds	r6, #1
	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8000dc0:	f002 f86c 	bl	8002e9c <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8000dc4:	4546      	cmp	r6, r8
 8000dc6:	d1d4      	bne.n	8000d72 <stm32_dt_pinctrl_configure+0x12>
		return 0;
 8000dc8:	2000      	movs	r0, #0
			return ret;
		}
	}

	return 0;
}
 8000dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
 8000dce:	f06f 0015 	mvn.w	r0, #21
 8000dd2:	e7fa      	b.n	8000dca <stm32_dt_pinctrl_configure+0x6a>
 8000dd4:	08003940 	.word	0x08003940

08000dd8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000dd8:	4901      	ldr	r1, [pc, #4]	; (8000de0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000dda:	2210      	movs	r2, #16
	str	r2, [r1]
 8000ddc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000dde:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000de0:	e000ed10 	.word	0xe000ed10

08000de4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000de4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000de6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000de8:	f380 8811 	msr	BASEPRI, r0
	isb
 8000dec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000df0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000df4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000df6:	b662      	cpsie	i
	isb
 8000df8:	f3bf 8f6f 	isb	sy

	bx	lr
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000e00:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db08      	blt.n	8000e18 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	2201      	movs	r2, #1
 8000e08:	f000 001f 	and.w	r0, r0, #31
 8000e0c:	fa02 f000 	lsl.w	r0, r2, r0
 8000e10:	095b      	lsrs	r3, r3, #5
 8000e12:	4a02      	ldr	r2, [pc, #8]	; (8000e1c <arch_irq_enable+0x1c>)
 8000e14:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000e20:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000e22:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	bfa8      	it	ge
 8000e26:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8000e2a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	bfb8      	it	lt
 8000e30:	4b06      	ldrlt	r3, [pc, #24]	; (8000e4c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000e36:	bfac      	ite	ge
 8000e38:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	bfb4      	ite	lt
 8000e44:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed14 	.word	0xe000ed14

08000e50 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000e50:	bf30      	wfi
    b z_SysNmiOnReset
 8000e52:	f7ff bffd 	b.w	8000e50 <z_SysNmiOnReset>
 8000e56:	bf00      	nop

08000e58 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000e58:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8000e5a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <z_arm_prep_c+0x44>)
 8000e5e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000e62:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e68:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000e6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e70:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000e78:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000e7c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000e80:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000e84:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000e88:	f001 f8b8 	bl	8001ffc <z_bss_zero>
	z_data_copy();
 8000e8c:	f001 fc6a 	bl	8002764 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000e90:	f000 f9be 	bl	8001210 <z_arm_interrupt_init>
	z_cstart();
 8000e94:	f001 f8bc 	bl	8002010 <z_cstart>
 8000e98:	08000000 	.word	0x08000000
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000ea0:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000ea2:	490a      	ldr	r1, [pc, #40]	; (8000ecc <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000ea4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000ea6:	6809      	ldr	r1, [r1, #0]
 8000ea8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000eaa:	4909      	ldr	r1, [pc, #36]	; (8000ed0 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000eac:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000eae:	684b      	ldr	r3, [r1, #4]
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	604b      	str	r3, [r1, #4]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000ec0:	6893      	ldr	r3, [r2, #8]
}
 8000ec2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200002c8 	.word	0x200002c8
 8000ecc:	08003af0 	.word	0x08003af0
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000ed4:	4912      	ldr	r1, [pc, #72]	; (8000f20 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000ed6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000ed8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000edc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000ede:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000ee2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000ee6:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000ee8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000eec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000ef0:	4f0c      	ldr	r7, [pc, #48]	; (8000f24 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000ef2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000ef6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000ef8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000efa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000efc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8000efe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000f00:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000f02:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000f06:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000f08:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000f0a:	f000 f9c1 	bl	8001290 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000f0e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000f12:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000f16:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000f1a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000f1e:	4770      	bx	lr
    ldr r1, =_kernel
 8000f20:	200002c8 	.word	0x200002c8
    ldr v4, =_SCS_ICSR
 8000f24:	e000ed04 	.word	0xe000ed04

08000f28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000f28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000f2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000f2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000f32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000f36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000f38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000f3c:	2902      	cmp	r1, #2
    beq _oops
 8000f3e:	d0ff      	beq.n	8000f40 <_oops>

08000f40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000f40:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8000f42:	f001 fe92 	bl	8002c6a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8000f46:	bd01      	pop	{r0, pc}

08000f48 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000f48:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000f4c:	9b00      	ldr	r3, [sp, #0]
 8000f4e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000f52:	490a      	ldr	r1, [pc, #40]	; (8000f7c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000f54:	9b01      	ldr	r3, [sp, #4]
 8000f56:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000f5a:	9b02      	ldr	r3, [sp, #8]
 8000f5c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000f60:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f68:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000f6c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000f70:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000f72:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000f74:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000f76:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	08002b95 	.word	0x08002b95

08000f80 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <z_check_thread_stack_fail+0x28>)
{
 8000f82:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8000f84:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8000f86:	b170      	cbz	r0, 8000fa6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8000f88:	f113 0f16 	cmn.w	r3, #22
 8000f8c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000f8e:	d005      	beq.n	8000f9c <z_check_thread_stack_fail+0x1c>
 8000f90:	f1a0 0220 	sub.w	r2, r0, #32
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d805      	bhi.n	8000fa4 <z_check_thread_stack_fail+0x24>
 8000f98:	4283      	cmp	r3, r0
 8000f9a:	d203      	bcs.n	8000fa4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8000f9c:	4281      	cmp	r1, r0
 8000f9e:	bf28      	it	cs
 8000fa0:	2000      	movcs	r0, #0
 8000fa2:	4770      	bx	lr
 8000fa4:	2000      	movs	r0, #0
}
 8000fa6:	4770      	bx	lr
 8000fa8:	200002c8 	.word	0x200002c8

08000fac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8000fac:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <arch_switch_to_main_thread+0x28>)
 8000fb0:	6098      	str	r0, [r3, #8]
{
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8000fb6:	f000 f96b 	bl	8001290 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f385 8809 	msr	PSP, r5
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	b663      	cpsie	if
 8000fc4:	f381 8811 	msr	BASEPRI, r1
 8000fc8:	f3bf 8f6f 	isb	sy
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f001 fde0 	bl	8002b94 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000fd4:	200002c8 	.word	0x200002c8

08000fd8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000fd8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000fda:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000fde:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000fe2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000fe6:	4904      	ldr	r1, [pc, #16]	; (8000ff8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000fe8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000fea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8000fec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000fee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000ff2:	4902      	ldr	r1, [pc, #8]	; (8000ffc <_isr_wrapper+0x24>)
	bx r1
 8000ff4:	4708      	bx	r1
 8000ff6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000ff8:	08003610 	.word	0x08003610
	ldr r1, =z_arm_int_exit
 8000ffc:	08001001 	.word	0x08001001

08001000 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001002:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001004:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8001006:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001008:	d003      	beq.n	8001012 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800100a:	4903      	ldr	r1, [pc, #12]	; (8001018 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 800100c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001010:	600a      	str	r2, [r1, #0]

08001012 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001012:	4770      	bx	lr
	ldr r3, =_kernel
 8001014:	200002c8 	.word	0x200002c8
	ldr r1, =_SCS_ICSR
 8001018:	e000ed04 	.word	0xe000ed04

0800101c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 800101c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <mem_manage_fault+0x68>)
{
 8001020:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 8001028:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800102a:	0790      	lsls	r0, r2, #30
 800102c:	d519      	bpl.n	8001062 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 800102e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001032:	0612      	lsls	r2, r2, #24
 8001034:	d515      	bpl.n	8001062 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8001036:	b119      	cbz	r1, 8001040 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800103a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8001040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001046:	06d1      	lsls	r1, r2, #27
 8001048:	d40e      	bmi.n	8001068 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800104c:	079a      	lsls	r2, r3, #30
 800104e:	d40b      	bmi.n	8001068 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001050:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001052:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <mem_manage_fault+0x68>)
 8001054:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001056:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800105a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 800105c:	2300      	movs	r3, #0
 800105e:	7023      	strb	r3, [r4, #0]

	return reason;
}
 8001060:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 8001062:	f06f 0015 	mvn.w	r0, #21
 8001066:	e7eb      	b.n	8001040 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <mem_manage_fault+0x68>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	051b      	lsls	r3, r3, #20
 800106e:	d5ef      	bpl.n	8001050 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8001070:	4629      	mov	r1, r5
 8001072:	f7ff ff85 	bl	8000f80 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8001076:	2800      	cmp	r0, #0
 8001078:	d0ea      	beq.n	8001050 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800107a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800107e:	2002      	movs	r0, #2
 8001080:	e7e7      	b.n	8001052 <mem_manage_fault+0x36>
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <bus_fault.constprop.0+0x38>)
 800108a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800108c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800108e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001090:	0592      	lsls	r2, r2, #22
 8001092:	d508      	bpl.n	80010a6 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8001094:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8001096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001098:	0412      	lsls	r2, r2, #16
 800109a:	d504      	bpl.n	80010a6 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 800109c:	b118      	cbz	r0, 80010a6 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800109e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <bus_fault.constprop.0+0x38>)
 80010a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80010aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ac:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80010ae:	bf58      	it	pl
 80010b0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80010b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 80010b4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80010b6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80010bc:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80010c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <z_arm_fault+0x124>)
 80010c8:	685b      	ldr	r3, [r3, #4]
{
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80010ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010d2:	2600      	movs	r6, #0
 80010d4:	f386 8811 	msr	BASEPRI, r6
 80010d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80010dc:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 80010e0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80010e4:	d111      	bne.n	800110a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80010e6:	f002 010c 	and.w	r1, r2, #12
 80010ea:	2908      	cmp	r1, #8
 80010ec:	d00d      	beq.n	800110a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80010ee:	0711      	lsls	r1, r2, #28
 80010f0:	d401      	bmi.n	80010f6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 80010f2:	4605      	mov	r5, r0
			*nested_exc = true;
 80010f4:	2601      	movs	r6, #1
	*recoverable = false;
 80010f6:	2200      	movs	r2, #0
	switch (fault) {
 80010f8:	3b03      	subs	r3, #3
	*recoverable = false;
 80010fa:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d86b      	bhi.n	80011da <z_arm_fault+0x116>
 8001102:	e8df f003 	tbb	[pc, r3]
 8001106:	5504      	.short	0x5504
 8001108:	5d59      	.short	0x5d59
		return NULL;
 800110a:	4635      	mov	r5, r6
 800110c:	e7f3      	b.n	80010f6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <z_arm_fault+0x124>)
 8001110:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001112:	f014 0402 	ands.w	r4, r4, #2
 8001116:	d160      	bne.n	80011da <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111a:	2a00      	cmp	r2, #0
 800111c:	db15      	blt.n	800114a <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800111e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001120:	0052      	lsls	r2, r2, #1
 8001122:	d512      	bpl.n	800114a <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
 8001124:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001126:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 800112a:	f64d 7202 	movw	r2, #57090	; 0xdf02
 800112e:	4291      	cmp	r1, r2
 8001130:	d00a      	beq.n	8001148 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
 8001132:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001136:	b30a      	cbz	r2, 800117c <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001138:	f10d 0207 	add.w	r2, sp, #7
 800113c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800113e:	4628      	mov	r0, r5
 8001140:	f7ff ff6c 	bl	800101c <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 8001144:	4604      	mov	r4, r0
		break;
 8001146:	e000      	b.n	800114a <z_arm_fault+0x86>
			reason = esf->basic.r0;
 8001148:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800114a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800114e:	b99b      	cbnz	r3, 8001178 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8001150:	2220      	movs	r2, #32
 8001152:	4629      	mov	r1, r5
 8001154:	a802      	add	r0, sp, #8
 8001156:	f001 fdb3 	bl	8002cc0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800115a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800115c:	2e00      	cmp	r6, #0
 800115e:	d03e      	beq.n	80011de <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001160:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001164:	b922      	cbnz	r2, 8001170 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8001166:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800116a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800116e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8001170:	a902      	add	r1, sp, #8
 8001172:	4620      	mov	r0, r4
 8001174:	f001 fd77 	bl	8002c66 <z_arm_fatal_error>
}
 8001178:	b00a      	add	sp, #40	; 0x28
 800117a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 800117c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001180:	b12a      	cbz	r2, 800118e <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
 8001182:	f10d 0107 	add.w	r1, sp, #7
 8001186:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8001188:	f7ff ff7e 	bl	8001088 <bus_fault.constprop.0>
 800118c:	e7da      	b.n	8001144 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
 800118e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001190:	b292      	uxth	r2, r2
 8001192:	2a00      	cmp	r2, #0
 8001194:	d0d9      	beq.n	800114a <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800119a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800119c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800119e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80011a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80011a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011a4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80011a8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
 80011ae:	e7cc      	b.n	800114a <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
 80011b0:	f10d 0207 	add.w	r2, sp, #7
 80011b4:	2100      	movs	r1, #0
 80011b6:	e7c2      	b.n	800113e <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
 80011b8:	f10d 0107 	add.w	r1, sp, #7
 80011bc:	2000      	movs	r0, #0
 80011be:	e7e3      	b.n	8001188 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <z_arm_fault+0x124>)
 80011c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80011c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80011c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80011c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80011ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80011cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80011ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011d0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80011d4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80011da:	2400      	movs	r4, #0
 80011dc:	e7b5      	b.n	800114a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80011de:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	e7c2      	b.n	800116e <z_arm_fault+0xaa>
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80011ec:	4a02      	ldr	r2, [pc, #8]	; (80011f8 <z_arm_fault_init+0xc>)
 80011ee:	6953      	ldr	r3, [r2, #20]
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80011fc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001200:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001204:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001206:	4672      	mov	r2, lr
	bl z_arm_fault
 8001208:	f7ff ff5c 	bl	80010c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 800120c:	bd01      	pop	{r0, pc}
 800120e:	bf00      	nop

08001210 <z_arm_interrupt_init>:
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	2110      	movs	r1, #16
 8001216:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001218:	3301      	adds	r3, #1
 800121a:	2b56      	cmp	r3, #86	; 0x56
 800121c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001220:	d1f9      	bne.n	8001216 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100

08001228 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001228:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800122a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001230:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001234:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001236:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800123a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800123e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001240:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001242:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001246:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800124a:	f7ff fe05 	bl	8000e58 <z_arm_prep_c>
 800124e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001250:	20000880 	.word	0x20000880

08001254 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <z_impl_k_thread_abort+0x1c>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4283      	cmp	r3, r0
 800125a:	d107      	bne.n	800126c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800125c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001260:	b123      	cbz	r3, 800126c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <z_impl_k_thread_abort+0x20>)
 8001264:	6853      	ldr	r3, [r2, #4]
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 800126c:	f001 ba28 	b.w	80026c0 <z_thread_abort>
 8001270:	200002c8 	.word	0x200002c8
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <z_arm_configure_static_mpu_regions+0xc>)
 800127a:	4a03      	ldr	r2, [pc, #12]	; (8001288 <z_arm_configure_static_mpu_regions+0x10>)
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <z_arm_configure_static_mpu_regions+0x14>)
 800127e:	2101      	movs	r1, #1
 8001280:	f000 b86e 	b.w	8001360 <arm_core_mpu_configure_static_mpu_regions>
 8001284:	20020000 	.word	0x20020000
 8001288:	20000000 	.word	0x20000000
 800128c:	0800396c 	.word	0x0800396c

08001290 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8001290:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8001294:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 8001296:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800129a:	2120      	movs	r1, #32
 800129c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80012a0:	4618      	mov	r0, r3
 80012a2:	2101      	movs	r1, #1
 80012a4:	f000 b866 	b.w	8001374 <arm_core_mpu_configure_dynamic_mpu_regions>
 80012a8:	20000170 	.word	0x20000170
 80012ac:	150b0000 	.word	0x150b0000

080012b0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80012b2:	4f1f      	ldr	r7, [pc, #124]	; (8001330 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80012b4:	2600      	movs	r6, #0
 80012b6:	428e      	cmp	r6, r1
 80012b8:	db01      	blt.n	80012be <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80012ba:	4610      	mov	r0, r2
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 80012be:	6844      	ldr	r4, [r0, #4]
 80012c0:	b39c      	cbz	r4, 800132a <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 80012c2:	b153      	cbz	r3, 80012da <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80012c4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80012c8:	ea14 0f0c 	tst.w	r4, ip
 80012cc:	d118      	bne.n	8001300 <mpu_configure_regions+0x50>
		&&
 80012ce:	2c1f      	cmp	r4, #31
 80012d0:	d916      	bls.n	8001300 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 80012d2:	6805      	ldr	r5, [r0, #0]
		&&
 80012d4:	ea1c 0f05 	tst.w	ip, r5
 80012d8:	d112      	bne.n	8001300 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80012da:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80012dc:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80012de:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80012e2:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 80012e4:	d90f      	bls.n	8001306 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 80012e6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80012ea:	d80e      	bhi.n	800130a <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80012ec:	3c01      	subs	r4, #1
 80012ee:	fab4 f484 	clz	r4, r4
 80012f2:	f1c4 041f 	rsb	r4, r4, #31
 80012f6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80012f8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80012fa:	ea4c 0404 	orr.w	r4, ip, r4
 80012fe:	d906      	bls.n	800130e <mpu_configure_regions+0x5e>
			return -EINVAL;
 8001300:	f06f 0215 	mvn.w	r2, #21
 8001304:	e7d9      	b.n	80012ba <mpu_configure_regions+0xa>
		return REGION_32B;
 8001306:	2408      	movs	r4, #8
 8001308:	e7f6      	b.n	80012f8 <mpu_configure_regions+0x48>
		return REGION_4G;
 800130a:	243e      	movs	r4, #62	; 0x3e
 800130c:	e7f4      	b.n	80012f8 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800130e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001312:	4315      	orrs	r5, r2
 8001314:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001318:	f044 0401 	orr.w	r4, r4, #1
 800131c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001320:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8001324:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001326:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 800132a:	3601      	adds	r6, #1
 800132c:	300c      	adds	r0, #12
 800132e:	e7c2      	b.n	80012b6 <mpu_configure_regions+0x6>
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <arm_core_mpu_enable+0x14>)
 8001336:	2205      	movs	r2, #5
 8001338:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 800133c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800134c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <arm_core_mpu_disable+0x10>)
 8001352:	2200      	movs	r2, #0
 8001354:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001360:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001362:	4c03      	ldr	r4, [pc, #12]	; (8001370 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001364:	2301      	movs	r3, #1
 8001366:	7822      	ldrb	r2, [r4, #0]
 8001368:	f7ff ffa2 	bl	80012b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800136c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 800136e:	bd10      	pop	{r4, pc}
 8001370:	200002fc 	.word	0x200002fc

08001374 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8001374:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8001378:	2300      	movs	r3, #0
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	f7ff ff98 	bl	80012b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001380:	f110 0f16 	cmn.w	r0, #22
 8001384:	d002      	beq.n	800138c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8001386:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8001388:	2807      	cmp	r0, #7
 800138a:	dd00      	ble.n	800138e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 800138c:	bd08      	pop	{r3, pc}
 800138e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001392:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001396:	3001      	adds	r0, #1
 8001398:	e7f6      	b.n	8001388 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 800139a:	bf00      	nop
 800139c:	200002fc 	.word	0x200002fc
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80013a4:	4914      	ldr	r1, [pc, #80]	; (80013f8 <z_arm_mpu_init+0x54>)
 80013a6:	6808      	ldr	r0, [r1, #0]
 80013a8:	2808      	cmp	r0, #8
{
 80013aa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80013ac:	d821      	bhi.n	80013f2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80013ae:	f7ff ffcd 	bl	800134c <arm_core_mpu_disable>
 80013b2:	4c12      	ldr	r4, [pc, #72]	; (80013fc <z_arm_mpu_init+0x58>)
 80013b4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80013b6:	2200      	movs	r2, #0
 80013b8:	4290      	cmp	r0, r2
 80013ba:	f101 010c 	add.w	r1, r1, #12
 80013be:	d105      	bne.n	80013cc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <z_arm_mpu_init+0x5c>)
 80013c2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80013c4:	f7ff ffb6 	bl	8001334 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80013c8:	2000      	movs	r0, #0
}
 80013ca:	bd10      	pop	{r4, pc}
 80013cc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80013d0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80013d4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80013d8:	4313      	orrs	r3, r2
 80013da:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80013de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80013e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80013ee:	3201      	adds	r2, #1
 80013f0:	e7e2      	b.n	80013b8 <z_arm_mpu_init+0x14>
		return -1;
 80013f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f6:	e7e8      	b.n	80013ca <z_arm_mpu_init+0x26>
 80013f8:	08003978 	.word	0x08003978
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	200002fc 	.word	0x200002fc

08001404 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8001404:	4b01      	ldr	r3, [pc, #4]	; (800140c <__stdout_hook_install+0x8>)
 8001406:	6018      	str	r0, [r3, #0]
}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000004 	.word	0x20000004

08001410 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8001410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001414:	4f0d      	ldr	r7, [pc, #52]	; (800144c <__stm32_exti_isr.isra.0+0x3c>)
 8001416:	4604      	mov	r4, r0
 8001418:	460e      	mov	r6, r1
 800141a:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800141c:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001420:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8001424:	42b4      	cmp	r4, r6
 8001426:	db01      	blt.n	800142c <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8001428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800142c:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800142e:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8001432:	ea33 0202 	bics.w	r2, r3, r2
 8001436:	d107      	bne.n	8001448 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001438:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 800143a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800143e:	b11b      	cbz	r3, 8001448 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8001440:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8001444:	4620      	mov	r0, r4
 8001446:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8001448:	3401      	adds	r4, #1
 800144a:	e7eb      	b.n	8001424 <__stm32_exti_isr.isra.0+0x14>
 800144c:	40013c00 	.word	0x40013c00

08001450 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8001452:	2301      	movs	r3, #1
 8001454:	6811      	ldr	r1, [r2, #0]
 8001456:	4083      	lsls	r3, r0
 8001458:	430b      	orrs	r3, r1
 800145a:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <stm32_exti_enable+0x18>)
 800145e:	5618      	ldrsb	r0, [r3, r0]
 8001460:	f7ff bcce 	b.w	8000e00 <arch_irq_enable>
 8001464:	40013c00 	.word	0x40013c00
 8001468:	08003b3b 	.word	0x08003b3b

0800146c <stm32_exti_disable>:
	if (line < 32) {
 800146c:	281f      	cmp	r0, #31
 800146e:	dc07      	bgt.n	8001480 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001470:	4904      	ldr	r1, [pc, #16]	; (8001484 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8001472:	2201      	movs	r2, #1
 8001474:	680b      	ldr	r3, [r1, #0]
 8001476:	fa02 f000 	lsl.w	r0, r2, r0
 800147a:	ea23 0000 	bic.w	r0, r3, r0
 800147e:	6008      	str	r0, [r1, #0]
}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40013c00 	.word	0x40013c00

08001488 <stm32_exti_trigger>:
	switch (trigger) {
 8001488:	2903      	cmp	r1, #3
 800148a:	d80f      	bhi.n	80014ac <stm32_exti_trigger+0x24>
 800148c:	e8df f001 	tbb	[pc, r1]
 8001490:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8001496:	2201      	movs	r2, #1
 8001498:	6899      	ldr	r1, [r3, #8]
 800149a:	fa02 f000 	lsl.w	r0, r2, r0
 800149e:	ea21 0100 	bic.w	r1, r1, r0
 80014a2:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80014aa:	60d8      	str	r0, [r3, #12]
}
 80014ac:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80014ae:	2301      	movs	r3, #1
 80014b0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <stm32_exti_trigger+0x64>)
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	4302      	orrs	r2, r0
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	e7f2      	b.n	80014a4 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80014be:	2301      	movs	r3, #1
 80014c0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <stm32_exti_trigger+0x64>)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	4302      	orrs	r2, r0
 80014ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	ea22 0000 	bic.w	r0, r2, r0
 80014d2:	6098      	str	r0, [r3, #8]
}
 80014d4:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80014d6:	2301      	movs	r3, #1
 80014d8:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <stm32_exti_trigger+0x64>)
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	4302      	orrs	r2, r0
 80014e2:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	4310      	orrs	r0, r2
 80014e8:	e7df      	b.n	80014aa <stm32_exti_trigger+0x22>
 80014ea:	bf00      	nop
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <stm32_exti_set_callback+0x20>)
{
 80014f2:	b510      	push	{r4, lr}
 80014f4:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80014f6:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80014fa:	b928      	cbnz	r0, 8001508 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80014fc:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001500:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001504:	605a      	str	r2, [r3, #4]

	return 0;
}
 8001506:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8001508:	f06f 000f 	mvn.w	r0, #15
 800150c:	e7fb      	b.n	8001506 <stm32_exti_set_callback+0x16>
 800150e:	bf00      	nop
 8001510:	2000017c 	.word	0x2000017c

08001514 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <stm32_exti_unset_callback+0x10>)
 8001516:	2200      	movs	r2, #0
 8001518:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800151c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001520:	605a      	str	r2, [r3, #4]
}
 8001522:	4770      	bx	lr
 8001524:	2000017c 	.word	0x2000017c

08001528 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8001528:	680b      	ldr	r3, [r1, #0]
{
 800152a:	b084      	sub	sp, #16
	switch (pclken->bus) {
 800152c:	2b03      	cmp	r3, #3
 800152e:	d82d      	bhi.n	800158c <stm32_clock_control_on+0x64>
 8001530:	e8df f003 	tbb	[pc, r3]
 8001534:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001538:	4a16      	ldr	r2, [pc, #88]	; (8001594 <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800153a:	684b      	ldr	r3, [r1, #4]
 800153c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800153e:	4319      	orrs	r1, r3
 8001540:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001542:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001544:	4013      	ands	r3, r2
 8001546:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001548:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800154a:	2000      	movs	r0, #0
}
 800154c:	b004      	add	sp, #16
 800154e:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001550:	4a10      	ldr	r2, [pc, #64]	; (8001594 <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8001552:	684b      	ldr	r3, [r1, #4]
 8001554:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001556:	4319      	orrs	r1, r3
 8001558:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800155a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800155c:	4013      	ands	r3, r2
 800155e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001560:	9b01      	ldr	r3, [sp, #4]
 8001562:	e7f2      	b.n	800154a <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8001566:	684b      	ldr	r3, [r1, #4]
 8001568:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800156a:	4319      	orrs	r1, r3
 800156c:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800156e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001570:	4013      	ands	r3, r2
 8001572:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001574:	9b02      	ldr	r3, [sp, #8]
 8001576:	e7e8      	b.n	800154a <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 800157a:	684b      	ldr	r3, [r1, #4]
 800157c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800157e:	4319      	orrs	r1, r3
 8001580:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001582:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001584:	4013      	ands	r3, r2
 8001586:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001588:	9b03      	ldr	r3, [sp, #12]
 800158a:	e7de      	b.n	800154a <stm32_clock_control_on+0x22>
	switch (pclken->bus) {
 800158c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001590:	e7dc      	b.n	800154c <stm32_clock_control_on+0x24>
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8001598:	680b      	ldr	r3, [r1, #0]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d820      	bhi.n	80015e0 <stm32_clock_control_off+0x48>
 800159e:	e8df f003 	tbb	[pc, r3]
 80015a2:	0a02      	.short	0x0a02
 80015a4:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <stm32_clock_control_off+0x50>)
 80015a8:	6849      	ldr	r1, [r1, #4]
 80015aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015ac:	ea23 0301 	bic.w	r3, r3, r1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80015b2:	2000      	movs	r0, #0
}
 80015b4:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80015b6:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <stm32_clock_control_off+0x50>)
 80015b8:	6849      	ldr	r1, [r1, #4]
 80015ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015bc:	ea23 0301 	bic.w	r3, r3, r1
 80015c0:	6353      	str	r3, [r2, #52]	; 0x34
 80015c2:	e7f6      	b.n	80015b2 <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <stm32_clock_control_off+0x50>)
 80015c6:	6849      	ldr	r1, [r1, #4]
 80015c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015ca:	ea23 0301 	bic.w	r3, r3, r1
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
 80015d0:	e7ef      	b.n	80015b2 <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <stm32_clock_control_off+0x50>)
 80015d4:	6849      	ldr	r1, [r1, #4]
 80015d6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80015d8:	ea23 0301 	bic.w	r3, r3, r1
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	e7e8      	b.n	80015b2 <stm32_clock_control_off+0x1a>
	switch (pclken->bus) {
 80015e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <stm32_clock_control_get_subsys_rate+0x24>)
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80015ee:	6809      	ldr	r1, [r1, #0]
	uint32_t ahb_clock = SystemCoreClock;
 80015f0:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 80015f2:	2906      	cmp	r1, #6
 80015f4:	d809      	bhi.n	800160a <stm32_clock_control_get_subsys_rate+0x1e>
 80015f6:	e8df f001 	tbb	[pc, r1]
 80015fa:	0505      	.short	0x0505
 80015fc:	08080504 	.word	0x08080504
 8001600:	05          	.byte	0x05
 8001601:	00          	.byte	0x00
	return clock / prescaler;
 8001602:	085b      	lsrs	r3, r3, #1
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8001604:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8001606:	2000      	movs	r0, #0
		break;
 8001608:	4770      	bx	lr
	switch (pclken->bus) {
 800160a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800160e:	4770      	bx	lr
 8001610:	2000002c 	.word	0x2000002c

08001614 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001614:	b530      	push	{r4, r5, lr}
 8001616:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8001618:	2300      	movs	r3, #0
 800161a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800161e:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8001622:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001624:	f000 f838 	bl	8001698 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8001628:	a803      	add	r0, sp, #12
 800162a:	f001 fbd1 	bl	8002dd0 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <stm32_clock_control_init+0x7c>)
 8001630:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8001632:	0791      	lsls	r1, r2, #30
 8001634:	d406      	bmi.n	8001644 <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800163e:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8001640:	0792      	lsls	r2, r2, #30
 8001642:	d5fc      	bpl.n	800163e <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001644:	4c12      	ldr	r4, [pc, #72]	; (8001690 <stm32_clock_control_init+0x7c>)
 8001646:	68a3      	ldr	r3, [r4, #8]
 8001648:	f023 0303 	bic.w	r3, r3, #3
 800164c:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800164e:	68a3      	ldr	r3, [r4, #8]
 8001650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001654:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001656:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001658:	f015 050c 	ands.w	r5, r5, #12
 800165c:	d1fb      	bne.n	8001656 <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800165e:	6823      	ldr	r3, [r4, #0]
		LL_RCC_HSE_EnableDiv2();
	}
#endif

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <stm32_clock_control_init+0x80>)
 8001662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001666:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8001668:	6863      	ldr	r3, [r4, #4]
 800166a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800166e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001672:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8001674:	aa03      	add	r2, sp, #12
 8001676:	466b      	mov	r3, sp
 8001678:	4629      	mov	r1, r5
 800167a:	f000 fbe9 	bl	8001e50 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8001686:	f001 fbaa 	bl	8002dde <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800168a:	4628      	mov	r0, r5
 800168c:	b007      	add	sp, #28
 800168e:	bd30      	pop	{r4, r5, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	007a1200 	.word	0x007a1200

08001698 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <config_enable_default_clocks+0x1c>)
 800169a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80016a4:	b082      	sub	sp, #8
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016ac:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80016ae:	b002      	add	sp, #8
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80016b8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <uart_console_init+0x24>)
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <uart_console_init+0x28>)
 80016be:	6018      	str	r0, [r3, #0]
 80016c0:	f001 fe05 	bl	80032ce <z_device_ready>
 80016c4:	b138      	cbz	r0, 80016d6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 80016c6:	4807      	ldr	r0, [pc, #28]	; (80016e4 <uart_console_init+0x2c>)
 80016c8:	f7ff fe9c 	bl	8001404 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <uart_console_init+0x2c>)
 80016ce:	f7fe ff51 	bl	8000574 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80016d2:	2000      	movs	r0, #0
}
 80016d4:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80016d6:	f06f 0012 	mvn.w	r0, #18
 80016da:	e7fb      	b.n	80016d4 <uart_console_init+0x1c>
 80016dc:	20000234 	.word	0x20000234
 80016e0:	080035e0 	.word	0x080035e0
 80016e4:	080016e9 	.word	0x080016e9

080016e8 <console_out>:
	if ('\n' == c) {
 80016e8:	280a      	cmp	r0, #10
{
 80016ea:	b538      	push	{r3, r4, r5, lr}
 80016ec:	4d07      	ldr	r5, [pc, #28]	; (800170c <console_out+0x24>)
 80016ee:	4604      	mov	r4, r0
	if ('\n' == c) {
 80016f0:	d104      	bne.n	80016fc <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 80016f2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80016f4:	6883      	ldr	r3, [r0, #8]
 80016f6:	210d      	movs	r1, #13
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 80016fc:	6828      	ldr	r0, [r5, #0]
 80016fe:	6883      	ldr	r3, [r0, #8]
 8001700:	b2e1      	uxtb	r1, r4
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4798      	blx	r3
}
 8001706:	4620      	mov	r0, r4
 8001708:	bd38      	pop	{r3, r4, r5, pc}
 800170a:	bf00      	nop
 800170c:	20000234 	.word	0x20000234

08001710 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8001710:	b570      	push	{r4, r5, r6, lr}
 8001712:	4605      	mov	r5, r0
 8001714:	4c07      	ldr	r4, [pc, #28]	; (8001734 <clock_control_on.constprop.0+0x24>)
 8001716:	4620      	mov	r0, r4
 8001718:	f001 fdd9 	bl	80032ce <z_device_ready>
 800171c:	b130      	cbz	r0, 800172c <clock_control_on.constprop.0+0x1c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800171e:	68a3      	ldr	r3, [r4, #8]
 8001720:	4629      	mov	r1, r5
 8001722:	4620      	mov	r0, r4
 8001724:	681b      	ldr	r3, [r3, #0]
}
 8001726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 800172a:	4718      	bx	r3
}
 800172c:	f06f 0012 	mvn.w	r0, #18
 8001730:	bd70      	pop	{r4, r5, r6, pc}
 8001732:	bf00      	nop
 8001734:	080034f0 	.word	0x080034f0

08001738 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8001738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800173a:	460c      	mov	r4, r1
 800173c:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 800173e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8001742:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8001744:	6902      	ldr	r2, [r0, #16]
{
 8001746:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001748:	d123      	bne.n	8001792 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800174a:	f004 0303 	and.w	r3, r4, #3
 800174e:	3304      	adds	r3, #4
 8001750:	009a      	lsls	r2, r3, #2
 8001752:	230f      	movs	r3, #15
 8001754:	4093      	lsls	r3, r2
 8001756:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4933      	ldr	r1, [pc, #204]	; (800182c <gpio_stm32_pin_interrupt_configure+0xf4>)
 800175e:	3202      	adds	r2, #2
 8001760:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001764:	0c19      	lsrs	r1, r3, #16
 8001766:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800176e:	fab2 f282 	clz	r2, r2
 8001772:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	429a      	cmp	r2, r3
 8001778:	d109      	bne.n	800178e <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff fe76 	bl	800146c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001780:	4620      	mov	r0, r4
 8001782:	f7ff fec7 	bl	8001514 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001786:	2100      	movs	r1, #0
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff fe7d 	bl	8001488 <stm32_exti_trigger>
	int err = 0;
 800178e:	2500      	movs	r5, #0
 8001790:	e03e      	b.n	8001810 <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001792:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8001796:	d042      	beq.n	800181e <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001798:	4925      	ldr	r1, [pc, #148]	; (8001830 <gpio_stm32_pin_interrupt_configure+0xf8>)
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff fea8 	bl	80014f0 <stm32_exti_set_callback>
 80017a0:	4605      	mov	r5, r0
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d13e      	bne.n	8001824 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <gpio_stm32_pin_interrupt_configure+0xfc>)
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 80017a8:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 80017aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ae:	466b      	mov	r3, sp
 80017b0:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ffab 	bl	8001710 <clock_control_on.constprop.0>
	if (ret != 0) {
 80017ba:	b9c0      	cbnz	r0, 80017ee <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80017bc:	f004 0103 	and.w	r1, r4, #3
 80017c0:	3104      	adds	r1, #4
 80017c2:	008b      	lsls	r3, r1, #2
 80017c4:	210f      	movs	r1, #15
 80017c6:	4099      	lsls	r1, r3
 80017c8:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80017cc:	b2ca      	uxtb	r2, r1
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80017d4:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80017d8:	0c0b      	lsrs	r3, r1, #16
 80017da:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80017e8:	409f      	lsls	r7, r3
 80017ea:	430f      	orrs	r7, r1
 80017ec:	6097      	str	r7, [r2, #8]

	switch (trig) {
 80017ee:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80017f2:	d010      	beq.n	8001816 <gpio_stm32_pin_interrupt_configure+0xde>
 80017f4:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 80017f8:	d00f      	beq.n	800181a <gpio_stm32_pin_interrupt_configure+0xe2>
 80017fa:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 80017fe:	bf14      	ite	ne
 8001800:	2100      	movne	r1, #0
 8001802:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff fe3f 	bl	8001488 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff fe20 	bl	8001450 <stm32_exti_enable>

exit:
	return err;
}
 8001810:	4628      	mov	r0, r5
 8001812:	b003      	add	sp, #12
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8001816:	2101      	movs	r1, #1
 8001818:	e7f4      	b.n	8001804 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 800181a:	2103      	movs	r1, #3
 800181c:	e7f2      	b.n	8001804 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 800181e:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8001822:	e7f5      	b.n	8001810 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8001824:	f06f 050f 	mvn.w	r5, #15
	return err;
 8001828:	e7f2      	b.n	8001810 <gpio_stm32_pin_interrupt_configure+0xd8>
 800182a:	bf00      	nop
 800182c:	40013800 	.word	0x40013800
 8001830:	08002e77 	.word	0x08002e77
 8001834:	08003938 	.word	0x08003938

08001838 <gpio_stm32_clock_request>:
{
 8001838:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 800183a:	6844      	ldr	r4, [r0, #4]
 800183c:	340c      	adds	r4, #12
	if (on) {
 800183e:	b121      	cbz	r1, 800184a <gpio_stm32_clock_request+0x12>
		ret = clock_control_on(clk,
 8001840:	4620      	mov	r0, r4
}
 8001842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = clock_control_on(clk,
 8001846:	f7ff bf63 	b.w	8001710 <clock_control_on.constprop.0>
 800184a:	4d07      	ldr	r5, [pc, #28]	; (8001868 <gpio_stm32_clock_request+0x30>)
 800184c:	4628      	mov	r0, r5
 800184e:	f001 fd3e 	bl	80032ce <z_device_ready>
 8001852:	b130      	cbz	r0, 8001862 <gpio_stm32_clock_request+0x2a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8001854:	68ab      	ldr	r3, [r5, #8]
 8001856:	4621      	mov	r1, r4
 8001858:	4628      	mov	r0, r5
 800185a:	685b      	ldr	r3, [r3, #4]
}
 800185c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001860:	4718      	bx	r3
 8001862:	f06f 0012 	mvn.w	r0, #18
 8001866:	bd70      	pop	{r4, r5, r6, pc}
 8001868:	080034f0 	.word	0x080034f0

0800186c <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800186c:	6843      	ldr	r3, [r0, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001870:	f103 0214 	add.w	r2, r3, #20
 8001874:	e852 2f00 	ldrex	r2, [r2]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001878:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800187c:	f103 0014 	add.w	r0, r3, #20
 8001880:	e840 2100 	strex	r1, r2, [r0]
 8001884:	2900      	cmp	r1, #0
 8001886:	d1f3      	bne.n	8001870 <uart_stm32_irq_err_enable+0x4>

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <uart_stm32_irq_err_enable+0x54>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <uart_stm32_irq_err_enable+0x32>
 800188e:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001892:	4293      	cmp	r3, r2
 8001894:	d003      	beq.n	800189e <uart_stm32_irq_err_enable+0x32>
 8001896:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 800189a:	4293      	cmp	r3, r2
 800189c:	d103      	bne.n	80018a6 <uart_stm32_irq_err_enable+0x3a>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a4:	611a      	str	r2, [r3, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018a6:	f103 020c 	add.w	r2, r3, #12
 80018aa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 80018ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018b2:	f103 000c 	add.w	r0, r3, #12
 80018b6:	e840 2100 	strex	r1, r2, [r0]
 80018ba:	2900      	cmp	r1, #0
 80018bc:	d1f3      	bne.n	80018a6 <uart_stm32_irq_err_enable+0x3a>
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 80018be:	4770      	bx	lr
 80018c0:	40011000 	.word	0x40011000

080018c4 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80018c4:	6843      	ldr	r3, [r0, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018c8:	f103 0214 	add.w	r2, r3, #20
 80018cc:	e852 2f00 	ldrex	r2, [r2]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80018d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018d4:	f103 0014 	add.w	r0, r3, #20
 80018d8:	e840 2100 	strex	r1, r2, [r0]
 80018dc:	2900      	cmp	r1, #0
 80018de:	d1f3      	bne.n	80018c8 <uart_stm32_irq_err_disable+0x4>

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <uart_stm32_irq_err_disable+0x54>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <uart_stm32_irq_err_disable+0x32>
 80018e6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d003      	beq.n	80018f6 <uart_stm32_irq_err_disable+0x32>
 80018ee:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d103      	bne.n	80018fe <uart_stm32_irq_err_disable+0x3a>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fc:	611a      	str	r2, [r3, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fe:	f103 020c 	add.w	r2, r3, #12
 8001902:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8001906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800190a:	f103 000c 	add.w	r0, r3, #12
 800190e:	e840 2100 	strex	r1, r2, [r0]
 8001912:	2900      	cmp	r1, #0
 8001914:	d1f3      	bne.n	80018fe <uart_stm32_irq_err_disable+0x3a>
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 8001916:	4770      	bx	lr
 8001918:	40011000 	.word	0x40011000

0800191c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800191c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8001920:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001922:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8001924:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80019e0 <uart_stm32_init+0xc4>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001928:	46b1      	mov	r9, r6
{
 800192a:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800192c:	f859 4b0c 	ldr.w	r4, [r9], #12
	data->clock = clk;
 8001930:	f8c7 8004 	str.w	r8, [r7, #4]
 8001934:	4640      	mov	r0, r8
 8001936:	f001 fcca 	bl	80032ce <z_device_ready>
 800193a:	b918      	cbnz	r0, 8001944 <uart_stm32_init+0x28>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 800193c:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 8001944:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001948:	4649      	mov	r1, r9
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4640      	mov	r0, r8
 800194e:	4798      	blx	r3
	if (clock_control_on(data->clock,
 8001950:	2800      	cmp	r0, #0
 8001952:	d1f3      	bne.n	800193c <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 8001954:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8001956:	e9d6 0107 	ldrd	r0, r1, [r6, #28]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f7ff fa00 	bl	8000d60 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8001960:	2800      	cmp	r0, #0
 8001962:	dbed      	blt.n	8001940 <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001964:	68e3      	ldr	r3, [r4, #12]
 8001966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800196a:	60e3      	str	r3, [r4, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800196c:	f104 030c 	add.w	r3, r4, #12
 8001970:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001974:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001978:	f104 010c 	add.w	r1, r4, #12
 800197c:	e841 3200 	strex	r2, r3, [r1]
 8001980:	2a00      	cmp	r2, #0
 8001982:	d1f3      	bne.n	800196c <uart_stm32_init+0x50>
	if (config->parity == 2) {
 8001984:	69b3      	ldr	r3, [r6, #24]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d025      	beq.n	80019d6 <uart_stm32_init+0xba>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800198a:	2b01      	cmp	r3, #1
 800198c:	bf0a      	itet	eq
 800198e:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 8001992:	2100      	movne	r1, #0
 8001994:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001998:	68e3      	ldr	r3, [r4, #12]
 800199a:	430a      	orrs	r2, r1
 800199c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80019a4:	6923      	ldr	r3, [r4, #16]
 80019a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019aa:	6123      	str	r3, [r4, #16]
	if (config->hw_flow_control) {
 80019ac:	7d33      	ldrb	r3, [r6, #20]
 80019ae:	b12b      	cbz	r3, 80019bc <uart_stm32_init+0xa0>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80019b0:	686b      	ldr	r3, [r5, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80019b4:	6953      	ldr	r3, [r2, #20]
 80019b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019ba:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	4628      	mov	r0, r5
 80019c0:	f001 fc15 	bl	80031ee <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019c4:	68e3      	ldr	r3, [r4, #12]
 80019c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ca:	60e3      	str	r3, [r4, #12]
	config->uconf.irq_config_func(dev);
 80019cc:	4628      	mov	r0, r5
 80019ce:	68b3      	ldr	r3, [r6, #8]
 80019d0:	4798      	blx	r3
	return 0;
 80019d2:	2000      	movs	r0, #0
 80019d4:	e7b4      	b.n	8001940 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80019d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80019da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019de:	e7db      	b.n	8001998 <uart_stm32_init+0x7c>
 80019e0:	080034f0 	.word	0x080034f0

080019e4 <uart_stm32_configure>:
{
 80019e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80019e8:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80019ea:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80019ec:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80019ee:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 80019f0:	2a01      	cmp	r2, #1
{
 80019f2:	460d      	mov	r5, r1
	switch (parity) {
 80019f4:	d07c      	beq.n	8001af0 <uart_stm32_configure+0x10c>
		return LL_USART_PARITY_NONE;
 80019f6:	2a02      	cmp	r2, #2
 80019f8:	bf0c      	ite	eq
 80019fa:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80019fe:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001a00:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001a04:	f895 e006 	ldrb.w	lr, [r5, #6]
 8001a08:	f1b9 0f02 	cmp.w	r9, #2
 8001a0c:	bf96      	itet	ls
 8001a0e:	4b3d      	ldrls	r3, [pc, #244]	; (8001b04 <uart_stm32_configure+0x120>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001a10:	f44f 5800 	movhi.w	r8, #8192	; 0x2000
 8001a14:	f833 8019 	ldrhls.w	r8, [r3, r9, lsl #1]
	switch (db) {
 8001a18:	f1be 0f04 	cmp.w	lr, #4
 8001a1c:	d06b      	beq.n	8001af6 <uart_stm32_configure+0x112>
		return LL_USART_DATAWIDTH_9B;
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	bf0c      	ite	eq
 8001a22:	2300      	moveq	r3, #0
 8001a24:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001a28:	79ef      	ldrb	r7, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001a2a:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8001a2e:	2f01      	cmp	r7, #1
 8001a30:	bf14      	ite	ne
 8001a32:	f04f 0c00 	movne.w	ip, #0
 8001a36:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001a3a:	f1ba 0f01 	cmp.w	sl, #1
 8001a3e:	d95d      	bls.n	8001afc <uart_stm32_configure+0x118>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8001a40:	b112      	cbz	r2, 8001a48 <uart_stm32_configure+0x64>
 8001a42:	f1be 0f04 	cmp.w	lr, #4
 8001a46:	d059      	beq.n	8001afc <uart_stm32_configure+0x118>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001a48:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8001a4c:	d056      	beq.n	8001afc <uart_stm32_configure+0x118>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001a4e:	f1be 0f02 	cmp.w	lr, #2
 8001a52:	d953      	bls.n	8001afc <uart_stm32_configure+0x118>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8001a54:	f1be 0f04 	cmp.w	lr, #4
 8001a58:	d050      	beq.n	8001afc <uart_stm32_configure+0x118>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8001a5a:	b167      	cbz	r7, 8001a76 <uart_stm32_configure+0x92>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8001a5c:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <uart_stm32_configure+0x124>)
 8001a5e:	4294      	cmp	r4, r2
 8001a60:	d007      	beq.n	8001a72 <uart_stm32_configure+0x8e>
 8001a62:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001a66:	4294      	cmp	r4, r2
 8001a68:	d003      	beq.n	8001a72 <uart_stm32_configure+0x8e>
 8001a6a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8001a6e:	4294      	cmp	r4, r2
 8001a70:	d144      	bne.n	8001afc <uart_stm32_configure+0x118>
 8001a72:	2f01      	cmp	r7, #1
 8001a74:	d142      	bne.n	8001afc <uart_stm32_configure+0x118>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001a76:	68e2      	ldr	r2, [r4, #12]
 8001a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a7c:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001a7e:	68e2      	ldr	r2, [r4, #12]
 8001a80:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001a84:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001a86:	bf1f      	itttt	ne
 8001a88:	68e7      	ldrne	r7, [r4, #12]
 8001a8a:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8001a8e:	430f      	orrne	r7, r1
 8001a90:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001a92:	6922      	ldr	r2, [r4, #16]
 8001a94:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001a98:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a9a:	bf1f      	itttt	ne
 8001a9c:	6921      	ldrne	r1, [r4, #16]
 8001a9e:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8001aa2:	ea41 0108 	orrne.w	r1, r1, r8
 8001aa6:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001aa8:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 8001aaa:	6829      	ldr	r1, [r5, #0]
 8001aac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8001ab0:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001ab2:	bf1f      	itttt	ne
 8001ab4:	68e2      	ldrne	r2, [r4, #12]
 8001ab6:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8001aba:	431a      	orrne	r2, r3
 8001abc:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001abe:	6963      	ldr	r3, [r4, #20]
 8001ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001ac4:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ac6:	bf1f      	itttt	ne
 8001ac8:	6963      	ldrne	r3, [r4, #20]
 8001aca:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8001ace:	ea43 030c 	orrne.w	r3, r3, ip
 8001ad2:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 8001ad4:	6833      	ldr	r3, [r6, #0]
 8001ad6:	4299      	cmp	r1, r3
 8001ad8:	d003      	beq.n	8001ae2 <uart_stm32_configure+0xfe>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001ada:	f001 fb88 	bl	80031ee <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001ade:	682b      	ldr	r3, [r5, #0]
 8001ae0:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ae2:	68e3      	ldr	r3, [r4, #12]
 8001ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ae8:	60e3      	str	r3, [r4, #12]
	return 0;
 8001aea:	2000      	movs	r0, #0
};
 8001aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 8001af0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001af4:	e784      	b.n	8001a00 <uart_stm32_configure+0x1c>
		return LL_USART_DATAWIDTH_9B;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	e795      	b.n	8001a28 <uart_stm32_configure+0x44>
		return -ENOTSUP;
 8001afc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001b00:	e7f4      	b.n	8001aec <uart_stm32_configure+0x108>
 8001b02:	bf00      	nop
 8001b04:	08003af4 	.word	0x08003af4
 8001b08:	40011000 	.word	0x40011000

08001b0c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001b0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8001b10:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001b12:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001b14:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001b16:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <elapsed+0x34>)
 8001b1a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001b1e:	4909      	ldr	r1, [pc, #36]	; (8001b44 <elapsed+0x38>)
 8001b20:	d101      	bne.n	8001b26 <elapsed+0x1a>
	    || (val1 < val2)) {
 8001b22:	4282      	cmp	r2, r0
 8001b24:	d206      	bcs.n	8001b34 <elapsed+0x28>
		overflow_cyc += last_load;
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	680c      	ldr	r4, [r1, #0]
 8001b2a:	4422      	add	r2, r4
 8001b2c:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001b2e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001b32:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	680a      	ldr	r2, [r1, #0]
 8001b38:	4413      	add	r3, r2
}
 8001b3a:	1a18      	subs	r0, r3, r0
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002c4 	.word	0x200002c4
 8001b44:	200002c0 	.word	0x200002c0

08001b48 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8001b48:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8001b4a:	f7ff ffdf 	bl	8001b0c <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <sys_clock_isr+0x38>)
 8001b50:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <sys_clock_isr+0x3c>)
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	6811      	ldr	r1, [r2, #0]
 8001b56:	4408      	add	r0, r1
 8001b58:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <sys_clock_isr+0x40>)
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001b66:	1ac0      	subs	r0, r0, r3
 8001b68:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001b6c:	fb01 3300 	mla	r3, r1, r0, r3
 8001b70:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001b72:	f000 fed7 	bl	8002924 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 8001b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001b7a:	f7ff ba41 	b.w	8001000 <z_arm_exc_exit>
 8001b7e:	bf00      	nop
 8001b80:	200002c4 	.word	0x200002c4
 8001b84:	200002bc 	.word	0x200002bc
 8001b88:	200002b8 	.word	0x200002b8

08001b8c <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <sys_clock_driver_init+0x28>)
 8001b8e:	2210      	movs	r2, #16
 8001b90:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <sys_clock_driver_init+0x2c>)
 8001b96:	f242 527f 	movw	r2, #9599	; 0x257f
 8001b9a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <sys_clock_driver_init+0x30>)
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001ba2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ba6:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001ba8:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	f042 0207 	orr.w	r2, r2, #7
 8001bb0:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00
 8001bb8:	200002c0 	.word	0x200002c0
 8001bbc:	200002c4 	.word	0x200002c4

08001bc0 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	4d32      	ldr	r5, [pc, #200]	; (8001c8c <sys_clock_set_timeout+0xcc>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001bc4:	b159      	cbz	r1, 8001bde <sys_clock_set_timeout+0x1e>
 8001bc6:	1c43      	adds	r3, r0, #1
 8001bc8:	d109      	bne.n	8001bde <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001bca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001bce:	6913      	ldr	r3, [r2, #16]
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001bd6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001bda:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8001bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001bde:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8001be2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001be6:	bf08      	it	eq
 8001be8:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001bea:	1e44      	subs	r4, r0, #1
 8001bec:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
 8001bee:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001bf0:	dd32      	ble.n	8001c58 <sys_clock_set_timeout+0x98>
 8001bf2:	429c      	cmp	r4, r3
 8001bf4:	bfa8      	it	ge
 8001bf6:	461c      	movge	r4, r3
	__asm__ volatile(
 8001bf8:	f04f 0310 	mov.w	r3, #16
 8001bfc:	f3ef 8611 	mrs	r6, BASEPRI
 8001c00:	f383 8812 	msr	BASEPRI_MAX, r3
 8001c04:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001c08:	f7ff ff80 	bl	8001b0c <elapsed>
	cycle_count += pending;
 8001c0c:	4920      	ldr	r1, [pc, #128]	; (8001c90 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8001c0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8001c12:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8001c14:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001c18:	680b      	ldr	r3, [r1, #0]
 8001c1a:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <sys_clock_set_timeout+0xd4>)
	cycle_count += pending;
 8001c1e:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8001c20:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <sys_clock_set_timeout+0xd8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001c26:	1ac2      	subs	r2, r0, r3
 8001c28:	d518      	bpl.n	8001c5c <sys_clock_set_timeout+0x9c>
		last_load = MIN_DELAY;
 8001c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8001c2e:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 8001c30:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8001c34:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 8001c36:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8001c38:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8001c3a:	bf38      	it	cc
 8001c3c:	44bc      	addcc	ip, r7
	SysTick->LOAD = last_load - 1;
 8001c3e:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8001c40:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8001c44:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8001c46:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8001c48:	2400      	movs	r4, #0
 8001c4a:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8001c4c:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8001c4e:	f386 8811 	msr	BASEPRI, r6
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	e7c1      	b.n	8001bdc <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001c58:	2400      	movs	r4, #0
 8001c5a:	e7cd      	b.n	8001bf8 <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8001c5c:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay += unannounced;
 8001c60:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001c64:	f504 5415 	add.w	r4, r4, #9536	; 0x2540
		delay -= unannounced;
 8001c68:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001c6a:	343f      	adds	r4, #63	; 0x3f
 8001c6c:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 8001c70:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 8001c74:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001c78:	d904      	bls.n	8001c84 <sys_clock_set_timeout+0xc4>
		if (delay > MAX_CYCLES) {
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <sys_clock_set_timeout+0xdc>)
 8001c7c:	429c      	cmp	r4, r3
 8001c7e:	d8d6      	bhi.n	8001c2e <sys_clock_set_timeout+0x6e>
			last_load = delay;
 8001c80:	602c      	str	r4, [r5, #0]
 8001c82:	e7d5      	b.n	8001c30 <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 8001c84:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001c88:	e7fa      	b.n	8001c80 <sys_clock_set_timeout+0xc0>
 8001c8a:	bf00      	nop
 8001c8c:	200002c0 	.word	0x200002c0
 8001c90:	200002bc 	.word	0x200002bc
 8001c94:	200002c4 	.word	0x200002c4
 8001c98:	200002b8 	.word	0x200002b8
 8001c9c:	00ffc300 	.word	0x00ffc300

08001ca0 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8001ca0:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001ca2:	f04f 0310 	mov.w	r3, #16
 8001ca6:	f3ef 8411 	mrs	r4, BASEPRI
 8001caa:	f383 8812 	msr	BASEPRI_MAX, r3
 8001cae:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001cb2:	f7ff ff2b 	bl	8001b0c <elapsed>
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <sys_clock_elapsed+0x34>)
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <sys_clock_elapsed+0x38>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	4403      	add	r3, r0
	__asm__ volatile(
 8001cc2:	f384 8811 	msr	BASEPRI, r4
 8001cc6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8001cca:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001cce:	fbb3 f0f0 	udiv	r0, r3, r0
 8001cd2:	bd10      	pop	{r4, pc}
 8001cd4:	200002bc 	.word	0x200002bc
 8001cd8:	200002b8 	.word	0x200002b8

08001cdc <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <UTILS_PLL_IsBusy+0x18>)
 8001cde:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001ce0:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001ce2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8001cea:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8001cec:	bf14      	ite	ne
 8001cee:	2001      	movne	r0, #1
 8001cf0:	2000      	moveq	r0, #0
 8001cf2:	4770      	bx	lr
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d049      	beq.n	8001d90 <LL_SetFlashLatency+0x98>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <LL_SetFlashLatency+0xb0>)
 8001cfe:	6813      	ldr	r3, [r2, #0]
 8001d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001d04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d08:	d117      	bne.n	8001d3a <LL_SetFlashLatency+0x42>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <LL_SetFlashLatency+0xb4>)
 8001d0c:	4298      	cmp	r0, r3
 8001d0e:	d945      	bls.n	8001d9c <LL_SetFlashLatency+0xa4>
        latency = LL_FLASH_LATENCY_3;
 8001d10:	2303      	movs	r3, #3
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d12:	4927      	ldr	r1, [pc, #156]	; (8001db0 <LL_SetFlashLatency+0xb8>)
 8001d14:	4288      	cmp	r0, r1
 8001d16:	d902      	bls.n	8001d1e <LL_SetFlashLatency+0x26>
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	bf38      	it	cc
 8001d1c:	2301      	movcc	r3, #1
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001d24:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d28:	d10e      	bne.n	8001d48 <LL_SetFlashLatency+0x50>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d2a:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <LL_SetFlashLatency+0xbc>)
 8001d2c:	4290      	cmp	r0, r2
 8001d2e:	d908      	bls.n	8001d42 <LL_SetFlashLatency+0x4a>
 8001d30:	b1cb      	cbz	r3, 8001d66 <LL_SetFlashLatency+0x6e>
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	bf38      	it	cc
 8001d36:	2301      	movcc	r3, #1
 8001d38:	e006      	b.n	8001d48 <LL_SetFlashLatency+0x50>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e7ef      	b.n	8001d1e <LL_SetFlashLatency+0x26>
        latency = LL_FLASH_LATENCY_2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e7ed      	b.n	8001d1e <LL_SetFlashLatency+0x26>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <LL_SetFlashLatency+0xb8>)
 8001d44:	4290      	cmp	r0, r2
 8001d46:	d8f4      	bhi.n	8001d32 <LL_SetFlashLatency+0x3a>
 8001d48:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <LL_SetFlashLatency+0xb0>)
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001d50:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001d54:	d10c      	bne.n	8001d70 <LL_SetFlashLatency+0x78>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d56:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <LL_SetFlashLatency+0xbc>)
 8001d58:	4290      	cmp	r0, r2
 8001d5a:	d906      	bls.n	8001d6a <LL_SetFlashLatency+0x72>
 8001d5c:	b1d3      	cbz	r3, 8001d94 <LL_SetFlashLatency+0x9c>
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	bf38      	it	cc
 8001d62:	2301      	movcc	r3, #1
 8001d64:	e004      	b.n	8001d70 <LL_SetFlashLatency+0x78>
        latency = LL_FLASH_LATENCY_2;
 8001d66:	2302      	movs	r3, #2
 8001d68:	e7ee      	b.n	8001d48 <LL_SetFlashLatency+0x50>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <LL_SetFlashLatency+0xb8>)
 8001d6c:	4290      	cmp	r0, r2
 8001d6e:	d8f6      	bhi.n	8001d5e <LL_SetFlashLatency+0x66>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001d70:	4911      	ldr	r1, [pc, #68]	; (8001db8 <LL_SetFlashLatency+0xc0>)
 8001d72:	680a      	ldr	r2, [r1, #0]
 8001d74:	f022 0207 	bic.w	r2, r2, #7
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	600a      	str	r2, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001d7c:	680a      	ldr	r2, [r1, #0]
 8001d7e:	f002 0207 	and.w	r2, r2, #7
    } while ((getlatency != latency) && (timeout > 0));
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d008      	beq.n	8001d98 <LL_SetFlashLatency+0xa0>
 8001d86:	680a      	ldr	r2, [r1, #0]
 8001d88:	f002 0207 	and.w	r2, r2, #7
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <LL_SetFlashLatency+0xa0>
    status = ERROR;
 8001d90:	2001      	movs	r0, #1
 8001d92:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	e7eb      	b.n	8001d70 <LL_SetFlashLatency+0x78>
      status = SUCCESS;
 8001d98:	2000      	movs	r0, #0
}
 8001d9a:	4770      	bx	lr
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <LL_SetFlashLatency+0xbc>)
 8001d9e:	4298      	cmp	r0, r3
 8001da0:	d8cd      	bhi.n	8001d3e <LL_SetFlashLatency+0x46>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001da2:	2300      	movs	r3, #0
 8001da4:	e7b5      	b.n	8001d12 <LL_SetFlashLatency+0x1a>
 8001da6:	bf00      	nop
 8001da8:	40007000 	.word	0x40007000
 8001dac:	055d4a80 	.word	0x055d4a80
 8001db0:	01c9c380 	.word	0x01c9c380
 8001db4:	03d09000 	.word	0x03d09000
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001dbc:	680b      	ldr	r3, [r1, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 8001dc0:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8001dc4:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8001dc8:	4e1f      	ldr	r6, [pc, #124]	; (8001e48 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001dca:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8001dce:	6833      	ldr	r3, [r6, #0]
 8001dd0:	42a3      	cmp	r3, r4
{
 8001dd2:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8001dd4:	d327      	bcc.n	8001e26 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001dde:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001de0:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8001de2:	0192      	lsls	r2, r2, #6
 8001de4:	d5fc      	bpl.n	8001de0 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	6829      	ldr	r1, [r5, #0]
 8001dea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	f022 0203 	bic.w	r2, r2, #3
 8001df8:	f042 0202 	orr.w	r2, r2, #2
 8001dfc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001e06:	2a08      	cmp	r2, #8
 8001e08:	d1fa      	bne.n	8001e00 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	6869      	ldr	r1, [r5, #4]
 8001e0e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	68a9      	ldr	r1, [r5, #8]
 8001e1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
}
 8001e22:	2000      	movs	r0, #0
 8001e24:	e004      	b.n	8001e30 <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff ff66 	bl	8001cf8 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d0d2      	beq.n	8001dd6 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8001e30:	6833      	ldr	r3, [r6, #0]
 8001e32:	42a3      	cmp	r3, r4
 8001e34:	d902      	bls.n	8001e3c <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8001e36:	4620      	mov	r0, r4
 8001e38:	f7ff ff5e 	bl	8001cf8 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8001e3c:	b900      	cbnz	r0, 8001e40 <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 8001e3e:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
 8001e42:	bf00      	nop
 8001e44:	08003b9a 	.word	0x08003b9a
 8001e48:	2000002c 	.word	0x2000002c
 8001e4c:	40023800 	.word	0x40023800

08001e50 <LL_PLL_ConfigSystemClock_HSE>:
{
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	460e      	mov	r6, r1
 8001e54:	4605      	mov	r5, r0
 8001e56:	4614      	mov	r4, r2
 8001e58:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8001e5a:	f7ff ff3f 	bl	8001cdc <UTILS_PLL_IsBusy>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d136      	bne.n	8001ed0 <LL_PLL_ConfigSystemClock_HSE+0x80>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001e62:	6827      	ldr	r7, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001e64:	f8d4 c004 	ldr.w	ip, [r4, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e68:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001e6a:	4c1a      	ldr	r4, [pc, #104]	; (8001ed4 <LL_PLL_ConfigSystemClock_HSE+0x84>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001e6c:	f007 003f 	and.w	r0, r7, #63	; 0x3f
 8001e70:	fbb5 f5f0 	udiv	r5, r5, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001e74:	f3cc 0008 	ubfx	r0, ip, #0, #9
 8001e78:	4345      	muls	r5, r0
 8001e7a:	6822      	ldr	r2, [r4, #0]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e7c:	0c18      	lsrs	r0, r3, #16
 8001e7e:	3001      	adds	r0, #1
 8001e80:	0040      	lsls	r0, r0, #1
 8001e82:	fbb5 f0f0 	udiv	r0, r5, r0
    if(LL_RCC_HSE_IsReady() != 1U)
 8001e86:	0395      	lsls	r5, r2, #14
 8001e88:	d40f      	bmi.n	8001eaa <LL_PLL_ConfigSystemClock_HSE+0x5a>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001e8a:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8001e8c:	2e01      	cmp	r6, #1
 8001e8e:	bf0c      	ite	eq
 8001e90:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001e94:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8001e98:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e9a:	6825      	ldr	r5, [r4, #0]
 8001e9c:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8001ea0:	6025      	str	r5, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001ea2:	4c0c      	ldr	r4, [pc, #48]	; (8001ed4 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8001ea4:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8001ea6:	0392      	lsls	r2, r2, #14
 8001ea8:	d5fc      	bpl.n	8001ea4 <LL_PLL_ConfigSystemClock_HSE+0x54>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001eaa:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8001eae:	6865      	ldr	r5, [r4, #4]
 8001eb0:	402a      	ands	r2, r5
 8001eb2:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8001eb6:	433a      	orrs	r2, r7
 8001eb8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001ebc:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001ebe:	6862      	ldr	r2, [r4, #4]
 8001ec0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	6062      	str	r2, [r4, #4]
}
 8001ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001ecc:	f7ff bf76 	b.w	8001dbc <UTILS_EnablePLLAndSwitchSystem>
}
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	ffbf8000 	.word	0xffbf8000

08001edc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <z_sys_init_run_level+0x3c>)
{
 8001ede:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001ee0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001ee4:	3001      	adds	r0, #1
 8001ee6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001eea:	42a6      	cmp	r6, r4
 8001eec:	d800      	bhi.n	8001ef0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8001eee:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8001ef0:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	4798      	blx	r3
		if (dev != NULL) {
 8001ef8:	b165      	cbz	r5, 8001f14 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 8001efa:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8001efc:	b130      	cbz	r0, 8001f0c <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8001efe:	2800      	cmp	r0, #0
 8001f00:	bfb8      	it	lt
 8001f02:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8001f04:	28ff      	cmp	r0, #255	; 0xff
 8001f06:	bfa8      	it	ge
 8001f08:	20ff      	movge	r0, #255	; 0xff
 8001f0a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8001f0c:	785a      	ldrb	r2, [r3, #1]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001f14:	3408      	adds	r4, #8
 8001f16:	e7e8      	b.n	8001eea <z_sys_init_run_level+0xe>
 8001f18:	08003adc 	.word	0x08003adc

08001f1c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8001f1e:	4605      	mov	r5, r0
 8001f20:	b910      	cbnz	r0, 8001f28 <z_impl_device_get_binding+0xc>
		return NULL;
 8001f22:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 8001f24:	4620      	mov	r0, r4
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 8001f28:	7803      	ldrb	r3, [r0, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f9      	beq.n	8001f22 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001f2e:	4c0e      	ldr	r4, [pc, #56]	; (8001f68 <z_impl_device_get_binding+0x4c>)
 8001f30:	4e0e      	ldr	r6, [pc, #56]	; (8001f6c <z_impl_device_get_binding+0x50>)
 8001f32:	42b4      	cmp	r4, r6
 8001f34:	d108      	bne.n	8001f48 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001f36:	4c0c      	ldr	r4, [pc, #48]	; (8001f68 <z_impl_device_get_binding+0x4c>)
 8001f38:	42b4      	cmp	r4, r6
 8001f3a:	d0f2      	beq.n	8001f22 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f001 f9c6 	bl	80032ce <z_device_ready>
 8001f42:	b950      	cbnz	r0, 8001f5a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001f44:	3418      	adds	r4, #24
 8001f46:	e7f7      	b.n	8001f38 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f001 f9c0 	bl	80032ce <z_device_ready>
 8001f4e:	b110      	cbz	r0, 8001f56 <z_impl_device_get_binding+0x3a>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	42ab      	cmp	r3, r5
 8001f54:	d0e6      	beq.n	8001f24 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001f56:	3418      	adds	r4, #24
 8001f58:	e7eb      	b.n	8001f32 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001f5a:	6821      	ldr	r1, [r4, #0]
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	f000 fea3 	bl	8002ca8 <strcmp>
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d1ee      	bne.n	8001f44 <z_impl_device_get_binding+0x28>
 8001f66:	e7dd      	b.n	8001f24 <z_impl_device_get_binding+0x8>
 8001f68:	080034f0 	.word	0x080034f0
 8001f6c:	08003610 	.word	0x08003610

08001f70 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8001f70:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 8001f72:	2300      	movs	r3, #0
{
 8001f74:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
 8001f76:	2201      	movs	r2, #1
 8001f78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001f82:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
 8001f84:	4c0c      	ldr	r4, [pc, #48]	; (8001fb8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
 8001f88:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001f8a:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
 8001f8c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001f90:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
 8001f94:	f44f 75b0 	mov.w	r5, #352	; 0x160
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	fb05 1100 	mla	r1, r5, r0, r1
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <init_idle_thread+0x54>)
 8001fa0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f000 f8a3 	bl	80020f0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001faa:	7b63      	ldrb	r3, [r4, #13]
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8001fb2:	b007      	add	sp, #28
 8001fb4:	bd30      	pop	{r4, r5, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000068 	.word	0x20000068
 8001fbc:	200002c8 	.word	0x200002c8
 8001fc0:	20000720 	.word	0x20000720
 8001fc4:	08003331 	.word	0x08003331

08001fc8 <bg_thread_main>:
{
 8001fc8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <bg_thread_main+0x2c>)
 8001fcc:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001fce:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8001fd0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001fd2:	f7ff ff83 	bl	8001edc <z_sys_init_run_level>
	boot_banner();
 8001fd6:	f000 fd19 	bl	8002a0c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8001fda:	2003      	movs	r0, #3
 8001fdc:	f7ff ff7e 	bl	8001edc <z_sys_init_run_level>
	z_init_static_threads();
 8001fe0:	f000 f8b8 	bl	8002154 <z_init_static_threads>
	main();
 8001fe4:	f7fe fa84 	bl	80004f0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <bg_thread_main+0x30>)
 8001fea:	7b13      	ldrb	r3, [r2, #12]
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001ff2:	bd08      	pop	{r3, pc}
 8001ff4:	200002fd 	.word	0x200002fd
 8001ff8:	200000e8 	.word	0x200000e8

08001ffc <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <z_bss_zero+0xc>)
 8001ffe:	4a03      	ldr	r2, [pc, #12]	; (800200c <z_bss_zero+0x10>)
 8002000:	2100      	movs	r1, #0
 8002002:	1a12      	subs	r2, r2, r0
 8002004:	f000 be67 	b.w	8002cd6 <memset>
 8002008:	20000068 	.word	0x20000068
 800200c:	20000300 	.word	0x20000300

08002010 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8002010:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002012:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80020d0 <z_cstart+0xc0>
 8002016:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002018:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800201c:	4d2d      	ldr	r5, [pc, #180]	; (80020d4 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 800201e:	4e2e      	ldr	r6, [pc, #184]	; (80020d8 <z_cstart+0xc8>)
 8002020:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002022:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80020dc <z_cstart+0xcc>
 8002026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202a:	2400      	movs	r4, #0
 800202c:	616b      	str	r3, [r5, #20]
 800202e:	23f0      	movs	r3, #240	; 0xf0
 8002030:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8002034:	77ec      	strb	r4, [r5, #31]
 8002036:	762c      	strb	r4, [r5, #24]
 8002038:	766c      	strb	r4, [r5, #25]
 800203a:	76ac      	strb	r4, [r5, #26]
 800203c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002040:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002042:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002046:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002048:	f7ff f8d0 	bl	80011ec <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800204c:	f7fe fec4 	bl	8000dd8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002054:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002056:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8002058:	f7ff f9a4 	bl	80013a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800205c:	f7ff f90c 	bl	8001278 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002060:	f240 1301 	movw	r3, #257	; 0x101
 8002064:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8002068:	ab06      	add	r3, sp, #24
 800206a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 800206c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8002070:	f001 f92c 	bl	80032cc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff31 	bl	8001edc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800207a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 800207c:	4d18      	ldr	r5, [pc, #96]	; (80020e0 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800207e:	f7ff ff2d 	bl	8001edc <z_sys_init_run_level>
	z_sched_init();
 8002082:	f000 fa6b 	bl	800255c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <z_cstart+0xd4>)
 8002088:	9305      	str	r3, [sp, #20]
 800208a:	2301      	movs	r3, #1
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <z_cstart+0xd8>)
 800208e:	9400      	str	r4, [sp, #0]
 8002090:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8002094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002098:	464b      	mov	r3, r9
 800209a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800209e:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
 80020a0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80020a2:	f000 f825 	bl	80020f0 <z_setup_new_thread>
 80020a6:	7b6a      	ldrb	r2, [r5, #13]
 80020a8:	4607      	mov	r7, r0
 80020aa:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 80020ae:	4628      	mov	r0, r5
 80020b0:	736a      	strb	r2, [r5, #13]
 80020b2:	f001 f977 	bl	80033a4 <z_ready_thread>
		init_idle_thread(i);
 80020b6:	4620      	mov	r0, r4
 80020b8:	f7ff ff5a 	bl	8001f70 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <z_cstart+0xdc>)
 80020be:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80020c0:	464a      	mov	r2, r9
 80020c2:	4639      	mov	r1, r7
 80020c4:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
 80020c6:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
 80020c8:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80020cc:	f7fe ff6e 	bl	8000fac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80020d0:	200010a0 	.word	0x200010a0
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	200002c8 	.word	0x200002c8
 80020dc:	08001fc9 	.word	0x08001fc9
 80020e0:	200000e8 	.word	0x200000e8
 80020e4:	08003baa 	.word	0x08003baa
 80020e8:	20000300 	.word	0x20000300
 80020ec:	20000068 	.word	0x20000068

080020f0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 80020f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 80020f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80020f6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 80020f8:	2604      	movs	r6, #4
 80020fa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 80020fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80020fe:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002100:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8002104:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002106:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002108:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800210c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 800210e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002110:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002114:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002116:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 800211a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 800211e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002120:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8002122:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002124:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002128:	9202      	str	r2, [sp, #8]
 800212a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800212c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800212e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002132:	9200      	str	r2, [sp, #0]
 8002134:	4642      	mov	r2, r8
{
 8002136:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002138:	f7fe ff06 	bl	8000f48 <arch_new_thread>
	if (!_current) {
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800213e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	b103      	cbz	r3, 8002146 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8002146:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002148:	4640      	mov	r0, r8
 800214a:	b004      	add	sp, #16
 800214c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002150:	200002c8 	.word	0x200002c8

08002154 <z_init_static_threads>:
{
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	4c22      	ldr	r4, [pc, #136]	; (80021e0 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8002158:	4d22      	ldr	r5, [pc, #136]	; (80021e4 <z_init_static_threads+0x90>)
{
 800215a:	b087      	sub	sp, #28
 800215c:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800215e:	42ae      	cmp	r6, r5
 8002160:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8002164:	d30b      	bcc.n	800217e <z_init_static_threads+0x2a>
	k_sched_lock();
 8002166:	f000 f891 	bl	800228c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800216a:	4c1d      	ldr	r4, [pc, #116]	; (80021e0 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800216c:	4f1e      	ldr	r7, [pc, #120]	; (80021e8 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800216e:	260a      	movs	r6, #10
 8002170:	42ac      	cmp	r4, r5
 8002172:	d320      	bcc.n	80021b6 <z_init_static_threads+0x62>
}
 8002174:	b007      	add	sp, #28
 8002176:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800217a:	f000 b9d3 	b.w	8002524 <k_sched_unlock>
		z_setup_new_thread(
 800217e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002182:	9305      	str	r3, [sp, #20]
 8002184:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002188:	9304      	str	r3, [sp, #16]
 800218a:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800218e:	9303      	str	r3, [sp, #12]
 8002190:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80021a6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80021aa:	f7ff ffa1 	bl	80020f0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80021ae:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80021b2:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80021b4:	e7d2      	b.n	800215c <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80021b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021b8:	1c53      	adds	r3, r2, #1
 80021ba:	d009      	beq.n	80021d0 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 80021bc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80021c0:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80021c4:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 80021c8:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80021ca:	d103      	bne.n	80021d4 <z_init_static_threads+0x80>
	z_sched_start(thread);
 80021cc:	f000 f942 	bl	8002454 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80021d0:	3430      	adds	r4, #48	; 0x30
 80021d2:	e7cd      	b.n	8002170 <z_init_static_threads+0x1c>
 80021d4:	4639      	mov	r1, r7
 80021d6:	3018      	adds	r0, #24
 80021d8:	f000 fb2a 	bl	8002830 <z_add_timeout>
 80021dc:	e7f8      	b.n	80021d0 <z_init_static_threads+0x7c>
 80021de:	bf00      	nop
 80021e0:	20000068 	.word	0x20000068
 80021e4:	20000068 	.word	0x20000068
 80021e8:	080033c5 	.word	0x080033c5

080021ec <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 80021ec:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 80021ee:	4c08      	ldr	r4, [pc, #32]	; (8002210 <z_reset_time_slice+0x24>)
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	b15b      	cbz	r3, 800220c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 80021f4:	f7ff fd54 	bl	8001ca0 <sys_clock_elapsed>
 80021f8:	4603      	mov	r3, r0
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	4a05      	ldr	r2, [pc, #20]	; (8002214 <z_reset_time_slice+0x28>)
 80021fe:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8002200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8002204:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8002206:	2100      	movs	r1, #0
 8002208:	f001 b914 	b.w	8003434 <z_set_timeout_expiry>
}
 800220c:	bd10      	pop	{r4, pc}
 800220e:	bf00      	nop
 8002210:	200002f4 	.word	0x200002f4
 8002214:	200002c8 	.word	0x200002c8

08002218 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8002218:	b510      	push	{r4, lr}
	__asm__ volatile(
 800221a:	f04f 0310 	mov.w	r3, #16
 800221e:	f3ef 8411 	mrs	r4, BASEPRI
 8002222:	f383 8812 	msr	BASEPRI_MAX, r3
 8002226:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <k_sched_time_slice_set+0x44>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8002230:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 8002232:	f04f 030a 	mov.w	r3, #10
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <k_sched_time_slice_set+0x48>)
 8002238:	fb00 f303 	mul.w	r3, r0, r3
 800223c:	dc09      	bgt.n	8002252 <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 800223e:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <k_sched_time_slice_set+0x4c>)
 8002242:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8002244:	f7ff ffd2 	bl	80021ec <z_reset_time_slice>
	__asm__ volatile(
 8002248:	f384 8811 	msr	BASEPRI, r4
 800224c:	f3bf 8f6f 	isb	sy
	}
}
 8002250:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 8002252:	2b02      	cmp	r3, #2
 8002254:	bfb8      	it	lt
 8002256:	2302      	movlt	r3, #2
 8002258:	e7f1      	b.n	800223e <k_sched_time_slice_set+0x26>
 800225a:	bf00      	nop
 800225c:	200002c8 	.word	0x200002c8
 8002260:	200002f4 	.word	0x200002f4
 8002264:	200002f0 	.word	0x200002f0

08002268 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002268:	b949      	cbnz	r1, 800227e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 800226e:	b930      	cbnz	r0, 800227e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <z_reschedule+0x16>
	ret = arch_swap(key);
 800227a:	f7fe be11 	b.w	8000ea0 <arch_swap>
 800227e:	f381 8811 	msr	BASEPRI, r1
 8002282:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8002286:	4770      	bx	lr
 8002288:	200002c8 	.word	0x200002c8

0800228c <k_sched_lock>:
	__asm__ volatile(
 800228c:	f04f 0310 	mov.w	r3, #16
 8002290:	f3ef 8111 	mrs	r1, BASEPRI
 8002294:	f383 8812 	msr	BASEPRI_MAX, r3
 8002298:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <k_sched_lock+0x24>)
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	7bd3      	ldrb	r3, [r2, #15]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80022a6:	f381 8811 	msr	BASEPRI, r1
 80022aa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80022ae:	4770      	bx	lr
 80022b0:	200002c8 	.word	0x200002c8

080022b4 <update_cache>:
{
 80022b4:	b538      	push	{r3, r4, r5, lr}
 80022b6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <update_cache+0x38>)
 80022ba:	4d0d      	ldr	r5, [pc, #52]	; (80022f0 <update_cache+0x3c>)
 80022bc:	f001 f86c 	bl	8003398 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80022c0:	4604      	mov	r4, r0
 80022c2:	b900      	cbnz	r0, 80022c6 <update_cache+0x12>
 80022c4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 80022c6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 80022c8:	b94a      	cbnz	r2, 80022de <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 80022ca:	7b5a      	ldrb	r2, [r3, #13]
 80022cc:	06d2      	lsls	r2, r2, #27
 80022ce:	d106      	bne.n	80022de <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80022d0:	69a2      	ldr	r2, [r4, #24]
 80022d2:	b922      	cbnz	r2, 80022de <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 80022d4:	89da      	ldrh	r2, [r3, #14]
 80022d6:	2a7f      	cmp	r2, #127	; 0x7f
 80022d8:	d901      	bls.n	80022de <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 80022da:	61ab      	str	r3, [r5, #24]
}
 80022dc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 80022de:	429c      	cmp	r4, r3
 80022e0:	d001      	beq.n	80022e6 <update_cache+0x32>
			z_reset_time_slice();
 80022e2:	f7ff ff83 	bl	80021ec <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 80022e6:	61ac      	str	r4, [r5, #24]
}
 80022e8:	e7f8      	b.n	80022dc <update_cache+0x28>
 80022ea:	bf00      	nop
 80022ec:	200002e4 	.word	0x200002e4
 80022f0:	200002c8 	.word	0x200002c8

080022f4 <move_thread_to_end_of_prio_q>:
{
 80022f4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80022f6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80022fa:	7b43      	ldrb	r3, [r0, #13]
 80022fc:	2a00      	cmp	r2, #0
{
 80022fe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002300:	da04      	bge.n	800230c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002306:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8002308:	f001 f81e 	bl	8003348 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800230c:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800230e:	4a15      	ldr	r2, [pc, #84]	; (8002364 <move_thread_to_end_of_prio_q+0x70>)
 8002310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002314:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8002316:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800231a:	f102 051c 	add.w	r5, r2, #28
 800231e:	42ab      	cmp	r3, r5
 8002320:	d01b      	beq.n	800235a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002322:	b1d3      	cbz	r3, 800235a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8002324:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8002328:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 800232c:	4286      	cmp	r6, r0
 800232e:	d00f      	beq.n	8002350 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8002330:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002332:	2800      	cmp	r0, #0
 8002334:	dd0c      	ble.n	8002350 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8002336:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8002338:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800233c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800233e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8002340:	6890      	ldr	r0, [r2, #8]
 8002342:	1a43      	subs	r3, r0, r1
 8002344:	4258      	negs	r0, r3
}
 8002346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 800234a:	4158      	adcs	r0, r3
 800234c:	f7ff bfb2 	b.w	80022b4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002350:	42a3      	cmp	r3, r4
 8002352:	d002      	beq.n	800235a <move_thread_to_end_of_prio_q+0x66>
 8002354:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1e6      	bne.n	8002328 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 800235a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 800235e:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8002360:	6211      	str	r1, [r2, #32]
}
 8002362:	e7ed      	b.n	8002340 <move_thread_to_end_of_prio_q+0x4c>
 8002364:	200002c8 	.word	0x200002c8

08002368 <z_time_slice>:
{
 8002368:	b538      	push	{r3, r4, r5, lr}
 800236a:	4601      	mov	r1, r0
	__asm__ volatile(
 800236c:	f04f 0310 	mov.w	r3, #16
 8002370:	f3ef 8411 	mrs	r4, BASEPRI
 8002374:	f383 8812 	msr	BASEPRI_MAX, r3
 8002378:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <z_time_slice+0x6c>)
 800237e:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <z_time_slice+0x70>)
 8002380:	6898      	ldr	r0, [r3, #8]
 8002382:	6815      	ldr	r5, [r2, #0]
 8002384:	42a8      	cmp	r0, r5
 8002386:	d106      	bne.n	8002396 <z_time_slice+0x2e>
			z_reset_time_slice();
 8002388:	f7ff ff30 	bl	80021ec <z_reset_time_slice>
	__asm__ volatile(
 800238c:	f384 8811 	msr	BASEPRI, r4
 8002390:	f3bf 8f6f 	isb	sy
}
 8002394:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8002396:	2500      	movs	r5, #0
 8002398:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <z_time_slice+0x74>)
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	b1ba      	cbz	r2, 80023d0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 80023a0:	89c2      	ldrh	r2, [r0, #14]
 80023a2:	2a7f      	cmp	r2, #127	; 0x7f
 80023a4:	d814      	bhi.n	80023d0 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 80023a6:	7b42      	ldrb	r2, [r0, #13]
 80023a8:	06d2      	lsls	r2, r2, #27
 80023aa:	d111      	bne.n	80023d0 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80023ac:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <z_time_slice+0x78>)
 80023ae:	f990 500e 	ldrsb.w	r5, [r0, #14]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4295      	cmp	r5, r2
 80023b6:	db0b      	blt.n	80023d0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <z_time_slice+0x7c>)
 80023ba:	4290      	cmp	r0, r2
 80023bc:	d008      	beq.n	80023d0 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	428a      	cmp	r2, r1
 80023c2:	dc02      	bgt.n	80023ca <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 80023c4:	f7ff ff96 	bl	80022f4 <move_thread_to_end_of_prio_q>
 80023c8:	e7de      	b.n	8002388 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 80023ca:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	e7dd      	b.n	800238c <z_time_slice+0x24>
 80023d0:	2200      	movs	r2, #0
 80023d2:	e7fb      	b.n	80023cc <z_time_slice+0x64>
 80023d4:	200002c8 	.word	0x200002c8
 80023d8:	200002ec 	.word	0x200002ec
 80023dc:	200002f4 	.word	0x200002f4
 80023e0:	200002f0 	.word	0x200002f0
 80023e4:	20000068 	.word	0x20000068

080023e8 <ready_thread>:
{
 80023e8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 80023ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
 80023ee:	7b43      	ldrb	r3, [r0, #13]
 80023f0:	2a00      	cmp	r2, #0
 80023f2:	db2a      	blt.n	800244a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80023f4:	06da      	lsls	r2, r3, #27
 80023f6:	d128      	bne.n	800244a <ready_thread+0x62>
 80023f8:	6982      	ldr	r2, [r0, #24]
 80023fa:	bb32      	cbnz	r2, 800244a <ready_thread+0x62>
	return list->head == list;
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 80023fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002402:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8002404:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002408:	f102 051c 	add.w	r5, r2, #28
 800240c:	42ab      	cmp	r3, r5
 800240e:	d017      	beq.n	8002440 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002410:	b1b3      	cbz	r3, 8002440 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8002412:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8002416:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 800241a:	428e      	cmp	r6, r1
 800241c:	d00b      	beq.n	8002436 <ready_thread+0x4e>
		return b2 - b1;
 800241e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002420:	2900      	cmp	r1, #0
 8002422:	dd08      	ble.n	8002436 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8002424:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002426:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800242a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800242c:	6058      	str	r0, [r3, #4]
}
 800242e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff bf3f 	b.w	80022b4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8002436:	42a3      	cmp	r3, r4
 8002438:	d002      	beq.n	8002440 <ready_thread+0x58>
 800243a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ea      	bne.n	8002416 <ready_thread+0x2e>
	node->prev = tail;
 8002440:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 8002444:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002446:	6210      	str	r0, [r2, #32]
}
 8002448:	e7f1      	b.n	800242e <ready_thread+0x46>
}
 800244a:	bc70      	pop	{r4, r5, r6}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200002c8 	.word	0x200002c8

08002454 <z_sched_start>:
{
 8002454:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002456:	f04f 0210 	mov.w	r2, #16
 800245a:	f3ef 8411 	mrs	r4, BASEPRI
 800245e:	f382 8812 	msr	BASEPRI_MAX, r2
 8002462:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8002466:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8002468:	0751      	lsls	r1, r2, #29
 800246a:	d404      	bmi.n	8002476 <z_sched_start+0x22>
	__asm__ volatile(
 800246c:	f384 8811 	msr	BASEPRI, r4
 8002470:	f3bf 8f6f 	isb	sy
}
 8002474:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800247c:	f7ff ffb4 	bl	80023e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002480:	4621      	mov	r1, r4
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <z_sched_start+0x38>)
}
 8002484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002488:	f7ff beee 	b.w	8002268 <z_reschedule>
 800248c:	200002fe 	.word	0x200002fe

08002490 <unready_thread>:
{
 8002490:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8002492:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8002496:	7b43      	ldrb	r3, [r0, #13]
 8002498:	2a00      	cmp	r2, #0
{
 800249a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800249c:	da04      	bge.n	80024a8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800249e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80024a4:	f000 ff50 	bl	8003348 <sys_dlist_remove>
	update_cache(thread == _current);
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <unready_thread+0x2c>)
 80024aa:	6898      	ldr	r0, [r3, #8]
 80024ac:	1a43      	subs	r3, r0, r1
 80024ae:	4258      	negs	r0, r3
 80024b0:	4158      	adcs	r0, r3
}
 80024b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 80024b6:	f7ff befd 	b.w	80022b4 <update_cache>
 80024ba:	bf00      	nop
 80024bc:	200002c8 	.word	0x200002c8

080024c0 <z_impl_k_thread_suspend>:
{
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80024c4:	3018      	adds	r0, #24
 80024c6:	f000 ff9f 	bl	8003408 <z_abort_timeout>
	__asm__ volatile(
 80024ca:	f04f 0310 	mov.w	r3, #16
 80024ce:	f3ef 8611 	mrs	r6, BASEPRI
 80024d2:	f383 8812 	msr	BASEPRI_MAX, r3
 80024d6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80024da:	f994 200d 	ldrsb.w	r2, [r4, #13]
 80024de:	7b63      	ldrb	r3, [r4, #13]
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	da05      	bge.n	80024f0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80024e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80024ea:	4620      	mov	r0, r4
 80024ec:	f000 ff2c 	bl	8003348 <sys_dlist_remove>
		update_cache(thread == _current);
 80024f0:	4d0b      	ldr	r5, [pc, #44]	; (8002520 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80024f2:	7b63      	ldrb	r3, [r4, #13]
 80024f4:	68a8      	ldr	r0, [r5, #8]
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	7363      	strb	r3, [r4, #13]
 80024fc:	1b03      	subs	r3, r0, r4
 80024fe:	4258      	negs	r0, r3
 8002500:	4158      	adcs	r0, r3
 8002502:	f7ff fed7 	bl	80022b4 <update_cache>
	__asm__ volatile(
 8002506:	f386 8811 	msr	BASEPRI, r6
 800250a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800250e:	68ab      	ldr	r3, [r5, #8]
 8002510:	42a3      	cmp	r3, r4
 8002512:	d103      	bne.n	800251c <z_impl_k_thread_suspend+0x5c>
}
 8002514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8002518:	f000 bf34 	b.w	8003384 <z_reschedule_unlocked>
}
 800251c:	bd70      	pop	{r4, r5, r6, pc}
 800251e:	bf00      	nop
 8002520:	200002c8 	.word	0x200002c8

08002524 <k_sched_unlock>:
{
 8002524:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002526:	f04f 0310 	mov.w	r3, #16
 800252a:	f3ef 8411 	mrs	r4, BASEPRI
 800252e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002532:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <k_sched_unlock+0x34>)
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	7bd3      	ldrb	r3, [r2, #15]
 800253c:	3301      	adds	r3, #1
 800253e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8002540:	2000      	movs	r0, #0
 8002542:	f7ff feb7 	bl	80022b4 <update_cache>
	__asm__ volatile(
 8002546:	f384 8811 	msr	BASEPRI, r4
 800254a:	f3bf 8f6f 	isb	sy
}
 800254e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002552:	f000 bf17 	b.w	8003384 <z_reschedule_unlocked>
 8002556:	bf00      	nop
 8002558:	200002c8 	.word	0x200002c8

0800255c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800255e:	2100      	movs	r1, #0
 8002560:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8002564:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8002568:	4608      	mov	r0, r1
 800256a:	f7ff be55 	b.w	8002218 <k_sched_time_slice_set>
 800256e:	bf00      	nop
 8002570:	200002c8 	.word	0x200002c8

08002574 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8002576:	f04f 0310 	mov.w	r3, #16
 800257a:	f3ef 8511 	mrs	r5, BASEPRI
 800257e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002582:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8002586:	491a      	ldr	r1, [pc, #104]	; (80025f0 <z_impl_k_yield+0x7c>)
 8002588:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800258a:	7b43      	ldrb	r3, [r0, #13]
 800258c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002590:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002592:	f000 fed9 	bl	8003348 <sys_dlist_remove>
	}
	queue_thread(_current);
 8002596:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8002598:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 800259a:	4608      	mov	r0, r1
 800259c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025a0:	735a      	strb	r2, [r3, #13]
 80025a2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80025a6:	4282      	cmp	r2, r0
 80025a8:	d01c      	beq.n	80025e4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80025aa:	b1da      	cbz	r2, 80025e4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 80025ac:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 80025ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80025b2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 80025b6:	42a6      	cmp	r6, r4
 80025b8:	d00f      	beq.n	80025da <z_impl_k_yield+0x66>
		return b2 - b1;
 80025ba:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80025bc:	2c00      	cmp	r4, #0
 80025be:	dd0c      	ble.n	80025da <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 80025c0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80025c2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80025c6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80025c8:	6053      	str	r3, [r2, #4]
	update_cache(1);
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7ff fe72 	bl	80022b4 <update_cache>
 80025d0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 80025d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80025d6:	f7fe bc63 	b.w	8000ea0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80025da:	42ba      	cmp	r2, r7
 80025dc:	d002      	beq.n	80025e4 <z_impl_k_yield+0x70>
 80025de:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	d1e6      	bne.n	80025b2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 80025e4:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 80025e6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 80025ea:	6013      	str	r3, [r2, #0]
	list->tail = node;
 80025ec:	620b      	str	r3, [r1, #32]
}
 80025ee:	e7ec      	b.n	80025ca <z_impl_k_yield+0x56>
 80025f0:	200002c8 	.word	0x200002c8

080025f4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80025f4:	ea50 0301 	orrs.w	r3, r0, r1
{
 80025f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025fc:	4605      	mov	r5, r0
 80025fe:	460e      	mov	r6, r1
	if (ticks == 0) {
 8002600:	d103      	bne.n	800260a <z_tick_sleep+0x16>
		arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
 8002602:	f7ff ffb7 	bl	8002574 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8002606:	2000      	movs	r0, #0
 8002608:	e033      	b.n	8002672 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 800260a:	f06f 0401 	mvn.w	r4, #1
 800260e:	1a24      	subs	r4, r4, r0
 8002610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002614:	eb63 0301 	sbc.w	r3, r3, r1
 8002618:	2c01      	cmp	r4, #1
 800261a:	f173 0300 	sbcs.w	r3, r3, #0
 800261e:	da02      	bge.n	8002626 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8002620:	f000 ff22 	bl	8003468 <sys_clock_tick_get_32>
 8002624:	1944      	adds	r4, r0, r5
 8002626:	f04f 0310 	mov.w	r3, #16
 800262a:	f3ef 8811 	mrs	r8, BASEPRI
 800262e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002632:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8002636:	4f10      	ldr	r7, [pc, #64]	; (8002678 <z_tick_sleep+0x84>)
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <z_tick_sleep+0x88>)
 800263a:	68b8      	ldr	r0, [r7, #8]
 800263c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800263e:	f7ff ff27 	bl	8002490 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8002642:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <z_tick_sleep+0x8c>)
 8002646:	462a      	mov	r2, r5
 8002648:	4633      	mov	r3, r6
 800264a:	3018      	adds	r0, #24
 800264c:	f000 f8f0 	bl	8002830 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	7b53      	ldrb	r3, [r2, #13]
 8002654:	f043 0310 	orr.w	r3, r3, #16
 8002658:	7353      	strb	r3, [r2, #13]
 800265a:	4640      	mov	r0, r8
 800265c:	f7fe fc20 	bl	8000ea0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8002660:	f000 ff02 	bl	8003468 <sys_clock_tick_get_32>
 8002664:	1a20      	subs	r0, r4, r0
 8002666:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800266a:	2801      	cmp	r0, #1
 800266c:	f173 0300 	sbcs.w	r3, r3, #0
 8002670:	dbc9      	blt.n	8002606 <z_tick_sleep+0x12>
}
 8002672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002676:	bf00      	nop
 8002678:	200002c8 	.word	0x200002c8
 800267c:	200002ec 	.word	0x200002ec
 8002680:	080033c5 	.word	0x080033c5

08002684 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002684:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002688:	bf08      	it	eq
 800268a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 800268e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002690:	d106      	bne.n	80026a0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <z_impl_k_sleep+0x2c>)
 8002694:	6898      	ldr	r0, [r3, #8]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 8002696:	f7ff ff13 	bl	80024c0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 800269a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 800269e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 80026a0:	f7ff ffa8 	bl	80025f4 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80026a4:	220a      	movs	r2, #10
 80026a6:	2300      	movs	r3, #0
 80026a8:	17c1      	asrs	r1, r0, #31
 80026aa:	f7fd fd75 	bl	8000198 <__aeabi_uldivmod>
	return ret;
 80026ae:	e7f6      	b.n	800269e <z_impl_k_sleep+0x1a>
 80026b0:	200002c8 	.word	0x200002c8

080026b4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80026b4:	4b01      	ldr	r3, [pc, #4]	; (80026bc <z_impl_z_current_get+0x8>)
 80026b6:	6898      	ldr	r0, [r3, #8]
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	200002c8 	.word	0x200002c8

080026c0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 80026c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026c4:	4604      	mov	r4, r0
 80026c6:	f04f 0310 	mov.w	r3, #16
 80026ca:	f3ef 8611 	mrs	r6, BASEPRI
 80026ce:	f383 8812 	msr	BASEPRI_MAX, r3
 80026d2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 80026d6:	7b43      	ldrb	r3, [r0, #13]
 80026d8:	071a      	lsls	r2, r3, #28
 80026da:	d505      	bpl.n	80026e8 <z_thread_abort+0x28>
	__asm__ volatile(
 80026dc:	f386 8811 	msr	BASEPRI, r6
 80026e0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80026e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80026e8:	f023 0220 	bic.w	r2, r3, #32
 80026ec:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80026f0:	09d2      	lsrs	r2, r2, #7
 80026f2:	d120      	bne.n	8002736 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80026f4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 80026f6:	68a3      	ldr	r3, [r4, #8]
 80026f8:	b113      	cbz	r3, 8002700 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 80026fa:	4620      	mov	r0, r4
 80026fc:	f000 fe2c 	bl	8003358 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8002700:	f104 0018 	add.w	r0, r4, #24
 8002704:	f000 fe80 	bl	8003408 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002708:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800270c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8002710:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002712:	42bd      	cmp	r5, r7
 8002714:	d000      	beq.n	8002718 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8002716:	b9b5      	cbnz	r5, 8002746 <z_thread_abort+0x86>
		update_cache(1);
 8002718:	2001      	movs	r0, #1
 800271a:	f7ff fdcb 	bl	80022b4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <z_thread_abort+0xa0>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	42a3      	cmp	r3, r4
 8002724:	d1da      	bne.n	80026dc <z_thread_abort+0x1c>
 8002726:	f3ef 8305 	mrs	r3, IPSR
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1d6      	bne.n	80026dc <z_thread_abort+0x1c>
 800272e:	4630      	mov	r0, r6
 8002730:	f7fe fbb6 	bl	8000ea0 <arch_swap>
	return ret;
 8002734:	e7d2      	b.n	80026dc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002736:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800273a:	f043 0308 	orr.w	r3, r3, #8
 800273e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002740:	f000 fe02 	bl	8003348 <sys_dlist_remove>
}
 8002744:	e7d7      	b.n	80026f6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 8002746:	4628      	mov	r0, r5
 8002748:	f000 fe06 	bl	8003358 <unpend_thread_no_timeout>
 800274c:	f105 0018 	add.w	r0, r5, #24
 8002750:	f000 fe5a 	bl	8003408 <z_abort_timeout>
 8002754:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8002758:	4628      	mov	r0, r5
 800275a:	f7ff fe45 	bl	80023e8 <ready_thread>
 800275e:	e7d7      	b.n	8002710 <z_thread_abort+0x50>
 8002760:	200002c8 	.word	0x200002c8

08002764 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8002764:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
 8002766:	4806      	ldr	r0, [pc, #24]	; (8002780 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <z_data_copy+0x20>)
 800276a:	4907      	ldr	r1, [pc, #28]	; (8002788 <z_data_copy+0x24>)
 800276c:	1a12      	subs	r2, r2, r0
 800276e:	f000 faa7 	bl	8002cc0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8002772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <z_data_copy+0x28>)
 8002778:	4905      	ldr	r1, [pc, #20]	; (8002790 <z_data_copy+0x2c>)
 800277a:	4806      	ldr	r0, [pc, #24]	; (8002794 <z_data_copy+0x30>)
 800277c:	f000 baa0 	b.w	8002cc0 <memcpy>
 8002780:	20000000 	.word	0x20000000
 8002784:	20000068 	.word	0x20000068
 8002788:	08003bf4 	.word	0x08003bf4
 800278c:	00000000 	.word	0x00000000
 8002790:	08003bf4 	.word	0x08003bf4
 8002794:	20000000 	.word	0x20000000

08002798 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <elapsed+0x10>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b90b      	cbnz	r3, 80027a2 <elapsed+0xa>
 800279e:	f7ff ba7f 	b.w	8001ca0 <sys_clock_elapsed>
}
 80027a2:	2000      	movs	r0, #0
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	200002f8 	.word	0x200002f8

080027ac <next_timeout>:
	return list->head == list;
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 80027ae:	b510      	push	{r4, lr}
 80027b0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027b2:	429c      	cmp	r4, r3
 80027b4:	bf08      	it	eq
 80027b6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80027b8:	f7ff ffee 	bl	8002798 <elapsed>
 80027bc:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
 80027be:	b16c      	cbz	r4, 80027dc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80027c0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80027c4:	1ac0      	subs	r0, r0, r3
 80027c6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 80027ca:	2801      	cmp	r0, #1
 80027cc:	f173 0200 	sbcs.w	r2, r3, #0
 80027d0:	db0d      	blt.n	80027ee <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80027d2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80027d6:	f173 0300 	sbcs.w	r3, r3, #0
 80027da:	db01      	blt.n	80027e0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 80027dc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <next_timeout+0x4c>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	b113      	cbz	r3, 80027ec <next_timeout+0x40>
 80027e6:	4298      	cmp	r0, r3
 80027e8:	bfa8      	it	ge
 80027ea:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80027ec:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 80027ee:	2000      	movs	r0, #0
 80027f0:	e7f6      	b.n	80027e0 <next_timeout+0x34>
 80027f2:	bf00      	nop
 80027f4:	20000030 	.word	0x20000030
 80027f8:	200002c8 	.word	0x200002c8

080027fc <remove_timeout>:
{
 80027fc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 80027fe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002800:	b168      	cbz	r0, 800281e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <remove_timeout+0x30>)
 8002804:	6852      	ldr	r2, [r2, #4]
 8002806:	4290      	cmp	r0, r2
 8002808:	d009      	beq.n	800281e <remove_timeout+0x22>
	if (next(t) != NULL) {
 800280a:	b143      	cbz	r3, 800281e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800280c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8002810:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002814:	1912      	adds	r2, r2, r4
 8002816:	eb41 0105 	adc.w	r1, r1, r5
 800281a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800281e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8002820:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002822:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002824:	2300      	movs	r3, #0
	node->prev = NULL;
 8002826:	e9c0 3300 	strd	r3, r3, [r0]
}
 800282a:	bd30      	pop	{r4, r5, pc}
 800282c:	20000030 	.word	0x20000030

08002830 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002834:	bf08      	it	eq
 8002836:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800283a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283c:	4604      	mov	r4, r0
 800283e:	461f      	mov	r7, r3
 8002840:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002842:	d067      	beq.n	8002914 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002844:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8002846:	f04f 0310 	mov.w	r3, #16
 800284a:	f3ef 8611 	mrs	r6, BASEPRI
 800284e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002852:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8002856:	f06f 0201 	mvn.w	r2, #1
 800285a:	1b53      	subs	r3, r2, r5
 800285c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002860:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8002864:	2b00      	cmp	r3, #0
 8002866:	db1b      	blt.n	80028a0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <z_add_timeout+0xe8>)
 800286a:	e9d3 1300 	ldrd	r1, r3, [r3]
 800286e:	1a52      	subs	r2, r2, r1
 8002870:	eb6c 0303 	sbc.w	r3, ip, r3
 8002874:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8002876:	eb63 0307 	sbc.w	r3, r3, r7
 800287a:	2d01      	cmp	r5, #1
 800287c:	f173 0200 	sbcs.w	r2, r3, #0
 8002880:	bfbc      	itt	lt
 8002882:	2501      	movlt	r5, #1
 8002884:	2300      	movlt	r3, #0
 8002886:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 800288a:	4824      	ldr	r0, [pc, #144]	; (800291c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 800288c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002890:	4283      	cmp	r3, r0
 8002892:	d118      	bne.n	80028c6 <z_add_timeout+0x96>
	node->prev = tail;
 8002894:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8002898:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 800289c:	6044      	str	r4, [r0, #4]
}
 800289e:	e026      	b.n	80028ee <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 80028a0:	f7ff ff7a 	bl	8002798 <elapsed>
 80028a4:	3501      	adds	r5, #1
 80028a6:	f147 0700 	adc.w	r7, r7, #0
 80028aa:	182d      	adds	r5, r5, r0
 80028ac:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 80028b0:	e9c4 5704 	strd	r5, r7, [r4, #16]
 80028b4:	e7e9      	b.n	800288a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 80028b6:	1a52      	subs	r2, r2, r1
 80028b8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 80028bc:	459c      	cmp	ip, r3
 80028be:	e9c4 2504 	strd	r2, r5, [r4, #16]
 80028c2:	d0e7      	beq.n	8002894 <z_add_timeout+0x64>
 80028c4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0e4      	beq.n	8002894 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 80028ca:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 80028ce:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 80028d2:	428a      	cmp	r2, r1
 80028d4:	eb75 0e07 	sbcs.w	lr, r5, r7
 80028d8:	daed      	bge.n	80028b6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 80028da:	1a8a      	subs	r2, r1, r2
 80028dc:	eb67 0505 	sbc.w	r5, r7, r5
 80028e0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 80028e4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80028e6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80028ea:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80028ec:	605c      	str	r4, [r3, #4]
	return list->head == list;
 80028ee:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80028f0:	4283      	cmp	r3, r0
 80028f2:	d00b      	beq.n	800290c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80028f4:	429c      	cmp	r4, r3
 80028f6:	d109      	bne.n	800290c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 80028f8:	f7ff ff58 	bl	80027ac <next_timeout>

			if (next_time == 0 ||
 80028fc:	b118      	cbz	r0, 8002906 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	4283      	cmp	r3, r0
 8002904:	d002      	beq.n	800290c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 8002906:	2100      	movs	r1, #0
 8002908:	f7ff f95a 	bl	8001bc0 <sys_clock_set_timeout>
	__asm__ volatile(
 800290c:	f386 8811 	msr	BASEPRI, r6
 8002910:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8002914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002916:	bf00      	nop
 8002918:	20000168 	.word	0x20000168
 800291c:	20000030 	.word	0x20000030
 8002920:	200002c8 	.word	0x200002c8

08002924 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8002924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002928:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800292a:	f7ff fd1d 	bl	8002368 <z_time_slice>
	__asm__ volatile(
 800292e:	f04f 0310 	mov.w	r3, #16
 8002932:	f3ef 8411 	mrs	r4, BASEPRI
 8002936:	f383 8812 	msr	BASEPRI_MAX, r3
 800293a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800293e:	4e24      	ldr	r6, [pc, #144]	; (80029d0 <sys_clock_announce+0xac>)
	return list->head == list;
 8002940:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80029d4 <sys_clock_announce+0xb0>
 8002944:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8002946:	4d24      	ldr	r5, [pc, #144]	; (80029d8 <sys_clock_announce+0xb4>)
 8002948:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800294c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800294e:	4540      	cmp	r0, r8
		curr_tick += dt;
 8002950:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8002954:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8002958:	d00b      	beq.n	8002972 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800295a:	b150      	cbz	r0, 8002972 <sys_clock_announce+0x4e>
 800295c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	eb77 090c 	sbcs.w	r9, r7, ip
 8002966:	da16      	bge.n	8002996 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800296e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8002972:	1852      	adds	r2, r2, r1
 8002974:	eb4e 0707 	adc.w	r7, lr, r7
 8002978:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 800297c:	2500      	movs	r5, #0
 800297e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8002980:	f7ff ff14 	bl	80027ac <next_timeout>
 8002984:	4629      	mov	r1, r5
 8002986:	f7ff f91b 	bl	8001bc0 <sys_clock_set_timeout>
	__asm__ volatile(
 800298a:	f384 8811 	msr	BASEPRI, r4
 800298e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8002992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8002996:	1859      	adds	r1, r3, r1
 8002998:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 80029a0:	2200      	movs	r2, #0
 80029a2:	2300      	movs	r3, #0
 80029a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 80029a8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 80029ac:	f7ff ff26 	bl	80027fc <remove_timeout>
 80029b0:	f384 8811 	msr	BASEPRI, r4
 80029b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80029b8:	6883      	ldr	r3, [r0, #8]
 80029ba:	4798      	blx	r3
	__asm__ volatile(
 80029bc:	f04f 0310 	mov.w	r3, #16
 80029c0:	f3ef 8411 	mrs	r4, BASEPRI
 80029c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80029c8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80029cc:	e7bc      	b.n	8002948 <sys_clock_announce+0x24>
 80029ce:	bf00      	nop
 80029d0:	200002f8 	.word	0x200002f8
 80029d4:	20000030 	.word	0x20000030
 80029d8:	20000168 	.word	0x20000168

080029dc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80029dc:	b510      	push	{r4, lr}
 80029de:	f04f 0310 	mov.w	r3, #16
 80029e2:	f3ef 8411 	mrs	r4, BASEPRI
 80029e6:	f383 8812 	msr	BASEPRI_MAX, r3
 80029ea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 80029ee:	f7ff f957 	bl	8001ca0 <sys_clock_elapsed>
 80029f2:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <sys_clock_tick_get+0x2c>)
 80029f4:	e9d2 3100 	ldrd	r3, r1, [r2]
 80029f8:	18c0      	adds	r0, r0, r3
 80029fa:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 80029fe:	f384 8811 	msr	BASEPRI, r4
 8002a02:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8002a06:	bd10      	pop	{r4, pc}
 8002a08:	20000168 	.word	0x20000168

08002a0c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8002a0c:	4a02      	ldr	r2, [pc, #8]	; (8002a18 <boot_banner+0xc>)
 8002a0e:	4903      	ldr	r1, [pc, #12]	; (8002a1c <boot_banner+0x10>)
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <boot_banner+0x14>)
 8002a12:	f000 b8b2 	b.w	8002b7a <printk>
 8002a16:	bf00      	nop
 8002a18:	08003bf0 	.word	0x08003bf0
 8002a1c:	08003baf 	.word	0x08003baf
 8002a20:	08003bca 	.word	0x08003bca

08002a24 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8002a24:	4770      	bx	lr

08002a26 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8002a26:	2301      	movs	r3, #1
 8002a28:	fa03 f101 	lsl.w	r1, r3, r1
 8002a2c:	6903      	ldr	r3, [r0, #16]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8002a32:	bf18      	it	ne
 8002a34:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8002a38:	b112      	cbz	r2, 8002a40 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8002a3a:	6883      	ldr	r3, [r0, #8]
 8002a3c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8002a3e:	4718      	bx	r3
 8002a40:	6883      	ldr	r3, [r0, #8]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	e7fb      	b.n	8002a3e <gpio_pin_set.isra.0+0x18>

08002a46 <k_msleep.isra.0>:
			return t * ((uint64_t)to_hz / from_hz);
 8002a46:	210a      	movs	r1, #10
 8002a48:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 8002a4c:	f7ff be1a 	b.w	8002684 <z_impl_k_sleep>

08002a50 <datamode>:
	gpio_pin_set(inputdevice, RS_PIN, 1);
 8002a50:	2201      	movs	r2, #1
 8002a52:	2105      	movs	r1, #5
 8002a54:	f7ff bfe7 	b.w	8002a26 <gpio_pin_set.isra.0>

08002a58 <commandmode>:
	gpio_pin_set(inputdevice, RS_PIN, 0);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2105      	movs	r1, #5
 8002a5c:	f7ff bfe3 	b.w	8002a26 <gpio_pin_set.isra.0>

08002a60 <epulse>:
void epulse(const struct device *inputdevice){ //function used in other LCD related functions to set EN on or off
 8002a60:	b510      	push	{r4, lr}
	gpio_pin_set(inputdevice, E_PIN, 1);
 8002a62:	2201      	movs	r2, #1
 8002a64:	2104      	movs	r1, #4
void epulse(const struct device *inputdevice){ //function used in other LCD related functions to set EN on or off
 8002a66:	4604      	mov	r4, r0
	gpio_pin_set(inputdevice, E_PIN, 1);
 8002a68:	f7ff ffdd 	bl	8002a26 <gpio_pin_set.isra.0>
	k_msleep(1);
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7ff ffea 	bl	8002a46 <k_msleep.isra.0>
	gpio_pin_set(inputdevice, E_PIN, 0);
 8002a72:	4620      	mov	r0, r4
 8002a74:	2200      	movs	r2, #0
}
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_pin_set(inputdevice, E_PIN, 0);
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	f7ff bfd3 	b.w	8002a26 <gpio_pin_set.isra.0>

08002a80 <lcdinitwrite>:
void lcdinitwrite(const struct device *inputdev, uint8_t cmddata){ //function for writing half bits. used in initialization and the commandwrite functions
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4604      	mov	r4, r0
 8002a84:	460d      	mov	r5, r1
	commandmode(inputdev);
 8002a86:	f7ff ffe7 	bl	8002a58 <commandmode>
	gpio_pin_set(inputdev, D7_PIN, (cmddata & (1<<7)) ? 1 : 0);//bit shifting to get at the data in the register, pretty sure this is more optimized than just for looping over them with an array
 8002a8a:	09ea      	lsrs	r2, r5, #7
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f7ff ffc9 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D6_PIN, (cmddata & (1<<6)) ? 1 : 0);
 8002a94:	f3c5 1280 	ubfx	r2, r5, #6, #1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	f7ff ffc3 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D5_PIN, (cmddata & (1<<5)) ? 1 : 0);
 8002aa0:	f3c5 1240 	ubfx	r2, r5, #5, #1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	f7ff ffbd 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D4_PIN, (cmddata & (1<<4)) ? 1 : 0);
 8002aac:	4620      	mov	r0, r4
 8002aae:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	f7ff ffb7 	bl	8002a26 <gpio_pin_set.isra.0>
	epulse(inputdev); 
 8002ab8:	4620      	mov	r0, r4
}
 8002aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	epulse(inputdev); 
 8002abe:	f7ff bfcf 	b.w	8002a60 <epulse>

08002ac2 <lcdbytewrite>:
void lcdbytewrite(const struct device *inputdev,uint8_t data){ //
 8002ac2:	b538      	push	{r3, r4, r5, lr}
	gpio_pin_set(inputdev, D7_PIN, (data & (1<<7)) ? 1 : 0);//bit shifting to get at the data in the register, pretty sure this is more optimized than just for looping over them with an array
 8002ac4:	09ca      	lsrs	r2, r1, #7
void lcdbytewrite(const struct device *inputdev,uint8_t data){ //
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	460d      	mov	r5, r1
	gpio_pin_set(inputdev, D7_PIN, (data & (1<<7)) ? 1 : 0);//bit shifting to get at the data in the register, pretty sure this is more optimized than just for looping over them with an array
 8002aca:	2100      	movs	r1, #0
 8002acc:	f7ff ffab 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D6_PIN, (data & (1<<6)) ? 1 : 0);
 8002ad0:	f3c5 1280 	ubfx	r2, r5, #6, #1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	f7ff ffa5 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D5_PIN, (data & (1<<5)) ? 1 : 0);
 8002adc:	f3c5 1240 	ubfx	r2, r5, #5, #1
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	f7ff ff9f 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D4_PIN, (data & (1<<4)) ? 1 : 0);
 8002ae8:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8002aec:	2103      	movs	r1, #3
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7ff ff99 	bl	8002a26 <gpio_pin_set.isra.0>
	epulse(inputdev);	
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff ffb3 	bl	8002a60 <epulse>
	gpio_pin_set(inputdev, D7_PIN, (data & (1<<3)) ? 1 : 0);
 8002afa:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 8002afe:	4620      	mov	r0, r4
 8002b00:	2100      	movs	r1, #0
 8002b02:	f7ff ff90 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D6_PIN, (data & (1<<2)) ? 1 : 0);
 8002b06:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	f7ff ff8a 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D5_PIN, (data & (1<<1)) ? 1 : 0);
 8002b12:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8002b16:	4620      	mov	r0, r4
 8002b18:	2102      	movs	r1, #2
 8002b1a:	f7ff ff84 	bl	8002a26 <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D4_PIN, (data & (1<<0)) ? 1 : 0);
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f005 0201 	and.w	r2, r5, #1
 8002b24:	2103      	movs	r1, #3
 8002b26:	f7ff ff7e 	bl	8002a26 <gpio_pin_set.isra.0>
	epulse(inputdev);
 8002b2a:	4620      	mov	r0, r4
}
 8002b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	epulse(inputdev);
 8002b30:	f7ff bf96 	b.w	8002a60 <epulse>

08002b34 <lcdcmdwrite>:
void lcdcmdwrite(const struct device *inputdev, uint8_t cmddata){
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4604      	mov	r4, r0
 8002b38:	460d      	mov	r5, r1
	commandmode(inputdev);
 8002b3a:	f7ff ff8d 	bl	8002a58 <commandmode>
	lcdbytewrite(inputdev, cmddata);
 8002b3e:	4629      	mov	r1, r5
 8002b40:	4620      	mov	r0, r4
}
 8002b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcdbytewrite(inputdev, cmddata);
 8002b46:	f7ff bfbc 	b.w	8002ac2 <lcdbytewrite>

08002b4a <lcddatawrite>:
void lcddatawrite(const struct device *inputdev, uint8_t data){
 8002b4a:	b538      	push	{r3, r4, r5, lr}
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	460d      	mov	r5, r1
	datamode(inputdev);
 8002b50:	f7ff ff7e 	bl	8002a50 <datamode>
	lcdbytewrite(inputdev, data);
 8002b54:	4629      	mov	r1, r5
 8002b56:	4620      	mov	r0, r4
}
 8002b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcdbytewrite(inputdev, data);
 8002b5c:	f7ff bfb1 	b.w	8002ac2 <lcdbytewrite>

08002b60 <lcdcursorposition>:
	switch (rowpos){
 8002b60:	b111      	cbz	r1, 8002b68 <lcdcursorposition+0x8>
 8002b62:	2901      	cmp	r1, #1
 8002b64:	d106      	bne.n	8002b74 <lcdcursorposition+0x14>
 8002b66:	2140      	movs	r1, #64	; 0x40
	if (colpos < 16){
 8002b68:	2a0f      	cmp	r2, #15
 8002b6a:	d803      	bhi.n	8002b74 <lcdcursorposition+0x14>
		hexadress += colpos; // add the number to the position register, this is done this way because we cant possibly fuck up our row position.
 8002b6c:	4411      	add	r1, r2
	lcdcmdwrite(inputdevice, hexadress);
 8002b6e:	b2c9      	uxtb	r1, r1
 8002b70:	f7ff bfe0 	b.w	8002b34 <lcdcmdwrite>
}
 8002b74:	4770      	bx	lr

08002b76 <arch_printk_char_out>:
}
 8002b76:	2000      	movs	r0, #0
 8002b78:	4770      	bx	lr

08002b7a <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
 8002b7a:	b40f      	push	{r0, r1, r2, r3}
 8002b7c:	b507      	push	{r0, r1, r2, lr}
 8002b7e:	a904      	add	r1, sp, #16
 8002b80:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002b84:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8002b86:	f7fd fcfb 	bl	8000580 <vprintk>
	}
	va_end(ap);
}
 8002b8a:	b003      	add	sp, #12
 8002b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b90:	b004      	add	sp, #16
 8002b92:	4770      	bx	lr

08002b94 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002b94:	4604      	mov	r4, r0
 8002b96:	b508      	push	{r3, lr}
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	47a0      	blx	r4
	return z_impl_z_current_get();
 8002ba0:	f7ff fd88 	bl	80026b4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8002ba4:	f7fe fb56 	bl	8001254 <z_impl_k_thread_abort>

08002ba8 <encode_uint>:
{
 8002ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bac:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002bae:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 8002bb0:	2b6f      	cmp	r3, #111	; 0x6f
{
 8002bb2:	4680      	mov	r8, r0
 8002bb4:	460f      	mov	r7, r1
 8002bb6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8002bb8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8002bbc:	d029      	beq.n	8002c12 <encode_uint+0x6a>
 8002bbe:	d824      	bhi.n	8002c0a <encode_uint+0x62>
		return 16;
 8002bc0:	2b58      	cmp	r3, #88	; 0x58
 8002bc2:	bf14      	ite	ne
 8002bc4:	260a      	movne	r6, #10
 8002bc6:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8002bc8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8002bcc:	4632      	mov	r2, r6
 8002bce:	2300      	movs	r3, #0
 8002bd0:	4640      	mov	r0, r8
 8002bd2:	4639      	mov	r1, r7
 8002bd4:	f7fd fae0 	bl	8000198 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002bd8:	2a09      	cmp	r2, #9
 8002bda:	b2d4      	uxtb	r4, r2
 8002bdc:	d81e      	bhi.n	8002c1c <encode_uint+0x74>
 8002bde:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8002be0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002be2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8002be4:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002be8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002bec:	d301      	bcc.n	8002bf2 <encode_uint+0x4a>
 8002bee:	45d1      	cmp	r9, sl
 8002bf0:	d811      	bhi.n	8002c16 <encode_uint+0x6e>
	if (conv->flag_hash) {
 8002bf2:	782b      	ldrb	r3, [r5, #0]
 8002bf4:	069b      	lsls	r3, r3, #26
 8002bf6:	d505      	bpl.n	8002c04 <encode_uint+0x5c>
		if (radix == 8) {
 8002bf8:	2e08      	cmp	r6, #8
 8002bfa:	d115      	bne.n	8002c28 <encode_uint+0x80>
			conv->altform_0 = true;
 8002bfc:	78ab      	ldrb	r3, [r5, #2]
 8002bfe:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002c02:	70ab      	strb	r3, [r5, #2]
}
 8002c04:	4648      	mov	r0, r9
 8002c06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002c0a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8002c0e:	2b70      	cmp	r3, #112	; 0x70
 8002c10:	e7d7      	b.n	8002bc2 <encode_uint+0x1a>
	switch (specifier) {
 8002c12:	2608      	movs	r6, #8
 8002c14:	e7d8      	b.n	8002bc8 <encode_uint+0x20>
		value /= radix;
 8002c16:	4680      	mov	r8, r0
 8002c18:	460f      	mov	r7, r1
 8002c1a:	e7d7      	b.n	8002bcc <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002c1c:	f1bb 0f19 	cmp.w	fp, #25
 8002c20:	bf94      	ite	ls
 8002c22:	3437      	addls	r4, #55	; 0x37
 8002c24:	3457      	addhi	r4, #87	; 0x57
 8002c26:	e7db      	b.n	8002be0 <encode_uint+0x38>
		} else if (radix == 16) {
 8002c28:	2e10      	cmp	r6, #16
 8002c2a:	d1eb      	bne.n	8002c04 <encode_uint+0x5c>
			conv->altform_0c = true;
 8002c2c:	78ab      	ldrb	r3, [r5, #2]
 8002c2e:	f043 0310 	orr.w	r3, r3, #16
 8002c32:	e7e6      	b.n	8002c02 <encode_uint+0x5a>

08002c34 <outs>:
{
 8002c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c38:	4607      	mov	r7, r0
 8002c3a:	4688      	mov	r8, r1
 8002c3c:	4615      	mov	r5, r2
 8002c3e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002c40:	4614      	mov	r4, r2
 8002c42:	42b4      	cmp	r4, r6
 8002c44:	eba4 0005 	sub.w	r0, r4, r5
 8002c48:	d302      	bcc.n	8002c50 <outs+0x1c>
 8002c4a:	b93e      	cbnz	r6, 8002c5c <outs+0x28>
 8002c4c:	7823      	ldrb	r3, [r4, #0]
 8002c4e:	b12b      	cbz	r3, 8002c5c <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8002c50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002c54:	4641      	mov	r1, r8
 8002c56:	47b8      	blx	r7
		if (rc < 0) {
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	daf2      	bge.n	8002c42 <outs+0xe>
}
 8002c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c60 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002c60:	4770      	bx	lr

08002c62 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002c62:	2000      	movs	r0, #0
 8002c64:	4770      	bx	lr

08002c66 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002c66:	f000 bb48 	b.w	80032fa <z_fatal_error>

08002c6a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8002c6a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002c6c:	6800      	ldr	r0, [r0, #0]
 8002c6e:	f000 bb44 	b.w	80032fa <z_fatal_error>

08002c72 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002c72:	2100      	movs	r1, #0
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7ff bff6 	b.w	8002c66 <z_arm_fatal_error>

08002c7a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8002c7a:	b508      	push	{r3, lr}
	handler();
 8002c7c:	f7fe f8e8 	bl	8000e50 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002c80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002c84:	f7fe b9bc 	b.w	8001000 <z_arm_exc_exit>

08002c88 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002c88:	4603      	mov	r3, r0
	size_t n = 0;
 8002c8a:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002c8c:	5c1a      	ldrb	r2, [r3, r0]
 8002c8e:	b902      	cbnz	r2, 8002c92 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002c90:	4770      	bx	lr
		n++;
 8002c92:	3001      	adds	r0, #1
 8002c94:	e7fa      	b.n	8002c8c <strlen+0x4>

08002c96 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002c96:	4603      	mov	r3, r0
	size_t n = 0;
 8002c98:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002c9a:	5c1a      	ldrb	r2, [r3, r0]
 8002c9c:	b10a      	cbz	r2, 8002ca2 <strnlen+0xc>
 8002c9e:	4288      	cmp	r0, r1
 8002ca0:	d100      	bne.n	8002ca4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002ca2:	4770      	bx	lr
		n++;
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	e7f8      	b.n	8002c9a <strnlen+0x4>

08002ca8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8002ca8:	1e43      	subs	r3, r0, #1
 8002caa:	3901      	subs	r1, #1
 8002cac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002cb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002cb4:	4282      	cmp	r2, r0
 8002cb6:	d101      	bne.n	8002cbc <strcmp+0x14>
 8002cb8:	2a00      	cmp	r2, #0
 8002cba:	d1f7      	bne.n	8002cac <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8002cbc:	1a10      	subs	r0, r2, r0
 8002cbe:	4770      	bx	lr

08002cc0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	1e43      	subs	r3, r0, #1
 8002cc4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002cc6:	4291      	cmp	r1, r2
 8002cc8:	d100      	bne.n	8002ccc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002cca:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8002ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002cd4:	e7f7      	b.n	8002cc6 <memcpy+0x6>

08002cd6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002cd6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002cd8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8002cda:	4603      	mov	r3, r0
	while (n > 0) {
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002ce0:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002ce2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002ce6:	e7f9      	b.n	8002cdc <memset+0x6>

08002ce8 <_stdout_hook_default>:
}
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cec:	4770      	bx	lr

08002cee <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8002cee:	2200      	movs	r2, #0
{
 8002cf0:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	2006      	movs	r0, #6
 8002cf6:	f7fe f893 	bl	8000e20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	2007      	movs	r0, #7
 8002d00:	f7fe f88e 	bl	8000e20 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002d04:	2200      	movs	r2, #0
 8002d06:	4611      	mov	r1, r2
 8002d08:	2008      	movs	r0, #8
 8002d0a:	f7fe f889 	bl	8000e20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4611      	mov	r1, r2
 8002d12:	2009      	movs	r0, #9
 8002d14:	f7fe f884 	bl	8000e20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	200a      	movs	r0, #10
 8002d1e:	f7fe f87f 	bl	8000e20 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002d22:	2200      	movs	r2, #0
 8002d24:	4611      	mov	r1, r2
 8002d26:	2017      	movs	r0, #23
 8002d28:	f7fe f87a 	bl	8000e20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4611      	mov	r1, r2
 8002d30:	2028      	movs	r0, #40	; 0x28
 8002d32:	f7fe f875 	bl	8000e20 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002d36:	2200      	movs	r2, #0
 8002d38:	4611      	mov	r1, r2
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f7fe f870 	bl	8000e20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002d40:	2200      	movs	r2, #0
 8002d42:	4611      	mov	r1, r2
 8002d44:	202a      	movs	r0, #42	; 0x2a
 8002d46:	f7fe f86b 	bl	8000e20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	2002      	movs	r0, #2
 8002d50:	f7fe f866 	bl	8000e20 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002d54:	2200      	movs	r2, #0
 8002d56:	4611      	mov	r1, r2
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f7fe f861 	bl	8000e20 <z_arm_irq_priority_set>
}
 8002d5e:	2000      	movs	r0, #0
 8002d60:	bd08      	pop	{r3, pc}

08002d62 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 8002d62:	6902      	ldr	r2, [r0, #16]
 8002d64:	2117      	movs	r1, #23
 8002d66:	2016      	movs	r0, #22
 8002d68:	f7fe bb52 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002d6c <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8002d6c:	6902      	ldr	r2, [r0, #16]
 8002d6e:	2116      	movs	r1, #22
 8002d70:	2015      	movs	r0, #21
 8002d72:	f7fe bb4d 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002d76 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 8002d76:	6902      	ldr	r2, [r0, #16]
 8002d78:	2113      	movs	r1, #19
 8002d7a:	2012      	movs	r0, #18
 8002d7c:	f7fe bb48 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002d80 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 8002d80:	6902      	ldr	r2, [r0, #16]
 8002d82:	2111      	movs	r1, #17
 8002d84:	2010      	movs	r0, #16
 8002d86:	f7fe bb43 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002d8a <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8002d8a:	6902      	ldr	r2, [r0, #16]
 8002d8c:	2110      	movs	r1, #16
 8002d8e:	200a      	movs	r0, #10
 8002d90:	f7fe bb3e 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002d94 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8002d94:	6902      	ldr	r2, [r0, #16]
 8002d96:	210a      	movs	r1, #10
 8002d98:	2005      	movs	r0, #5
 8002d9a:	f7fe bb39 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002d9e <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8002d9e:	6902      	ldr	r2, [r0, #16]
 8002da0:	2105      	movs	r1, #5
 8002da2:	2004      	movs	r0, #4
 8002da4:	f7fe bb34 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002da8 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8002da8:	6902      	ldr	r2, [r0, #16]
 8002daa:	2104      	movs	r1, #4
 8002dac:	2003      	movs	r0, #3
 8002dae:	f7fe bb2f 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002db2 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8002db2:	6902      	ldr	r2, [r0, #16]
 8002db4:	2103      	movs	r1, #3
 8002db6:	2002      	movs	r0, #2
 8002db8:	f7fe bb2a 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002dbc <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8002dbc:	6902      	ldr	r2, [r0, #16]
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7fe bb25 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002dc6 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8002dc6:	6902      	ldr	r2, [r0, #16]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7fe bb20 	b.w	8001410 <__stm32_exti_isr.isra.0>

08002dd0 <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8002dd0:	2360      	movs	r3, #96	; 0x60
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	6083      	str	r3, [r0, #8]
}
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8002dde:	4770      	bx	lr

08002de0 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002de0:	6843      	ldr	r3, [r0, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002de4:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002de6:	600b      	str	r3, [r1, #0]
}
 8002de8:	2000      	movs	r0, #0
 8002dea:	4770      	bx	lr

08002dec <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dec:	6843      	ldr	r3, [r0, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002df0:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002df2:	4042      	eors	r2, r0
 8002df4:	400a      	ands	r2, r1
 8002df6:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002df8:	615a      	str	r2, [r3, #20]
}
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	4770      	bx	lr

08002dfe <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dfe:	6843      	ldr	r3, [r0, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
}
 8002e02:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002e04:	6199      	str	r1, [r3, #24]
}
 8002e06:	4770      	bx	lr

08002e08 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002e08:	6843      	ldr	r3, [r0, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002e0c:	0409      	lsls	r1, r1, #16
 8002e0e:	6199      	str	r1, [r3, #24]
}
 8002e10:	2000      	movs	r0, #0
 8002e12:	4770      	bx	lr

08002e14 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002e14:	6843      	ldr	r3, [r0, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002e18:	6953      	ldr	r3, [r2, #20]
 8002e1a:	404b      	eors	r3, r1
 8002e1c:	6153      	str	r3, [r2, #20]
}
 8002e1e:	2000      	movs	r0, #0
 8002e20:	4770      	bx	lr

08002e22 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8002e22:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002e24:	6898      	ldr	r0, [r3, #8]
{
 8002e26:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002e28:	b158      	cbz	r0, 8002e42 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002e2a:	2400      	movs	r4, #0
 8002e2c:	4281      	cmp	r1, r0
 8002e2e:	d112      	bne.n	8002e56 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8002e30:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8002e32:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8002e34:	b954      	cbnz	r4, 8002e4c <gpio_stm32_manage_callback+0x2a>
 8002e36:	428d      	cmp	r5, r1
	list->head = node;
 8002e38:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002e3a:	d100      	bne.n	8002e3e <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002e3c:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002e3e:	2000      	movs	r0, #0
 8002e40:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8002e42:	b96a      	cbnz	r2, 8002e60 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002e44:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8002e46:	bd30      	pop	{r4, r5, pc}
 8002e48:	4628      	mov	r0, r5
 8002e4a:	e7ef      	b.n	8002e2c <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8002e4c:	428d      	cmp	r5, r1
	parent->next = child;
 8002e4e:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002e50:	bf08      	it	eq
 8002e52:	60dc      	streq	r4, [r3, #12]
}
 8002e54:	e7f3      	b.n	8002e3e <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8002e56:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002e58:	4604      	mov	r4, r0
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	d1f4      	bne.n	8002e48 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8002e5e:	b13a      	cbz	r2, 8002e70 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8002e60:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	600a      	str	r2, [r1, #0]
	list->head = node;
 8002e66:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	d1eb      	bne.n	8002e44 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8002e6c:	60d9      	str	r1, [r3, #12]
}
 8002e6e:	e7ea      	b.n	8002e46 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8002e70:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002e74:	e7e7      	b.n	8002e46 <gpio_stm32_manage_callback+0x24>

08002e76 <gpio_stm32_isr>:
{
 8002e76:	460b      	mov	r3, r1
 8002e78:	6889      	ldr	r1, [r1, #8]
 8002e7a:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002e7c:	b169      	cbz	r1, 8002e9a <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002e7e:	2501      	movs	r5, #1
 8002e80:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8002e82:	680c      	ldr	r4, [r1, #0]
 8002e84:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8002e86:	688a      	ldr	r2, [r1, #8]
 8002e88:	402a      	ands	r2, r5
 8002e8a:	d002      	beq.n	8002e92 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002e8c:	684b      	ldr	r3, [r1, #4]
 8002e8e:	4630      	mov	r0, r6
 8002e90:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002e92:	b114      	cbz	r4, 8002e9a <gpio_stm32_isr+0x24>
 8002e94:	4621      	mov	r1, r4
 8002e96:	6824      	ldr	r4, [r4, #0]
 8002e98:	e7f5      	b.n	8002e86 <gpio_stm32_isr+0x10>
}
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}

08002e9c <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002e9c:	6840      	ldr	r0, [r0, #4]
{
 8002e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002ea0:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002ea2:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002ea4:	6867      	ldr	r7, [r4, #4]
 8002ea6:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002ea8:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8002eac:	ea27 0700 	bic.w	r7, r7, r0
 8002eb0:	408e      	lsls	r6, r1
 8002eb2:	433e      	orrs	r6, r7
 8002eb4:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002eba:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002ebe:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002ec2:	f04f 0e03 	mov.w	lr, #3
 8002ec6:	007f      	lsls	r7, r7, #1
 8002ec8:	fa0e f707 	lsl.w	r7, lr, r7
 8002ecc:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002ed4:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002ed8:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8002edc:	007f      	lsls	r7, r7, #1
 8002ede:	40be      	lsls	r6, r7
 8002ee0:	ea46 060c 	orr.w	r6, r6, ip
 8002ee4:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8002eea:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002eee:	68e7      	ldr	r7, [r4, #12]
 8002ef0:	0076      	lsls	r6, r6, #1
 8002ef2:	fa0e f606 	lsl.w	r6, lr, r6
 8002ef6:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8002efe:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8002f02:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8002f06:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002f08:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002f0c:	40b2      	lsls	r2, r6
 8002f0e:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8002f10:	2d20      	cmp	r5, #32
 8002f12:	60e2      	str	r2, [r4, #12]
 8002f14:	d115      	bne.n	8002f42 <gpio_stm32_configure+0xa6>
		if (pin < 8) {
 8002f16:	2907      	cmp	r1, #7
 8002f18:	dc2b      	bgt.n	8002f72 <gpio_stm32_configure+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002f1e:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8002f20:	b32a      	cbz	r2, 8002f6e <gpio_stm32_configure+0xd2>
  return __builtin_clz(value);
 8002f22:	fab2 f282 	clz	r2, r2
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	260f      	movs	r6, #15
 8002f2a:	fa06 f202 	lsl.w	r2, r6, r2
 8002f2e:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8002f36:	fab2 f282 	clz	r2, r2
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002f46:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f4a:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	fa90 f0a0 	rbit	r0, r0
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8002f54:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002f58:	092d      	lsrs	r5, r5, #4
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	0040      	lsls	r0, r0, #1
 8002f60:	ea22 0303 	bic.w	r3, r2, r3
 8002f64:	fa05 f000 	lsl.w	r0, r5, r0
 8002f68:	4318      	orrs	r0, r3
 8002f6a:	6020      	str	r0, [r4, #0]
}
 8002f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8002f6e:	462a      	mov	r2, r5
 8002f70:	e7d9      	b.n	8002f26 <gpio_stm32_configure+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f72:	0a02      	lsrs	r2, r0, #8
 8002f74:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8002f7a:	b181      	cbz	r1, 8002f9e <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 8002f7c:	fab1 f181 	clz	r1, r1
 8002f80:	0089      	lsls	r1, r1, #2
 8002f82:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002f88:	fab2 f282 	clz	r2, r2
 8002f8c:	fa07 f101 	lsl.w	r1, r7, r1
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	ea26 0101 	bic.w	r1, r6, r1
 8002f96:	4093      	lsls	r3, r2
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002f9c:	e7d1      	b.n	8002f42 <gpio_stm32_configure+0xa6>
    return 32U;
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	e7ee      	b.n	8002f80 <gpio_stm32_configure+0xe4>

08002fa2 <gpio_stm32_config>:
{
 8002fa2:	b538      	push	{r3, r4, r5, lr}
 8002fa4:	460d      	mov	r5, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 8002fa6:	0591      	lsls	r1, r2, #22
{
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002fac:	d519      	bpl.n	8002fe2 <gpio_stm32_config+0x40>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002fae:	079a      	lsls	r2, r3, #30
 8002fb0:	d510      	bpl.n	8002fd4 <gpio_stm32_config+0x32>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002fb2:	0758      	lsls	r0, r3, #29
 8002fb4:	d530      	bpl.n	8003018 <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002fb6:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002fb8:	06d9      	lsls	r1, r3, #27
 8002fba:	d50d      	bpl.n	8002fd8 <gpio_stm32_config+0x36>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002fc0:	0519      	lsls	r1, r3, #20
 8002fc2:	d41e      	bmi.n	8003002 <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002fc4:	0558      	lsls	r0, r3, #21
 8002fc6:	d515      	bpl.n	8002ff4 <gpio_stm32_config+0x52>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002fc8:	2101      	movs	r1, #1
 8002fca:	40a9      	lsls	r1, r5
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7ff ff1b 	bl	8002e08 <gpio_stm32_port_clear_bits_raw>
 8002fd2:	e00f      	b.n	8002ff4 <gpio_stm32_config+0x52>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	e7ef      	b.n	8002fb8 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002fd8:	0698      	lsls	r0, r3, #26
 8002fda:	d5f1      	bpl.n	8002fc0 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002fe0:	e7ee      	b.n	8002fc0 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002fe2:	05d1      	lsls	r1, r2, #23
 8002fe4:	d513      	bpl.n	800300e <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002fe6:	06da      	lsls	r2, r3, #27
 8002fe8:	d413      	bmi.n	8003012 <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002fea:	f013 0220 	ands.w	r2, r3, #32
 8002fee:	bf18      	it	ne
 8002ff0:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	f7ff ff4f 	bl	8002e9c <gpio_stm32_configure>
 8002ffe:	2000      	movs	r0, #0
}
 8003000:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003002:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003004:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003006:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003008:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 800300a:	618b      	str	r3, [r1, #24]
	return 0;
 800300c:	e7f2      	b.n	8002ff4 <gpio_stm32_config+0x52>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800300e:	2230      	movs	r2, #48	; 0x30
 8003010:	e7f0      	b.n	8002ff4 <gpio_stm32_config+0x52>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003016:	e7ed      	b.n	8002ff4 <gpio_stm32_config+0x52>
				return -ENOTSUP;
 8003018:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 800301c:	e7f0      	b.n	8003000 <gpio_stm32_config+0x5e>

0800301e <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 800301e:	6902      	ldr	r2, [r0, #16]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_runtime_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 8003020:	2101      	movs	r1, #1
	data->dev = dev;
 8003022:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 8003024:	f7fe bc08 	b.w	8001838 <gpio_stm32_clock_request>

08003028 <LL_USART_ClearFlag_FE>:
{
 8003028:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 800302a:	6803      	ldr	r3, [r0, #0]
 800302c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800302e:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8003030:	6843      	ldr	r3, [r0, #4]
 8003032:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003034:	9b01      	ldr	r3, [sp, #4]
}
 8003036:	b002      	add	sp, #8
 8003038:	4770      	bx	lr

0800303a <uart_stm32_poll_in>:
{
 800303a:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800303c:	6843      	ldr	r3, [r0, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003040:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8003042:	071a      	lsls	r2, r3, #28
 8003044:	d501      	bpl.n	800304a <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 8003046:	f7ff ffef 	bl	8003028 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800304a:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800304c:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800304e:	bf43      	ittte	mi
 8003050:	6843      	ldrmi	r3, [r0, #4]
 8003052:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8003054:	2000      	movmi	r0, #0
		return -1;
 8003056:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 800305a:	bd08      	pop	{r3, pc}

0800305c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800305c:	6843      	ldr	r3, [r0, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003060:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8003062:	0612      	lsls	r2, r2, #24
 8003064:	d5fc      	bpl.n	8003060 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8003066:	6059      	str	r1, [r3, #4]
}
 8003068:	4770      	bx	lr

0800306a <uart_stm32_err_check>:
{
 800306a:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800306c:	6843      	ldr	r3, [r0, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003070:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8003072:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8003074:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003076:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8003078:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 800307c:	bf48      	it	mi
 800307e:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8003082:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8003084:	bf48      	it	mi
 8003086:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 800308a:	07d3      	lsls	r3, r2, #31
 800308c:	d501      	bpl.n	8003092 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 800308e:	f7ff ffcb 	bl	8003028 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8003092:	0791      	lsls	r1, r2, #30
 8003094:	d501      	bpl.n	800309a <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 8003096:	f7ff ffc7 	bl	8003028 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 800309a:	0753      	lsls	r3, r2, #29
 800309c:	d501      	bpl.n	80030a2 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 800309e:	f7ff ffc3 	bl	8003028 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 80030a2:	f7ff ffc1 	bl	8003028 <LL_USART_ClearFlag_FE>
}
 80030a6:	4610      	mov	r0, r2
 80030a8:	bd08      	pop	{r3, pc}

080030aa <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80030aa:	6843      	ldr	r3, [r0, #4]
{
 80030ac:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80030ae:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 80030b0:	2300      	movs	r3, #0
 80030b2:	b2d8      	uxtb	r0, r3
 80030b4:	1a15      	subs	r5, r2, r0
 80030b6:	2d00      	cmp	r5, #0
 80030b8:	dd04      	ble.n	80030c4 <uart_stm32_fifo_fill+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80030ba:	6825      	ldr	r5, [r4, #0]
 80030bc:	062d      	lsls	r5, r5, #24
 80030be:	f103 0301 	add.w	r3, r3, #1
 80030c2:	d400      	bmi.n	80030c6 <uart_stm32_fifo_fill+0x1c>
}
 80030c4:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 80030c6:	5c08      	ldrb	r0, [r1, r0]
 80030c8:	6060      	str	r0, [r4, #4]
}
 80030ca:	e7f2      	b.n	80030b2 <uart_stm32_fifo_fill+0x8>

080030cc <uart_stm32_fifo_read>:
{
 80030cc:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80030ce:	6843      	ldr	r3, [r0, #4]
 80030d0:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 80030d2:	2500      	movs	r5, #0
 80030d4:	b2e8      	uxtb	r0, r5
 80030d6:	1a13      	subs	r3, r2, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	dd02      	ble.n	80030e2 <uart_stm32_fifo_read+0x16>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	069b      	lsls	r3, r3, #26
 80030e0:	d400      	bmi.n	80030e4 <uart_stm32_fifo_read+0x18>
}
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80030e4:	6863      	ldr	r3, [r4, #4]
 80030e6:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80030e8:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80030ea:	0718      	lsls	r0, r3, #28
 80030ec:	d502      	bpl.n	80030f4 <uart_stm32_fifo_read+0x28>
			LL_USART_ClearFlag_ORE(UartInstance);
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7ff ff9a 	bl	8003028 <LL_USART_ClearFlag_FE>
 80030f4:	3501      	adds	r5, #1
 80030f6:	e7ed      	b.n	80030d4 <uart_stm32_fifo_read+0x8>

080030f8 <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80030f8:	6843      	ldr	r3, [r0, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	f102 030c 	add.w	r3, r2, #12
 8003100:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	f102 000c 	add.w	r0, r2, #12
 800310c:	e840 3100 	strex	r1, r3, [r0]
 8003110:	2900      	cmp	r1, #0
 8003112:	d1f3      	bne.n	80030fc <uart_stm32_irq_tx_enable+0x4>
}
 8003114:	4770      	bx	lr

08003116 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003116:	6843      	ldr	r3, [r0, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	f102 030c 	add.w	r3, r2, #12
 800311e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	f102 000c 	add.w	r0, r2, #12
 800312a:	e840 3100 	strex	r1, r3, [r0]
 800312e:	2900      	cmp	r1, #0
 8003130:	d1f3      	bne.n	800311a <uart_stm32_irq_tx_disable+0x4>
}
 8003132:	4770      	bx	lr

08003134 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003134:	6843      	ldr	r3, [r0, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003138:	6818      	ldr	r0, [r3, #0]
	return LL_USART_IsActiveFlag_TXE(UartInstance) &&
 800313a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 800313e:	bf1c      	itt	ne
 8003140:	68d8      	ldrne	r0, [r3, #12]
 8003142:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 8003146:	4770      	bx	lr

08003148 <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003148:	6843      	ldr	r3, [r0, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800314c:	6818      	ldr	r0, [r3, #0]
}
 800314e:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8003152:	4770      	bx	lr

08003154 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003154:	6843      	ldr	r3, [r0, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	f102 030c 	add.w	r3, r2, #12
 800315c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003160:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	f102 000c 	add.w	r0, r2, #12
 8003168:	e840 3100 	strex	r1, r3, [r0]
 800316c:	2900      	cmp	r1, #0
 800316e:	d1f3      	bne.n	8003158 <uart_stm32_irq_rx_enable+0x4>
}
 8003170:	4770      	bx	lr

08003172 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003172:	6843      	ldr	r3, [r0, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	f102 030c 	add.w	r3, r2, #12
 800317a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800317e:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	f102 000c 	add.w	r0, r2, #12
 8003186:	e840 3100 	strex	r1, r3, [r0]
 800318a:	2900      	cmp	r1, #0
 800318c:	d1f3      	bne.n	8003176 <uart_stm32_irq_rx_disable+0x4>
}
 800318e:	4770      	bx	lr

08003190 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003190:	6843      	ldr	r3, [r0, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003194:	6818      	ldr	r0, [r3, #0]
}
 8003196:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800319a:	4770      	bx	lr

0800319c <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800319c:	6843      	ldr	r3, [r0, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80031a2:	0691      	lsls	r1, r2, #26
 80031a4:	d502      	bpl.n	80031ac <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80031a6:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 80031a8:	0692      	lsls	r2, r2, #26
 80031aa:	d407      	bmi.n	80031bc <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80031ac:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80031ae:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80031b2:	d004      	beq.n	80031be <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80031b4:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 80031b6:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80031ba:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80031bc:	2001      	movs	r0, #1
}
 80031be:	4770      	bx	lr

080031c0 <uart_stm32_irq_update>:
}
 80031c0:	2001      	movs	r0, #1
 80031c2:	4770      	bx	lr

080031c4 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 80031c4:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 80031c6:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 80031ca:	4770      	bx	lr

080031cc <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 80031cc:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 80031ce:	6893      	ldr	r3, [r2, #8]
 80031d0:	b10b      	cbz	r3, 80031d6 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 80031d2:	68d1      	ldr	r1, [r2, #12]
 80031d4:	4718      	bx	r3
}
 80031d6:	4770      	bx	lr

080031d8 <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 80031d8:	b508      	push	{r3, lr}
 80031da:	2200      	movs	r2, #0
 80031dc:	2026      	movs	r0, #38	; 0x26
 80031de:	4611      	mov	r1, r2
 80031e0:	f7fd fe1e 	bl	8000e20 <z_arm_irq_priority_set>
 80031e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80031e8:	2026      	movs	r0, #38	; 0x26
 80031ea:	f7fd be09 	b.w	8000e00 <arch_irq_enable>

080031ee <uart_stm32_set_baudrate>:
{
 80031ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 80031f0:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80031f2:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 80031f4:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80031f6:	f857 4b0c 	ldr.w	r4, [r7], #12
{
 80031fa:	460d      	mov	r5, r1
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 f866 	bl	80032ce <z_device_ready>
 8003202:	b308      	cbz	r0, 8003248 <uart_stm32_set_baudrate+0x5a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8003204:	68b3      	ldr	r3, [r6, #8]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	b1f3      	cbz	r3, 8003248 <uart_stm32_set_baudrate+0x5a>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800320a:	aa01      	add	r2, sp, #4
 800320c:	4639      	mov	r1, r7
 800320e:	4630      	mov	r0, r6
 8003210:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8003212:	2800      	cmp	r0, #0
 8003214:	db18      	blt.n	8003248 <uart_stm32_set_baudrate+0x5a>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8003216:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003218:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800321a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800321e:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8003220:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003222:	00aa      	lsls	r2, r5, #2
 8003224:	0fab      	lsrs	r3, r5, #30
 8003226:	fba0 0101 	umull	r0, r1, r0, r1
 800322a:	f7fc ffb5 	bl	8000198 <__aeabi_uldivmod>
 800322e:	2264      	movs	r2, #100	; 0x64
 8003230:	fbb0 f1f2 	udiv	r1, r0, r2
 8003234:	fb02 0311 	mls	r3, r2, r1, r0
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	; 0x32
 800323c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003240:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003244:	b29b      	uxth	r3, r3
 8003246:	60a3      	str	r3, [r4, #8]
}
 8003248:	b003      	add	sp, #12
 800324a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800324c <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800324c:	6903      	ldr	r3, [r0, #16]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003252:	6843      	ldr	r3, [r0, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003256:	68d3      	ldr	r3, [r2, #12]
 8003258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	d029      	beq.n	80032b6 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 8003262:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8003266:	f1dc 0300 	rsbs	r3, ip, #0
 800326a:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800326e:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003270:	6913      	ldr	r3, [r2, #16]
 8003272:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d01e      	beq.n	80032ba <uart_stm32_config_get+0x6e>
 800327c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003280:	d01d      	beq.n	80032be <uart_stm32_config_get+0x72>
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf14      	ite	ne
 8003286:	2303      	movne	r3, #3
 8003288:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800328a:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800328c:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800328e:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8003290:	04c0      	lsls	r0, r0, #19
 8003292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003296:	d514      	bpl.n	80032c2 <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2303      	movne	r3, #3
 800329e:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80032a0:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80032a2:	6953      	ldr	r3, [r2, #20]
 80032a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80032a8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80032ac:	4253      	negs	r3, r2
 80032ae:	4153      	adcs	r3, r2
 80032b0:	71cb      	strb	r3, [r1, #7]
}
 80032b2:	2000      	movs	r0, #0
 80032b4:	4770      	bx	lr
	switch (parity) {
 80032b6:	2302      	movs	r3, #2
 80032b8:	e7d9      	b.n	800326e <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e7e5      	b.n	800328a <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 80032be:	2302      	movs	r3, #2
 80032c0:	e7e3      	b.n	800328a <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_7;
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf0c      	ite	eq
 80032c6:	2303      	moveq	r3, #3
 80032c8:	2302      	movne	r3, #2
 80032ca:	e7e9      	b.n	80032a0 <uart_stm32_config_get+0x54>

080032cc <z_device_state_init>:
}
 80032cc:	4770      	bx	lr

080032ce <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80032ce:	b138      	cbz	r0, 80032e0 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80032d0:	68c3      	ldr	r3, [r0, #12]
 80032d2:	8818      	ldrh	r0, [r3, #0]
 80032d4:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80032d8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80032dc:	4258      	negs	r0, r3
 80032de:	4158      	adcs	r0, r3
}
 80032e0:	4770      	bx	lr

080032e2 <arch_system_halt>:
	__asm__ volatile(
 80032e2:	f04f 0210 	mov.w	r2, #16
 80032e6:	f3ef 8311 	mrs	r3, BASEPRI
 80032ea:	f382 8812 	msr	BASEPRI_MAX, r2
 80032ee:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 80032f2:	e7fe      	b.n	80032f2 <arch_system_halt+0x10>

080032f4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80032f4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80032f6:	f7ff fff4 	bl	80032e2 <arch_system_halt>

080032fa <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80032fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fc:	4605      	mov	r5, r0
 80032fe:	460e      	mov	r6, r1
 8003300:	f04f 0310 	mov.w	r3, #16
 8003304:	f3ef 8711 	mrs	r7, BASEPRI
 8003308:	f383 8812 	msr	BASEPRI_MAX, r3
 800330c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8003310:	f7ff f9d0 	bl	80026b4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8003314:	4631      	mov	r1, r6
 8003316:	4604      	mov	r4, r0
 8003318:	4628      	mov	r0, r5
 800331a:	f7ff ffeb 	bl	80032f4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800331e:	f387 8811 	msr	BASEPRI, r7
 8003322:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8003326:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8003328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800332c:	f7fd bf92 	b.w	8001254 <z_impl_k_thread_abort>

08003330 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8003330:	b508      	push	{r3, lr}
	__asm__ volatile(
 8003332:	f04f 0210 	mov.w	r2, #16
 8003336:	f3ef 8311 	mrs	r3, BASEPRI
 800333a:	f382 8812 	msr	BASEPRI_MAX, r2
 800333e:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8003342:	f7fd fd4f 	bl	8000de4 <arch_cpu_idle>
 8003346:	e7f4      	b.n	8003332 <idle+0x2>

08003348 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8003348:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800334c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800334e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003350:	2300      	movs	r3, #0
	node->prev = NULL;
 8003352:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8003356:	4770      	bx	lr

08003358 <unpend_thread_no_timeout>:
{
 8003358:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 800335a:	f7ff fff5 	bl	8003348 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800335e:	7b43      	ldrb	r3, [r0, #13]
 8003360:	f023 0302 	bic.w	r3, r3, #2
 8003364:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	6083      	str	r3, [r0, #8]
}
 800336a:	bd08      	pop	{r3, pc}

0800336c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800336c:	4603      	mov	r3, r0
 800336e:	b920      	cbnz	r0, 800337a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003370:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8003374:	b90a      	cbnz	r2, 800337a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8003376:	f7fd bd93 	b.w	8000ea0 <arch_swap>
	__asm__ volatile(
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
}
 8003382:	4770      	bx	lr

08003384 <z_reschedule_unlocked>:
	__asm__ volatile(
 8003384:	f04f 0310 	mov.w	r3, #16
 8003388:	f3ef 8011 	mrs	r0, BASEPRI
 800338c:	f383 8812 	msr	BASEPRI_MAX, r3
 8003390:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8003394:	f7ff bfea 	b.w	800336c <z_reschedule_irqlock>

08003398 <z_priq_dumb_best>:
{
 8003398:	4603      	mov	r3, r0
	return list->head == list;
 800339a:	6800      	ldr	r0, [r0, #0]
}
 800339c:	4283      	cmp	r3, r0
 800339e:	bf08      	it	eq
 80033a0:	2000      	moveq	r0, #0
 80033a2:	4770      	bx	lr

080033a4 <z_ready_thread>:
{
 80033a4:	b510      	push	{r4, lr}
 80033a6:	f04f 0310 	mov.w	r3, #16
 80033aa:	f3ef 8411 	mrs	r4, BASEPRI
 80033ae:	f383 8812 	msr	BASEPRI_MAX, r3
 80033b2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 80033b6:	f7ff f817 	bl	80023e8 <ready_thread>
	__asm__ volatile(
 80033ba:	f384 8811 	msr	BASEPRI, r4
 80033be:	f3bf 8f6f 	isb	sy
}
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <z_thread_timeout>:
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4601      	mov	r1, r0
	__asm__ volatile(
 80033c8:	f04f 0310 	mov.w	r3, #16
 80033cc:	f3ef 8411 	mrs	r4, BASEPRI
 80033d0:	f383 8812 	msr	BASEPRI_MAX, r3
 80033d4:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80033d8:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 80033dc:	f013 0f28 	tst.w	r3, #40	; 0x28
 80033e0:	d10d      	bne.n	80033fe <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 80033e2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 80033e6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 80033e8:	b10b      	cbz	r3, 80033ee <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80033ea:	f7ff ffb5 	bl	8003358 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80033ee:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80033f2:	f023 0314 	bic.w	r3, r3, #20
 80033f6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80033fa:	f7fe fff5 	bl	80023e8 <ready_thread>
	__asm__ volatile(
 80033fe:	f384 8811 	msr	BASEPRI, r4
 8003402:	f3bf 8f6f 	isb	sy
}
 8003406:	bd10      	pop	{r4, pc}

08003408 <z_abort_timeout>:
{
 8003408:	b510      	push	{r4, lr}
	__asm__ volatile(
 800340a:	f04f 0210 	mov.w	r2, #16
 800340e:	f3ef 8411 	mrs	r4, BASEPRI
 8003412:	f382 8812 	msr	BASEPRI_MAX, r2
 8003416:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800341a:	6803      	ldr	r3, [r0, #0]
 800341c:	b13b      	cbz	r3, 800342e <z_abort_timeout+0x26>
			remove_timeout(to);
 800341e:	f7ff f9ed 	bl	80027fc <remove_timeout>
			ret = 0;
 8003422:	2000      	movs	r0, #0
	__asm__ volatile(
 8003424:	f384 8811 	msr	BASEPRI, r4
 8003428:	f3bf 8f6f 	isb	sy
}
 800342c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800342e:	f06f 0015 	mvn.w	r0, #21
 8003432:	e7f7      	b.n	8003424 <z_abort_timeout+0x1c>

08003434 <z_set_timeout_expiry>:
{
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	4604      	mov	r4, r0
 8003438:	460d      	mov	r5, r1
	__asm__ volatile(
 800343a:	f04f 0310 	mov.w	r3, #16
 800343e:	f3ef 8611 	mrs	r6, BASEPRI
 8003442:	f383 8812 	msr	BASEPRI_MAX, r3
 8003446:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 800344a:	f7ff f9af 	bl	80027ac <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800344e:	2801      	cmp	r0, #1
 8003450:	dd05      	ble.n	800345e <z_set_timeout_expiry+0x2a>
 8003452:	42a0      	cmp	r0, r4
 8003454:	db03      	blt.n	800345e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8003456:	4629      	mov	r1, r5
 8003458:	4620      	mov	r0, r4
 800345a:	f7fe fbb1 	bl	8001bc0 <sys_clock_set_timeout>
	__asm__ volatile(
 800345e:	f386 8811 	msr	BASEPRI, r6
 8003462:	f3bf 8f6f 	isb	sy
}
 8003466:	bd70      	pop	{r4, r5, r6, pc}

08003468 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 8003468:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 800346a:	f7ff fab7 	bl	80029dc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 800346e:	bd08      	pop	{r3, pc}
