
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	e0 09 00 20 9d 12 00 08 1d 2d 00 08 71 12 00 08     ... .....-..q...
 8000010:	71 12 00 08 71 12 00 08 71 12 00 08 00 00 00 00     q...q...q.......
	...
 800002c:	9d 0f 00 08 71 12 00 08 00 00 00 00 49 0f 00 08     ....q.......I...
 800003c:	bd 1b 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000050:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000060:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000070:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000080:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000090:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 80000a0:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 80000b0:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 80000c0:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 80000d0:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 80000e0:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 80000f0:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000100:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000110:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000120:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000130:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000140:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000150:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000160:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000170:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000180:	4d 10 00 08 4d 10 00 08 4d 10 00 08 4d 10 00 08     M...M...M...M...
 8000190:	4d 10 00 08 4d 10 00 08                             M...M...

Disassembly of section text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f000 f808 	bl	80001cc <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <__udivmoddi4>:
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d0:	4607      	mov	r7, r0
 80001d2:	468c      	mov	ip, r1
 80001d4:	4608      	mov	r0, r1
 80001d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001d8:	4615      	mov	r5, r2
 80001da:	463c      	mov	r4, r7
 80001dc:	4619      	mov	r1, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f040 80c6 	bne.w	8000370 <__udivmoddi4+0x1a4>
 80001e4:	4282      	cmp	r2, r0
 80001e6:	fab2 f782 	clz	r7, r2
 80001ea:	d946      	bls.n	800027a <__udivmoddi4+0xae>
 80001ec:	b14f      	cbz	r7, 8000202 <__udivmoddi4+0x36>
 80001ee:	f1c7 0e20 	rsb	lr, r7, #32
 80001f2:	fa24 fe0e 	lsr.w	lr, r4, lr
 80001f6:	fa00 f307 	lsl.w	r3, r0, r7
 80001fa:	40bd      	lsls	r5, r7
 80001fc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000200:	40bc      	lsls	r4, r7
 8000202:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000206:	fa1f fe85 	uxth.w	lr, r5
 800020a:	fbbc f9f8 	udiv	r9, ip, r8
 800020e:	0c22      	lsrs	r2, r4, #16
 8000210:	fb08 c319 	mls	r3, r8, r9, ip
 8000214:	fb09 fa0e 	mul.w	sl, r9, lr
 8000218:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800021c:	459a      	cmp	sl, r3
 800021e:	d928      	bls.n	8000272 <__udivmoddi4+0xa6>
 8000220:	18eb      	adds	r3, r5, r3
 8000222:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000226:	d204      	bcs.n	8000232 <__udivmoddi4+0x66>
 8000228:	459a      	cmp	sl, r3
 800022a:	d902      	bls.n	8000232 <__udivmoddi4+0x66>
 800022c:	f1a9 0002 	sub.w	r0, r9, #2
 8000230:	442b      	add	r3, r5
 8000232:	eba3 030a 	sub.w	r3, r3, sl
 8000236:	b2a4      	uxth	r4, r4
 8000238:	fbb3 f2f8 	udiv	r2, r3, r8
 800023c:	fb08 3312 	mls	r3, r8, r2, r3
 8000240:	fb02 fe0e 	mul.w	lr, r2, lr
 8000244:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000248:	45a6      	cmp	lr, r4
 800024a:	d914      	bls.n	8000276 <__udivmoddi4+0xaa>
 800024c:	192c      	adds	r4, r5, r4
 800024e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000252:	d203      	bcs.n	800025c <__udivmoddi4+0x90>
 8000254:	45a6      	cmp	lr, r4
 8000256:	d901      	bls.n	800025c <__udivmoddi4+0x90>
 8000258:	1e93      	subs	r3, r2, #2
 800025a:	442c      	add	r4, r5
 800025c:	eba4 040e 	sub.w	r4, r4, lr
 8000260:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000264:	b11e      	cbz	r6, 800026e <__udivmoddi4+0xa2>
 8000266:	40fc      	lsrs	r4, r7
 8000268:	2300      	movs	r3, #0
 800026a:	6034      	str	r4, [r6, #0]
 800026c:	6073      	str	r3, [r6, #4]
 800026e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000272:	4648      	mov	r0, r9
 8000274:	e7dd      	b.n	8000232 <__udivmoddi4+0x66>
 8000276:	4613      	mov	r3, r2
 8000278:	e7f0      	b.n	800025c <__udivmoddi4+0x90>
 800027a:	b902      	cbnz	r2, 800027e <__udivmoddi4+0xb2>
 800027c:	deff      	udf	#255	; 0xff
 800027e:	bb87      	cbnz	r7, 80002e2 <__udivmoddi4+0x116>
 8000280:	1a83      	subs	r3, r0, r2
 8000282:	2101      	movs	r1, #1
 8000284:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000288:	b2aa      	uxth	r2, r5
 800028a:	fbb3 fcfe 	udiv	ip, r3, lr
 800028e:	0c20      	lsrs	r0, r4, #16
 8000290:	fb0e 331c 	mls	r3, lr, ip, r3
 8000294:	fb0c f802 	mul.w	r8, ip, r2
 8000298:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800029c:	4598      	cmp	r8, r3
 800029e:	d963      	bls.n	8000368 <__udivmoddi4+0x19c>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002a6:	d204      	bcs.n	80002b2 <__udivmoddi4+0xe6>
 80002a8:	4598      	cmp	r8, r3
 80002aa:	d902      	bls.n	80002b2 <__udivmoddi4+0xe6>
 80002ac:	f1ac 0002 	sub.w	r0, ip, #2
 80002b0:	442b      	add	r3, r5
 80002b2:	eba3 0308 	sub.w	r3, r3, r8
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	fb0c f202 	mul.w	r2, ip, r2
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	42a2      	cmp	r2, r4
 80002ca:	d94f      	bls.n	800036c <__udivmoddi4+0x1a0>
 80002cc:	192c      	adds	r4, r5, r4
 80002ce:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80002d2:	d204      	bcs.n	80002de <__udivmoddi4+0x112>
 80002d4:	42a2      	cmp	r2, r4
 80002d6:	d902      	bls.n	80002de <__udivmoddi4+0x112>
 80002d8:	f1ac 0302 	sub.w	r3, ip, #2
 80002dc:	442c      	add	r4, r5
 80002de:	1aa4      	subs	r4, r4, r2
 80002e0:	e7be      	b.n	8000260 <__udivmoddi4+0x94>
 80002e2:	f1c7 0c20 	rsb	ip, r7, #32
 80002e6:	fa20 f80c 	lsr.w	r8, r0, ip
 80002ea:	fa00 f307 	lsl.w	r3, r0, r7
 80002ee:	fa24 fc0c 	lsr.w	ip, r4, ip
 80002f2:	40bd      	lsls	r5, r7
 80002f4:	ea4c 0203 	orr.w	r2, ip, r3
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	b2ab      	uxth	r3, r5
 80002fe:	fbb8 fcfe 	udiv	ip, r8, lr
 8000302:	0c11      	lsrs	r1, r2, #16
 8000304:	fb0e 801c 	mls	r0, lr, ip, r8
 8000308:	fb0c f903 	mul.w	r9, ip, r3
 800030c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000310:	4581      	cmp	r9, r0
 8000312:	fa04 f407 	lsl.w	r4, r4, r7
 8000316:	d923      	bls.n	8000360 <__udivmoddi4+0x194>
 8000318:	1828      	adds	r0, r5, r0
 800031a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800031e:	d204      	bcs.n	800032a <__udivmoddi4+0x15e>
 8000320:	4581      	cmp	r9, r0
 8000322:	d902      	bls.n	800032a <__udivmoddi4+0x15e>
 8000324:	f1ac 0102 	sub.w	r1, ip, #2
 8000328:	4428      	add	r0, r5
 800032a:	eba0 0009 	sub.w	r0, r0, r9
 800032e:	b292      	uxth	r2, r2
 8000330:	fbb0 fcfe 	udiv	ip, r0, lr
 8000334:	fb0e 001c 	mls	r0, lr, ip, r0
 8000338:	fb0c f803 	mul.w	r8, ip, r3
 800033c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000340:	4598      	cmp	r8, r3
 8000342:	d90f      	bls.n	8000364 <__udivmoddi4+0x198>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800034a:	d204      	bcs.n	8000356 <__udivmoddi4+0x18a>
 800034c:	4598      	cmp	r8, r3
 800034e:	d902      	bls.n	8000356 <__udivmoddi4+0x18a>
 8000350:	f1ac 0202 	sub.w	r2, ip, #2
 8000354:	442b      	add	r3, r5
 8000356:	eba3 0308 	sub.w	r3, r3, r8
 800035a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800035e:	e791      	b.n	8000284 <__udivmoddi4+0xb8>
 8000360:	4661      	mov	r1, ip
 8000362:	e7e2      	b.n	800032a <__udivmoddi4+0x15e>
 8000364:	4662      	mov	r2, ip
 8000366:	e7f6      	b.n	8000356 <__udivmoddi4+0x18a>
 8000368:	4660      	mov	r0, ip
 800036a:	e7a2      	b.n	80002b2 <__udivmoddi4+0xe6>
 800036c:	4663      	mov	r3, ip
 800036e:	e7b6      	b.n	80002de <__udivmoddi4+0x112>
 8000370:	4283      	cmp	r3, r0
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0x1b4>
 8000374:	b10e      	cbz	r6, 800037a <__udivmoddi4+0x1ae>
 8000376:	e9c6 7000 	strd	r7, r0, [r6]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e776      	b.n	800026e <__udivmoddi4+0xa2>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	b981      	cbnz	r1, 80003a8 <__udivmoddi4+0x1dc>
 8000386:	4283      	cmp	r3, r0
 8000388:	d301      	bcc.n	800038e <__udivmoddi4+0x1c2>
 800038a:	42ba      	cmp	r2, r7
 800038c:	d80a      	bhi.n	80003a4 <__udivmoddi4+0x1d8>
 800038e:	1abc      	subs	r4, r7, r2
 8000390:	eb60 0303 	sbc.w	r3, r0, r3
 8000394:	2001      	movs	r0, #1
 8000396:	469c      	mov	ip, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d068      	beq.n	800046e <__udivmoddi4+0x2a2>
 800039c:	e9c6 4c00 	strd	r4, ip, [r6]
 80003a0:	2100      	movs	r1, #0
 80003a2:	e764      	b.n	800026e <__udivmoddi4+0xa2>
 80003a4:	4608      	mov	r0, r1
 80003a6:	e7f7      	b.n	8000398 <__udivmoddi4+0x1cc>
 80003a8:	f1c1 0c20 	rsb	ip, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f40c 	lsr.w	r4, r2, ip
 80003b2:	431c      	orrs	r4, r3
 80003b4:	fa02 f501 	lsl.w	r5, r2, r1
 80003b8:	fa00 f301 	lsl.w	r3, r0, r1
 80003bc:	fa27 f20c 	lsr.w	r2, r7, ip
 80003c0:	fa20 fb0c 	lsr.w	fp, r0, ip
 80003c4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003c8:	4313      	orrs	r3, r2
 80003ca:	fbbb f8f9 	udiv	r8, fp, r9
 80003ce:	fa1f fe84 	uxth.w	lr, r4
 80003d2:	fb09 bb18 	mls	fp, r9, r8, fp
 80003d6:	0c1a      	lsrs	r2, r3, #16
 80003d8:	fb08 fa0e 	mul.w	sl, r8, lr
 80003dc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80003e0:	4592      	cmp	sl, r2
 80003e2:	fa07 f701 	lsl.w	r7, r7, r1
 80003e6:	d93e      	bls.n	8000466 <__udivmoddi4+0x29a>
 80003e8:	18a2      	adds	r2, r4, r2
 80003ea:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ee:	d204      	bcs.n	80003fa <__udivmoddi4+0x22e>
 80003f0:	4592      	cmp	sl, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x22e>
 80003f4:	f1a8 0002 	sub.w	r0, r8, #2
 80003f8:	4422      	add	r2, r4
 80003fa:	eba2 020a 	sub.w	r2, r2, sl
 80003fe:	b29b      	uxth	r3, r3
 8000400:	fbb2 f8f9 	udiv	r8, r2, r9
 8000404:	fb09 2218 	mls	r2, r9, r8, r2
 8000408:	fb08 fe0e 	mul.w	lr, r8, lr
 800040c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000410:	4596      	cmp	lr, r2
 8000412:	d92a      	bls.n	800046a <__udivmoddi4+0x29e>
 8000414:	18a2      	adds	r2, r4, r2
 8000416:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800041a:	d204      	bcs.n	8000426 <__udivmoddi4+0x25a>
 800041c:	4596      	cmp	lr, r2
 800041e:	d902      	bls.n	8000426 <__udivmoddi4+0x25a>
 8000420:	f1a8 0302 	sub.w	r3, r8, #2
 8000424:	4422      	add	r2, r4
 8000426:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800042a:	fba0 9305 	umull	r9, r3, r0, r5
 800042e:	eba2 020e 	sub.w	r2, r2, lr
 8000432:	429a      	cmp	r2, r3
 8000434:	46ce      	mov	lr, r9
 8000436:	4698      	mov	r8, r3
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x274>
 800043a:	d106      	bne.n	800044a <__udivmoddi4+0x27e>
 800043c:	454f      	cmp	r7, r9
 800043e:	d204      	bcs.n	800044a <__udivmoddi4+0x27e>
 8000440:	ebb9 0e05 	subs.w	lr, r9, r5
 8000444:	eb63 0804 	sbc.w	r8, r3, r4
 8000448:	3801      	subs	r0, #1
 800044a:	b186      	cbz	r6, 800046e <__udivmoddi4+0x2a2>
 800044c:	ebb7 030e 	subs.w	r3, r7, lr
 8000450:	eb62 0708 	sbc.w	r7, r2, r8
 8000454:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000458:	40cb      	lsrs	r3, r1
 800045a:	ea4c 0303 	orr.w	r3, ip, r3
 800045e:	40cf      	lsrs	r7, r1
 8000460:	e9c6 3700 	strd	r3, r7, [r6]
 8000464:	e79c      	b.n	80003a0 <__udivmoddi4+0x1d4>
 8000466:	4640      	mov	r0, r8
 8000468:	e7c7      	b.n	80003fa <__udivmoddi4+0x22e>
 800046a:	4643      	mov	r3, r8
 800046c:	e7db      	b.n	8000426 <__udivmoddi4+0x25a>
 800046e:	4631      	mov	r1, r6
 8000470:	e6fd      	b.n	800026e <__udivmoddi4+0xa2>
	...

08000474 <lcdinit>:
	return;

}
 

void lcdinit(const struct device *inputdevice){
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
	PD3 = D4
	PD4 = E
	PD5 = RS
	 */
	k_msleep(15); //15 ms delay at start of operation in order to allow internal function of LCD to initalize properlyS
	int pinarray[] = {0 /*D7*/,1 /*D6*/,2 /*D5*/,3 /*D4*/,4 /*E*/, 5 /*RS*/};
 8000476:	4e24      	ldr	r6, [pc, #144]	; (8000508 <lcdinit+0x94>)
void lcdinit(const struct device *inputdevice){
 8000478:	b087      	sub	sp, #28
 800047a:	4604      	mov	r4, r0
	k_msleep(15); //15 ms delay at start of operation in order to allow internal function of LCD to initalize properlyS
 800047c:	200f      	movs	r0, #15
 800047e:	f002 fb1c 	bl	8002aba <k_msleep.isra.0>
	int pinarray[] = {0 /*D7*/,1 /*D6*/,2 /*D5*/,3 /*D4*/,4 /*E*/, 5 /*RS*/};
 8000482:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000484:	466d      	mov	r5, sp
 8000486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000488:	e896 0003 	ldmia.w	r6, {r0, r1}
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800048c:	2701      	movs	r7, #1
 800048e:	e885 0003 	stmia.w	r5, {r0, r1}

	for (int i = 0; i <= sizeof(pinarray) ; i++){ //function that configures all the pins to output
 8000492:	466e      	mov	r6, sp
 8000494:	2500      	movs	r5, #0
		int pin = pinarray[i];
 8000496:	f856 1b04 	ldr.w	r1, [r6], #4
	struct gpio_driver_data *data =
 800049a:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
 800049c:	68a0      	ldr	r0, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800049e:	6813      	ldr	r3, [r2, #0]
 80004a0:	b2c9      	uxtb	r1, r1
 80004a2:	fa07 fc01 	lsl.w	ip, r7, r1
 80004a6:	ea23 030c 	bic.w	r3, r3, ip
 80004aa:	6013      	str	r3, [r2, #0]
	for (int i = 0; i <= sizeof(pinarray) ; i++){ //function that configures all the pins to output
 80004ac:	3501      	adds	r5, #1
	}

	return api->pin_configure(port, pin, flags);
 80004ae:	6803      	ldr	r3, [r0, #0]
 80004b0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80004b4:	4620      	mov	r0, r4
 80004b6:	4798      	blx	r3
 80004b8:	2d19      	cmp	r5, #25
 80004ba:	d1ec      	bne.n	8000496 <lcdinit+0x22>
		gpio_pin_configure(inputdevice, pin, GPIO_OUTPUT_INACTIVE);
	}
	uint8_t initcmd = (LCD_CMD_CONFIG | LCD_CMD_CONFIG_4BITMODE);
	lcdinitwrite(inputdevice, initcmd);
 80004bc:	2120      	movs	r1, #32
 80004be:	4620      	mov	r0, r4
 80004c0:	f002 fb18 	bl	8002af4 <lcdinitwrite>
	k_msleep(10);
 80004c4:	200a      	movs	r0, #10
 80004c6:	f002 faf8 	bl	8002aba <k_msleep.isra.0>
	lcdinitwrite(inputdevice, initcmd);
 80004ca:	2120      	movs	r1, #32
 80004cc:	4620      	mov	r0, r4
 80004ce:	f002 fb11 	bl	8002af4 <lcdinitwrite>
	k_msleep(10);
 80004d2:	200a      	movs	r0, #10
 80004d4:	f002 faf1 	bl	8002aba <k_msleep.isra.0>
	lcdinitwrite(inputdevice, initcmd);
 80004d8:	2120      	movs	r1, #32
 80004da:	4620      	mov	r0, r4
 80004dc:	f002 fb0a 	bl	8002af4 <lcdinitwrite>
	k_msleep(10);
 80004e0:	200a      	movs	r0, #10
 80004e2:	f002 faea 	bl	8002aba <k_msleep.isra.0>
	initcmd = (LCD_CMD_CONFIG | LCD_CMD_CONFIG_2ROWS | LCD_CMD_CONFIG_5X8 | LCD_CMD_CONFIG_4BITMODE); 
	lcdcmdwrite(inputdevice, initcmd);
 80004e6:	2128      	movs	r1, #40	; 0x28
 80004e8:	4620      	mov	r0, r4
 80004ea:	f002 fb5e 	bl	8002baa <lcdcmdwrite>
	k_msleep(10);
 80004ee:	200a      	movs	r0, #10
 80004f0:	f002 fae3 	bl	8002aba <k_msleep.isra.0>
	initcmd = (LCD_CMD_DISPLAY | LCD_CMD_DISPLAY_ON | LCD_CMD_DISPLAY_CURSOR_OFF | LCD_CMD_DISPLAY_BLINK_OFF);; //config onoff 0b0000 1000 | 0b 0000 0100 = 0b0000 1100 = 0x0C
	lcdcmdwrite(inputdevice, initcmd);
 80004f4:	4620      	mov	r0, r4
 80004f6:	210c      	movs	r1, #12
 80004f8:	f002 fb57 	bl	8002baa <lcdcmdwrite>
	k_msleep(10);
 80004fc:	200a      	movs	r0, #10
	return; 
 80004fe:	b007      	add	sp, #28
 8000500:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_msleep(10);
 8000504:	f002 bad9 	b.w	8002aba <k_msleep.isra.0>
 8000508:	080039c4 	.word	0x080039c4

0800050c <DHTgrab>:


}

void DHTgrab(void)
{
 800050c:	b570      	push	{r4, r5, r6, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800050e:	4816      	ldr	r0, [pc, #88]	; (8000568 <DHTgrab+0x5c>)
 8000510:	f001 fd3e 	bl	8001f90 <z_impl_device_get_binding>
 8000514:	4604      	mov	r4, r0
	struct gpio_driver_data *data =
 8000516:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 8000518:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800051a:	6813      	ldr	r3, [r2, #0]
 800051c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000520:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 8000522:	680b      	ldr	r3, [r1, #0]
 8000524:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000528:	210f      	movs	r1, #15
 800052a:	4798      	blx	r3
	const struct device *blue;

	blue = device_get_binding(LED3);

	gpio_pin_configure(blue, PIN3, GPIO_OUTPUT_INACTIVE | FLAGS3);
	gpio_pin_set(blue, PIN3, 1);
 800052c:	2101      	movs	r1, #1
 800052e:	4620      	mov	r0, r4
 8000530:	f002 fb5e 	bl	8002bf0 <gpio_pin_set.constprop.0.isra.0>
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <DHTgrab+0x60>)
 8000536:	f001 fd2b 	bl	8001f90 <z_impl_device_get_binding>
 800053a:	4605      	mov	r5, r0
	double tempval;
	double humival;
	const struct device *dht22;
	const char *const dht = DT_LABEL(DT_INST(0,aosong_dht));
	dht22 = device_get_binding(dht);
	k_msleep(4050);
 800053c:	f640 70d2 	movw	r0, #4050	; 0xfd2
 8000540:	f002 fb65 	bl	8002c0e <k_msleep.isra.0>
	bool toggle = false;
 8000544:	2600      	movs	r6, #0
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 8000546:	68ab      	ldr	r3, [r5, #8]
 8000548:	2139      	movs	r1, #57	; 0x39
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	4628      	mov	r0, r5
 800054e:	4798      	blx	r3
		//tempval = sensor_value_to_double(&temperature);
		//humival = sensor_value_to_double(&humidity);
		//	tester = tempval;

		//blue light blinks, just shows us if the sensor is working
		gpio_pin_set(blue, PIN3, (int)toggle);
 8000550:	4631      	mov	r1, r6
 8000552:	4620      	mov	r0, r4
 8000554:	f002 fb4c 	bl	8002bf0 <gpio_pin_set.constprop.0.isra.0>
		toggle = !toggle;
		k_msleep(2000);
 8000558:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
		toggle = !toggle;
 800055c:	f086 0601 	eor.w	r6, r6, #1
		k_msleep(2000);
 8000560:	f002 fb55 	bl	8002c0e <k_msleep.isra.0>
	while(1){
 8000564:	e7ef      	b.n	8000546 <DHTgrab+0x3a>
 8000566:	bf00      	nop
 8000568:	08003b9e 	.word	0x08003b9e
 800056c:	08003ba4 	.word	0x08003ba4

08000570 <main>:
void main(void){
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	4816      	ldr	r0, [pc, #88]	; (80005cc <main+0x5c>)
 8000574:	f001 fd0c 	bl	8001f90 <z_impl_device_get_binding>
 8000578:	4604      	mov	r4, r0
	lcdinit(lcd);
 800057a:	f7ff ff7b 	bl	8000474 <lcdinit>
		lcdcmdwrite(lcd,LCD_CMD_CLEAR);
 800057e:	2101      	movs	r1, #1
 8000580:	4620      	mov	r0, r4
 8000582:	f002 fb12 	bl	8002baa <lcdcmdwrite>
		lcdcursorposition(lcd, row, column); //input, row, column
 8000586:	2200      	movs	r2, #0
 8000588:	4611      	mov	r1, r2
 800058a:	4620      	mov	r0, r4
 800058c:	f002 fb23 	bl	8002bd6 <lcdcursorposition>
		for (int i = 0; i <sizeof(tempstr) -1; i++){
 8000590:	4e0f      	ldr	r6, [pc, #60]	; (80005d0 <main+0x60>)
 8000592:	2500      	movs	r5, #0
			lcddatawrite(lcd, tempstr[i]);
 8000594:	f816 1b01 	ldrb.w	r1, [r6], #1
 8000598:	4620      	mov	r0, r4
		for (int i = 0; i <sizeof(tempstr) -1; i++){
 800059a:	3501      	adds	r5, #1
			lcddatawrite(lcd, tempstr[i]);
 800059c:	f002 fb10 	bl	8002bc0 <lcddatawrite>
		for (int i = 0; i <sizeof(tempstr) -1; i++){
 80005a0:	2d05      	cmp	r5, #5
 80005a2:	d1f7      	bne.n	8000594 <main+0x24>
		lcdcursorposition(lcd, row, column);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	4620      	mov	r0, r4
 80005aa:	f002 fb14 	bl	8002bd6 <lcdcursorposition>
		for (int i = 0; i <sizeof(humistr) -1; i++){
 80005ae:	4e09      	ldr	r6, [pc, #36]	; (80005d4 <main+0x64>)
 80005b0:	2500      	movs	r5, #0
			lcddatawrite(lcd, humistr[i]);
 80005b2:	f816 1b01 	ldrb.w	r1, [r6], #1
 80005b6:	4620      	mov	r0, r4
		for (int i = 0; i <sizeof(humistr) -1; i++){
 80005b8:	3501      	adds	r5, #1
			lcddatawrite(lcd, humistr[i]);
 80005ba:	f002 fb01 	bl	8002bc0 <lcddatawrite>
		for (int i = 0; i <sizeof(humistr) -1; i++){
 80005be:	2d05      	cmp	r5, #5
 80005c0:	d1f7      	bne.n	80005b2 <main+0x42>
		k_msleep(500);
 80005c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c6:	f002 fb22 	bl	8002c0e <k_msleep.isra.0>
	while(1){
 80005ca:	e7d8      	b.n	800057e <main+0xe>
 80005cc:	08003b9e 	.word	0x08003b9e
 80005d0:	08003bb7 	.word	0x08003bb7
 80005d4:	08003bb1 	.word	0x08003bb1

080005d8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80005d8:	680b      	ldr	r3, [r1, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80005de:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <char_out+0xc>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4718      	bx	r3
 80005e4:	20000000 	.word	0x20000000

080005e8 <__printk_hook_install>:
	_char_out = fn;
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <__printk_hook_install+0x8>)
 80005ea:	6018      	str	r0, [r3, #0]
}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000

080005f4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80005f4:	b507      	push	{r0, r1, r2, lr}
 80005f6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80005f8:	2100      	movs	r1, #0
{
 80005fa:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 80005fc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80005fe:	4803      	ldr	r0, [pc, #12]	; (800060c <vprintk+0x18>)
 8000600:	a901      	add	r1, sp, #4
 8000602:	f000 f805 	bl	8000610 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8000606:	b003      	add	sp, #12
 8000608:	f85d fb04 	ldr.w	pc, [sp], #4
 800060c:	080005d9 	.word	0x080005d9

08000610 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8000610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000614:	b091      	sub	sp, #68	; 0x44
 8000616:	468b      	mov	fp, r1
 8000618:	9002      	str	r0, [sp, #8]
 800061a:	4692      	mov	sl, r2
 800061c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800061e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000620:	f89a 0000 	ldrb.w	r0, [sl]
 8000624:	b908      	cbnz	r0, 800062a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000626:	4628      	mov	r0, r5
 8000628:	e35f      	b.n	8000cea <cbvprintf+0x6da>
		if (*fp != '%') {
 800062a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 800062c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 8000630:	d007      	beq.n	8000642 <cbvprintf+0x32>
			OUTC('%');
 8000632:	9b02      	ldr	r3, [sp, #8]
 8000634:	4659      	mov	r1, fp
 8000636:	4798      	blx	r3
 8000638:	2800      	cmp	r0, #0
 800063a:	f2c0 8356 	blt.w	8000cea <cbvprintf+0x6da>
 800063e:	3501      	adds	r5, #1
			break;
 8000640:	e212      	b.n	8000a68 <cbvprintf+0x458>
		} state = {
 8000642:	2218      	movs	r2, #24
 8000644:	2100      	movs	r1, #0
 8000646:	a80a      	add	r0, sp, #40	; 0x28
 8000648:	f002 fb96 	bl	8002d78 <memset>
	if (*sp == '%') {
 800064c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000650:	2b25      	cmp	r3, #37	; 0x25
 8000652:	d078      	beq.n	8000746 <cbvprintf+0x136>
 8000654:	2200      	movs	r2, #0
 8000656:	4610      	mov	r0, r2
 8000658:	4696      	mov	lr, r2
 800065a:	4694      	mov	ip, r2
 800065c:	4616      	mov	r6, r2
 800065e:	4639      	mov	r1, r7
		switch (*sp) {
 8000660:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000664:	2b2b      	cmp	r3, #43	; 0x2b
 8000666:	f000 809d 	beq.w	80007a4 <cbvprintf+0x194>
 800066a:	f200 8094 	bhi.w	8000796 <cbvprintf+0x186>
 800066e:	2b20      	cmp	r3, #32
 8000670:	f000 809b 	beq.w	80007aa <cbvprintf+0x19a>
 8000674:	2b23      	cmp	r3, #35	; 0x23
 8000676:	f000 809b 	beq.w	80007b0 <cbvprintf+0x1a0>
 800067a:	b12e      	cbz	r6, 8000688 <cbvprintf+0x78>
 800067c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000680:	f046 0604 	orr.w	r6, r6, #4
 8000684:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000688:	f1bc 0f00 	cmp.w	ip, #0
 800068c:	d005      	beq.n	800069a <cbvprintf+0x8a>
 800068e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000692:	f046 0608 	orr.w	r6, r6, #8
 8000696:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 800069a:	f1be 0f00 	cmp.w	lr, #0
 800069e:	d005      	beq.n	80006ac <cbvprintf+0x9c>
 80006a0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80006a4:	f046 0610 	orr.w	r6, r6, #16
 80006a8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80006ac:	b128      	cbz	r0, 80006ba <cbvprintf+0xaa>
 80006ae:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80006b2:	f040 0020 	orr.w	r0, r0, #32
 80006b6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 80006ba:	b12a      	cbz	r2, 80006c8 <cbvprintf+0xb8>
 80006bc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80006c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 80006c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80006cc:	f002 0044 	and.w	r0, r2, #68	; 0x44
 80006d0:	2844      	cmp	r0, #68	; 0x44
 80006d2:	d103      	bne.n	80006dc <cbvprintf+0xcc>
		conv->flag_zero = false;
 80006d4:	f36f 1286 	bfc	r2, #6, #1
 80006d8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 80006dc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 80006e0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 80006e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006e6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 80006ea:	d17b      	bne.n	80007e4 <cbvprintf+0x1d4>
		conv->width_star = true;
 80006ec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80006f0:	f042 0201 	orr.w	r2, r2, #1
			++sp;
 80006f4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 80006f6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	2a2e      	cmp	r2, #46	; 0x2e
 80006fe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000702:	bf0c      	ite	eq
 8000704:	2101      	moveq	r1, #1
 8000706:	2100      	movne	r1, #0
 8000708:	f361 0241 	bfi	r2, r1, #1, #1
 800070c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 8000710:	d174      	bne.n	80007fc <cbvprintf+0x1ec>
	if (*sp == '*') {
 8000712:	785a      	ldrb	r2, [r3, #1]
 8000714:	2a2a      	cmp	r2, #42	; 0x2a
 8000716:	d06a      	beq.n	80007ee <cbvprintf+0x1de>
	++sp;
 8000718:	3301      	adds	r3, #1
	size_t val = 0;
 800071a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 800071c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 800071e:	4618      	mov	r0, r3
 8000720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000724:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000728:	2f09      	cmp	r7, #9
 800072a:	f240 808e 	bls.w	800084a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 800072e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 8000732:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 8000734:	f3c2 0040 	ubfx	r0, r2, #1, #1
 8000738:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 800073c:	f361 0241 	bfi	r2, r1, #1, #1
 8000740:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000744:	e05a      	b.n	80007fc <cbvprintf+0x1ec>
		conv->specifier = *sp++;
 8000746:	f10a 0702 	add.w	r7, sl, #2
 800074a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 800074e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000752:	07d9      	lsls	r1, r3, #31
 8000754:	f140 8149 	bpl.w	80009ea <cbvprintf+0x3da>
			width = va_arg(ap, int);
 8000758:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 800075c:	f1b9 0f00 	cmp.w	r9, #0
 8000760:	da07      	bge.n	8000772 <cbvprintf+0x162>
				conv->flag_dash = true;
 8000762:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000766:	f042 0204 	orr.w	r2, r2, #4
 800076a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 800076e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
 8000772:	075a      	lsls	r2, r3, #29
 8000774:	f140 8142 	bpl.w	80009fc <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
 8000778:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 800077c:	f1b8 0f00 	cmp.w	r8, #0
 8000780:	f280 8141 	bge.w	8000a06 <cbvprintf+0x3f6>
				conv->prec_present = false;
 8000784:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000788:	f36f 0341 	bfc	r3, #1, #1
 800078c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 8000790:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000794:	e137      	b.n	8000a06 <cbvprintf+0x3f6>
		switch (*sp) {
 8000796:	2b2d      	cmp	r3, #45	; 0x2d
 8000798:	d00c      	beq.n	80007b4 <cbvprintf+0x1a4>
 800079a:	2b30      	cmp	r3, #48	; 0x30
 800079c:	f47f af6d 	bne.w	800067a <cbvprintf+0x6a>
			conv->flag_zero = true;
 80007a0:	2201      	movs	r2, #1
	} while (loop);
 80007a2:	e75c      	b.n	800065e <cbvprintf+0x4e>
			conv->flag_plus = true;
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	e759      	b.n	800065e <cbvprintf+0x4e>
			conv->flag_space = true;
 80007aa:	f04f 0e01 	mov.w	lr, #1
 80007ae:	e756      	b.n	800065e <cbvprintf+0x4e>
			conv->flag_hash = true;
 80007b0:	2001      	movs	r0, #1
 80007b2:	e754      	b.n	800065e <cbvprintf+0x4e>
		switch (*sp) {
 80007b4:	2601      	movs	r6, #1
 80007b6:	e752      	b.n	800065e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
 80007b8:	fb0c 0202 	mla	r2, ip, r2, r0
 80007bc:	3a30      	subs	r2, #48	; 0x30
 80007be:	4633      	mov	r3, r6
 80007c0:	461e      	mov	r6, r3
 80007c2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80007c6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80007ca:	2f09      	cmp	r7, #9
 80007cc:	d9f4      	bls.n	80007b8 <cbvprintf+0x1a8>
	if (sp != wp) {
 80007ce:	4299      	cmp	r1, r3
 80007d0:	d093      	beq.n	80006fa <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80007d2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 80007d6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 80007d8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80007da:	f362 0141 	bfi	r1, r2, #1, #1
 80007de:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80007e2:	e78a      	b.n	80006fa <cbvprintf+0xea>
 80007e4:	460b      	mov	r3, r1
	size_t val = 0;
 80007e6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80007e8:	f04f 0c0a 	mov.w	ip, #10
 80007ec:	e7e8      	b.n	80007c0 <cbvprintf+0x1b0>
		conv->prec_star = true;
 80007ee:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80007f2:	f042 0204 	orr.w	r2, r2, #4
 80007f6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 80007fa:	3302      	adds	r3, #2
	switch (*sp) {
 80007fc:	461f      	mov	r7, r3
 80007fe:	f817 2b01 	ldrb.w	r2, [r7], #1
 8000802:	2a6c      	cmp	r2, #108	; 0x6c
 8000804:	d041      	beq.n	800088a <cbvprintf+0x27a>
 8000806:	d825      	bhi.n	8000854 <cbvprintf+0x244>
 8000808:	2a68      	cmp	r2, #104	; 0x68
 800080a:	d02b      	beq.n	8000864 <cbvprintf+0x254>
 800080c:	2a6a      	cmp	r2, #106	; 0x6a
 800080e:	d046      	beq.n	800089e <cbvprintf+0x28e>
 8000810:	2a4c      	cmp	r2, #76	; 0x4c
 8000812:	d04c      	beq.n	80008ae <cbvprintf+0x29e>
 8000814:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 8000816:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 800081a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 800081e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 8000822:	2a78      	cmp	r2, #120	; 0x78
 8000824:	f200 80d9 	bhi.w	80009da <cbvprintf+0x3ca>
 8000828:	2a57      	cmp	r2, #87	; 0x57
 800082a:	d84d      	bhi.n	80008c8 <cbvprintf+0x2b8>
 800082c:	2a41      	cmp	r2, #65	; 0x41
 800082e:	d003      	beq.n	8000838 <cbvprintf+0x228>
 8000830:	3a45      	subs	r2, #69	; 0x45
 8000832:	2a02      	cmp	r2, #2
 8000834:	f200 80d1 	bhi.w	80009da <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 8000838:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800083c:	2204      	movs	r2, #4
 800083e:	f362 0302 	bfi	r3, r2, #0, #3
 8000842:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 8000846:	2301      	movs	r3, #1
			break;
 8000848:	e09e      	b.n	8000988 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
 800084a:	fb06 2101 	mla	r1, r6, r1, r2
 800084e:	3930      	subs	r1, #48	; 0x30
 8000850:	4603      	mov	r3, r0
 8000852:	e764      	b.n	800071e <cbvprintf+0x10e>
	switch (*sp) {
 8000854:	2a74      	cmp	r2, #116	; 0x74
 8000856:	d026      	beq.n	80008a6 <cbvprintf+0x296>
 8000858:	2a7a      	cmp	r2, #122	; 0x7a
 800085a:	d1db      	bne.n	8000814 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
 800085c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000860:	2206      	movs	r2, #6
 8000862:	e00d      	b.n	8000880 <cbvprintf+0x270>
		if (*++sp == 'h') {
 8000864:	785a      	ldrb	r2, [r3, #1]
 8000866:	2a68      	cmp	r2, #104	; 0x68
 8000868:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800086c:	d106      	bne.n	800087c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
 800086e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000870:	f361 02c6 	bfi	r2, r1, #3, #4
 8000874:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 8000878:	1c9f      	adds	r7, r3, #2
 800087a:	e7cc      	b.n	8000816 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
 800087c:	4613      	mov	r3, r2
 800087e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 8000880:	f362 03c6 	bfi	r3, r2, #3, #4
 8000884:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 8000888:	e7c5      	b.n	8000816 <cbvprintf+0x206>
		if (*++sp == 'l') {
 800088a:	785a      	ldrb	r2, [r3, #1]
 800088c:	2a6c      	cmp	r2, #108	; 0x6c
 800088e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000892:	d101      	bne.n	8000898 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
 8000894:	2104      	movs	r1, #4
 8000896:	e7eb      	b.n	8000870 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
 8000898:	4613      	mov	r3, r2
 800089a:	2203      	movs	r2, #3
 800089c:	e7f0      	b.n	8000880 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
 800089e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80008a2:	2205      	movs	r2, #5
 80008a4:	e7ec      	b.n	8000880 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
 80008a6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80008aa:	2207      	movs	r2, #7
 80008ac:	e7e8      	b.n	8000880 <cbvprintf+0x270>
		conv->unsupported = true;
 80008ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80008b2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80008b6:	f023 0302 	bic.w	r3, r3, #2
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 80008c6:	e7a6      	b.n	8000816 <cbvprintf+0x206>
	switch (conv->specifier) {
 80008c8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 80008cc:	2920      	cmp	r1, #32
 80008ce:	f200 8084 	bhi.w	80009da <cbvprintf+0x3ca>
 80008d2:	a001      	add	r0, pc, #4	; (adr r0, 80008d8 <cbvprintf+0x2c8>)
 80008d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80008d8:	0800099d 	.word	0x0800099d
 80008dc:	080009db 	.word	0x080009db
 80008e0:	080009db 	.word	0x080009db
 80008e4:	080009db 	.word	0x080009db
 80008e8:	080009db 	.word	0x080009db
 80008ec:	080009db 	.word	0x080009db
 80008f0:	080009db 	.word	0x080009db
 80008f4:	080009db 	.word	0x080009db
 80008f8:	080009db 	.word	0x080009db
 80008fc:	08000839 	.word	0x08000839
 8000900:	080009db 	.word	0x080009db
 8000904:	0800099d 	.word	0x0800099d
 8000908:	0800095d 	.word	0x0800095d
 800090c:	08000839 	.word	0x08000839
 8000910:	08000839 	.word	0x08000839
 8000914:	08000839 	.word	0x08000839
 8000918:	080009db 	.word	0x080009db
 800091c:	0800095d 	.word	0x0800095d
 8000920:	080009db 	.word	0x080009db
 8000924:	080009db 	.word	0x080009db
 8000928:	080009db 	.word	0x080009db
 800092c:	080009db 	.word	0x080009db
 8000930:	080009a5 	.word	0x080009a5
 8000934:	0800099d 	.word	0x0800099d
 8000938:	080009c1 	.word	0x080009c1
 800093c:	080009db 	.word	0x080009db
 8000940:	080009db 	.word	0x080009db
 8000944:	080009c1 	.word	0x080009c1
 8000948:	080009db 	.word	0x080009db
 800094c:	0800099d 	.word	0x0800099d
 8000950:	080009db 	.word	0x080009db
 8000954:	080009db 	.word	0x080009db
 8000958:	0800099d 	.word	0x0800099d
		conv->specifier_cat = SPECIFIER_SINT;
 800095c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000960:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000962:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000966:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800096a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 800096c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 8000970:	bf02      	ittt	eq
 8000972:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 8000976:	f041 0101 	orreq.w	r1, r1, #1
 800097a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 800097e:	2a63      	cmp	r2, #99	; 0x63
 8000980:	d131      	bne.n	80009e6 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000982:	3b00      	subs	r3, #0
 8000984:	bf18      	it	ne
 8000986:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000988:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800098c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000990:	430b      	orrs	r3, r1
 8000992:	f363 0241 	bfi	r2, r3, #1, #1
 8000996:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 800099a:	e6d8      	b.n	800074e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 800099c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80009a0:	2002      	movs	r0, #2
 80009a2:	e7de      	b.n	8000962 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 80009a4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009a8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80009ac:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 80009b0:	2103      	movs	r1, #3
 80009b2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009b6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 80009b8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009bc:	4143      	adcs	r3, r0
 80009be:	e7e3      	b.n	8000988 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 80009c0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80009c4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 80009c6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80009ca:	f361 0202 	bfi	r2, r1, #0, #3
 80009ce:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	e7d6      	b.n	8000988 <cbvprintf+0x378>
		conv->invalid = true;
 80009da:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e7ce      	b.n	8000988 <cbvprintf+0x378>
		} else if (conv->width_present) {
 80009ea:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 80009ee:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80009f0:	bfb4      	ite	lt
 80009f2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 80009f6:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
 80009fa:	e6ba      	b.n	8000772 <cbvprintf+0x162>
		} else if (conv->prec_present) {
 80009fc:	079b      	lsls	r3, r3, #30
 80009fe:	f57f aec7 	bpl.w	8000790 <cbvprintf+0x180>
			precision = conv->prec_value;
 8000a02:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 8000a06:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 8000a0a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000a0c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000a10:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 8000a14:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000a18:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000a1a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000a1e:	d138      	bne.n	8000a92 <cbvprintf+0x482>
			switch (length_mod) {
 8000a20:	1ecb      	subs	r3, r1, #3
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d822      	bhi.n	8000a6c <cbvprintf+0x45c>
 8000a26:	e8df f003 	tbb	[pc, r3]
 8000a2a:	0903      	.short	0x0903
 8000a2c:	2109      	.short	0x2109
 8000a2e:	21          	.byte	0x21
 8000a2f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8000a30:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8000a34:	17da      	asrs	r2, r3, #31
 8000a36:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 8000a3a:	e006      	b.n	8000a4a <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 8000a3c:	3407      	adds	r4, #7
 8000a3e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8000a42:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000a46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 8000a4a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000a4e:	f013 0603 	ands.w	r6, r3, #3
 8000a52:	d056      	beq.n	8000b02 <cbvprintf+0x4f2>
			OUTS(sp, fp);
 8000a54:	9802      	ldr	r0, [sp, #8]
 8000a56:	463b      	mov	r3, r7
 8000a58:	4652      	mov	r2, sl
 8000a5a:	4659      	mov	r1, fp
 8000a5c:	f002 f93b 	bl	8002cd6 <outs>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	f2c0 8142 	blt.w	8000cea <cbvprintf+0x6da>
 8000a66:	4405      	add	r5, r0
			continue;
 8000a68:	46ba      	mov	sl, r7
 8000a6a:	e5d9      	b.n	8000620 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000a6c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000a70:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000a72:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000a76:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000a7a:	d105      	bne.n	8000a88 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
 8000a7c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 8000a80:	930a      	str	r3, [sp, #40]	; 0x28
 8000a82:	2300      	movs	r3, #0
 8000a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a86:	e7e0      	b.n	8000a4a <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
 8000a88:	2902      	cmp	r1, #2
 8000a8a:	d1de      	bne.n	8000a4a <cbvprintf+0x43a>
				value->sint = (short)value->sint;
 8000a8c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8000a90:	e7d0      	b.n	8000a34 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d123      	bne.n	8000ade <cbvprintf+0x4ce>
			switch (length_mod) {
 8000a96:	1ecb      	subs	r3, r1, #3
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d813      	bhi.n	8000ac4 <cbvprintf+0x4b4>
 8000a9c:	e8df f003 	tbb	[pc, r3]
 8000aa0:	120a0a03 	.word	0x120a0a03
 8000aa4:	12          	.byte	0x12
 8000aa5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8000aa6:	6822      	ldr	r2, [r4, #0]
 8000aa8:	920a      	str	r2, [sp, #40]	; 0x28
 8000aaa:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8000aac:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8000aae:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	e7ca      	b.n	8000a4a <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
 8000ab4:	1de0      	adds	r0, r4, #7
 8000ab6:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8000aba:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8000abe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8000ac2:	e7f5      	b.n	8000ab0 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
 8000ac4:	f854 3b04 	ldr.w	r3, [r4], #4
 8000ac8:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000aca:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 8000ad2:	d0d3      	beq.n	8000a7c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
 8000ad4:	2902      	cmp	r1, #2
 8000ad6:	d1b8      	bne.n	8000a4a <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
 8000ad8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8000adc:	e7d0      	b.n	8000a80 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d109      	bne.n	8000af6 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
 8000ae2:	1de3      	adds	r3, r4, #7
 8000ae4:	f023 0307 	bic.w	r3, r3, #7
 8000ae8:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8000aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000af4:	e7a9      	b.n	8000a4a <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000af6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000af8:	bf04      	itt	eq
 8000afa:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000afe:	930a      	streq	r3, [sp, #40]	; 0x28
 8000b00:	e7a3      	b.n	8000a4a <cbvprintf+0x43a>
		switch (conv->specifier) {
 8000b02:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000b06:	2878      	cmp	r0, #120	; 0x78
 8000b08:	d8ae      	bhi.n	8000a68 <cbvprintf+0x458>
 8000b0a:	2862      	cmp	r0, #98	; 0x62
 8000b0c:	d822      	bhi.n	8000b54 <cbvprintf+0x544>
 8000b0e:	2825      	cmp	r0, #37	; 0x25
 8000b10:	f43f ad8f 	beq.w	8000632 <cbvprintf+0x22>
 8000b14:	2858      	cmp	r0, #88	; 0x58
 8000b16:	d1a7      	bne.n	8000a68 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000b18:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000b22:	ab04      	add	r3, sp, #16
 8000b24:	aa0c      	add	r2, sp, #48	; 0x30
 8000b26:	f002 f890 	bl	8002c4a <encode_uint>
 8000b2a:	4682      	mov	sl, r0
			if (precision >= 0) {
 8000b2c:	f1b8 0f00 	cmp.w	r8, #0
 8000b30:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000b34:	db0c      	blt.n	8000b50 <cbvprintf+0x540>
				conv->flag_zero = false;
 8000b36:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000b3a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8000b3e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000b42:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8000b44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000b48:	d902      	bls.n	8000b50 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
 8000b4a:	eba8 0303 	sub.w	r3, r8, r3
 8000b4e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000b50:	4680      	mov	r8, r0
 8000b52:	e03d      	b.n	8000bd0 <cbvprintf+0x5c0>
		switch (conv->specifier) {
 8000b54:	3863      	subs	r0, #99	; 0x63
 8000b56:	2815      	cmp	r0, #21
 8000b58:	d886      	bhi.n	8000a68 <cbvprintf+0x458>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <cbvprintf+0x550>)
 8000b5c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000b60:	08000be1 	.word	0x08000be1
 8000b64:	08000c45 	.word	0x08000c45
 8000b68:	08000a69 	.word	0x08000a69
 8000b6c:	08000a69 	.word	0x08000a69
 8000b70:	08000a69 	.word	0x08000a69
 8000b74:	08000a69 	.word	0x08000a69
 8000b78:	08000c45 	.word	0x08000c45
 8000b7c:	08000a69 	.word	0x08000a69
 8000b80:	08000a69 	.word	0x08000a69
 8000b84:	08000a69 	.word	0x08000a69
 8000b88:	08000a69 	.word	0x08000a69
 8000b8c:	08000c9f 	.word	0x08000c9f
 8000b90:	08000c6d 	.word	0x08000c6d
 8000b94:	08000c71 	.word	0x08000c71
 8000b98:	08000a69 	.word	0x08000a69
 8000b9c:	08000a69 	.word	0x08000a69
 8000ba0:	08000bb9 	.word	0x08000bb9
 8000ba4:	08000a69 	.word	0x08000a69
 8000ba8:	08000c6d 	.word	0x08000c6d
 8000bac:	08000a69 	.word	0x08000a69
 8000bb0:	08000a69 	.word	0x08000a69
 8000bb4:	08000c6d 	.word	0x08000c6d
			if (precision >= 0) {
 8000bb8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8000bbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 8000bc0:	db0a      	blt.n	8000bd8 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	4650      	mov	r0, sl
 8000bc6:	f002 f8b7 	bl	8002d38 <strnlen>
			bpe = bps + len;
 8000bca:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 8000bce:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000bd0:	f1ba 0f00 	cmp.w	sl, #0
 8000bd4:	d10c      	bne.n	8000bf0 <cbvprintf+0x5e0>
 8000bd6:	e747      	b.n	8000a68 <cbvprintf+0x458>
				len = strlen(bps);
 8000bd8:	4650      	mov	r0, sl
 8000bda:	f002 f8a6 	bl	8002d2a <strlen>
 8000bde:	e7f4      	b.n	8000bca <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000be2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 8000be6:	2600      	movs	r6, #0
			bps = buf;
 8000be8:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
 8000bec:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
 8000bf0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 8000bf4:	b106      	cbz	r6, 8000bf8 <cbvprintf+0x5e8>
			nj_len += 1U;
 8000bf6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000bf8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000bfc:	06d0      	lsls	r0, r2, #27
 8000bfe:	d568      	bpl.n	8000cd2 <cbvprintf+0x6c2>
			nj_len += 2U;
 8000c00:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000c02:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000c04:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000c06:	bf48      	it	mi
 8000c08:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000c0a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000c0c:	bf48      	it	mi
 8000c0e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000c10:	f1b9 0f00 	cmp.w	r9, #0
 8000c14:	dd76      	ble.n	8000d04 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
 8000c16:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000c1a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 8000c1e:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000c22:	9303      	str	r3, [sp, #12]
 8000c24:	0753      	lsls	r3, r2, #29
 8000c26:	d46d      	bmi.n	8000d04 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
 8000c28:	0650      	lsls	r0, r2, #25
 8000c2a:	d561      	bpl.n	8000cf0 <cbvprintf+0x6e0>
					if (sign != 0) {
 8000c2c:	b146      	cbz	r6, 8000c40 <cbvprintf+0x630>
						OUTC(sign);
 8000c2e:	9b02      	ldr	r3, [sp, #8]
 8000c30:	4659      	mov	r1, fp
 8000c32:	4630      	mov	r0, r6
 8000c34:	4798      	blx	r3
 8000c36:	2800      	cmp	r0, #0
 8000c38:	db57      	blt.n	8000cea <cbvprintf+0x6da>
						sign = 0;
 8000c3a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000c3c:	3501      	adds	r5, #1
						sign = 0;
 8000c3e:	461e      	mov	r6, r3
					pad = '0';
 8000c40:	2330      	movs	r3, #48	; 0x30
 8000c42:	e056      	b.n	8000cf2 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
 8000c44:	071e      	lsls	r6, r3, #28
 8000c46:	d40f      	bmi.n	8000c68 <cbvprintf+0x658>
				sign = ' ';
 8000c48:	f013 0610 	ands.w	r6, r3, #16
 8000c4c:	bf18      	it	ne
 8000c4e:	2620      	movne	r6, #32
			sint = value->sint;
 8000c50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f6bf af5f 	bge.w	8000b18 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
 8000c5a:	4252      	negs	r2, r2
 8000c5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8000c64:	262d      	movs	r6, #45	; 0x2d
 8000c66:	e757      	b.n	8000b18 <cbvprintf+0x508>
				sign = '+';
 8000c68:	262b      	movs	r6, #43	; 0x2b
 8000c6a:	e7f1      	b.n	8000c50 <cbvprintf+0x640>
		switch (conv->specifier) {
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e753      	b.n	8000b18 <cbvprintf+0x508>
			if (value->ptr != NULL) {
 8000c70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000c72:	b340      	cbz	r0, 8000cc6 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c74:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	aa0c      	add	r2, sp, #48	; 0x30
 8000c7c:	ab04      	add	r3, sp, #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f001 ffe3 	bl	8002c4a <encode_uint>
				conv->altform_0c = true;
 8000c84:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8000c88:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000c8c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000c90:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c94:	4682      	mov	sl, r0
				conv->altform_0c = true;
 8000c96:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8000c9a:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000c9c:	e746      	b.n	8000b2c <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
 8000c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000ca0:	2907      	cmp	r1, #7
 8000ca2:	f63f aee1 	bhi.w	8000a68 <cbvprintf+0x458>
 8000ca6:	e8df f001 	tbb	[pc, r1]
 8000caa:	040c      	.short	0x040c
 8000cac:	08080c06 	.word	0x08080c06
 8000cb0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 8000cb2:	701d      	strb	r5, [r3, #0]
		break;
 8000cb4:	e6d8      	b.n	8000a68 <cbvprintf+0x458>
		*(short *)dp = (short)count;
 8000cb6:	801d      	strh	r5, [r3, #0]
		break;
 8000cb8:	e6d6      	b.n	8000a68 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 8000cba:	17ea      	asrs	r2, r5, #31
 8000cbc:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000cc0:	e6d2      	b.n	8000a68 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000cc2:	601d      	str	r5, [r3, #0]
		break;
 8000cc4:	e6d0      	b.n	8000a68 <cbvprintf+0x458>
			bps = "(nil)";
 8000cc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000d90 <cbvprintf+0x780>
 8000cca:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000ccc:	f10a 0805 	add.w	r8, sl, #5
 8000cd0:	e78e      	b.n	8000bf0 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
 8000cd2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000cd4:	bf48      	it	mi
 8000cd6:	3301      	addmi	r3, #1
 8000cd8:	e793      	b.n	8000c02 <cbvprintf+0x5f2>
					OUTC(pad);
 8000cda:	4618      	mov	r0, r3
 8000cdc:	9303      	str	r3, [sp, #12]
 8000cde:	4659      	mov	r1, fp
 8000ce0:	9b02      	ldr	r3, [sp, #8]
 8000ce2:	4798      	blx	r3
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	9b03      	ldr	r3, [sp, #12]
 8000ce8:	da04      	bge.n	8000cf4 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
 8000cea:	b011      	add	sp, #68	; 0x44
 8000cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	444d      	add	r5, r9
 8000cf4:	464a      	mov	r2, r9
				while (width-- > 0) {
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	eba5 0109 	sub.w	r1, r5, r9
 8000cfc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8000d00:	dceb      	bgt.n	8000cda <cbvprintf+0x6ca>
 8000d02:	460d      	mov	r5, r1
		if (sign != 0) {
 8000d04:	b136      	cbz	r6, 8000d14 <cbvprintf+0x704>
			OUTC(sign);
 8000d06:	9b02      	ldr	r3, [sp, #8]
 8000d08:	4659      	mov	r1, fp
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4798      	blx	r3
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	dbeb      	blt.n	8000cea <cbvprintf+0x6da>
 8000d12:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000d14:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000d18:	06d9      	lsls	r1, r3, #27
 8000d1a:	d401      	bmi.n	8000d20 <cbvprintf+0x710>
 8000d1c:	071a      	lsls	r2, r3, #28
 8000d1e:	d506      	bpl.n	8000d2e <cbvprintf+0x71e>
				OUTC('0');
 8000d20:	9b02      	ldr	r3, [sp, #8]
 8000d22:	4659      	mov	r1, fp
 8000d24:	2030      	movs	r0, #48	; 0x30
 8000d26:	4798      	blx	r3
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	dbde      	blt.n	8000cea <cbvprintf+0x6da>
 8000d2c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000d2e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000d32:	06db      	lsls	r3, r3, #27
 8000d34:	d507      	bpl.n	8000d46 <cbvprintf+0x736>
				OUTC(conv->specifier);
 8000d36:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000d3a:	9b02      	ldr	r3, [sp, #8]
 8000d3c:	4659      	mov	r1, fp
 8000d3e:	4798      	blx	r3
 8000d40:	2800      	cmp	r0, #0
 8000d42:	dbd2      	blt.n	8000cea <cbvprintf+0x6da>
 8000d44:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000d46:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000d48:	442e      	add	r6, r5
 8000d4a:	1b73      	subs	r3, r6, r5
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dc16      	bgt.n	8000d7e <cbvprintf+0x76e>
			OUTS(bps, bpe);
 8000d50:	9802      	ldr	r0, [sp, #8]
 8000d52:	4643      	mov	r3, r8
 8000d54:	4652      	mov	r2, sl
 8000d56:	4659      	mov	r1, fp
 8000d58:	f001 ffbd 	bl	8002cd6 <outs>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	dbc4      	blt.n	8000cea <cbvprintf+0x6da>
 8000d60:	4405      	add	r5, r0
		while (width > 0) {
 8000d62:	44a9      	add	r9, r5
 8000d64:	eba9 0305 	sub.w	r3, r9, r5
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f77f ae7d 	ble.w	8000a68 <cbvprintf+0x458>
			OUTC(' ');
 8000d6e:	9b02      	ldr	r3, [sp, #8]
 8000d70:	4659      	mov	r1, fp
 8000d72:	2020      	movs	r0, #32
 8000d74:	4798      	blx	r3
 8000d76:	2800      	cmp	r0, #0
 8000d78:	dbb7      	blt.n	8000cea <cbvprintf+0x6da>
 8000d7a:	3501      	adds	r5, #1
			--width;
 8000d7c:	e7f2      	b.n	8000d64 <cbvprintf+0x754>
				OUTC('0');
 8000d7e:	9b02      	ldr	r3, [sp, #8]
 8000d80:	4659      	mov	r1, fp
 8000d82:	2030      	movs	r0, #48	; 0x30
 8000d84:	4798      	blx	r3
 8000d86:	2800      	cmp	r0, #0
 8000d88:	dbaf      	blt.n	8000cea <cbvprintf+0x6da>
 8000d8a:	3501      	adds	r5, #1
 8000d8c:	e7dd      	b.n	8000d4a <cbvprintf+0x73a>
 8000d8e:	bf00      	nop
 8000d90:	08003bbd 	.word	0x08003bbd

08000d94 <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <st_stm32f4_init+0x34>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d9c:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000da4:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000da6:	f04f 0210 	mov.w	r2, #16
 8000daa:	f3ef 8311 	mrs	r3, BASEPRI
 8000dae:	f382 8812 	msr	BASEPRI_MAX, r2
 8000db2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <st_stm32f4_init+0x38>)
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <st_stm32f4_init+0x3c>)
 8000dc2:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	4770      	bx	lr
 8000dc8:	40023c00 	.word	0x40023c00
 8000dcc:	2000002c 	.word	0x2000002c
 8000dd0:	00f42400 	.word	0x00f42400

08000dd4 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8000dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 8000dd8:	4688      	mov	r8, r1
 8000dda:	b379      	cbz	r1, 8000e3c <stm32_dt_pinctrl_configure+0x68>
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 8000ddc:	2600      	movs	r6, #0
	port_device = gpio_ports[STM32_PORT(pin)];
 8000dde:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8000e48 <stm32_dt_pinctrl_configure+0x74>
 8000de2:	1d04      	adds	r4, r0, #4
	uint32_t func = 0;
 8000de4:	4635      	mov	r5, r6
		mux = pinctrl[i].pinmux;
 8000de6:	f854 0c04 	ldr.w	r0, [r4, #-4]
		} else {
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8000dea:	f010 0ff0 	tst.w	r0, #240	; 0xf0
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8000dee:	fa5f fb80 	uxtb.w	fp, r0
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8000df2:	d10e      	bne.n	8000e12 <stm32_dt_pinctrl_configure+0x3e>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8000df4:	6825      	ldr	r5, [r4, #0]
 8000df6:	f045 0520 	orr.w	r5, r5, #32
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8000dfa:	f3c0 2a07 	ubfx	sl, r0, #8, #8
	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8000dfe:	f3c0 3003 	ubfx	r0, r0, #12, #4
 8000e02:	280a      	cmp	r0, #10
 8000e04:	d81d      	bhi.n	8000e42 <stm32_dt_pinctrl_configure+0x6e>
	port_device = gpio_ports[STM32_PORT(pin)];
 8000e06:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8000e0a:	b93f      	cbnz	r7, 8000e1c <stm32_dt_pinctrl_configure+0x48>
		return -ENODEV;
 8000e0c:	f06f 0012 	mvn.w	r0, #18
 8000e10:	e015      	b.n	8000e3e <stm32_dt_pinctrl_configure+0x6a>
			func = STM32_MODER_ANALOG_MODE;
 8000e12:	f1bb 0f10 	cmp.w	fp, #16
 8000e16:	bf08      	it	eq
 8000e18:	2530      	moveq	r5, #48	; 0x30
 8000e1a:	e7ee      	b.n	8000dfa <stm32_dt_pinctrl_configure+0x26>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	f002 faa7 	bl	8003370 <z_device_ready>
 8000e22:	3408      	adds	r4, #8
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d0f1      	beq.n	8000e0c <stm32_dt_pinctrl_configure+0x38>
	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8000e28:	465b      	mov	r3, fp
 8000e2a:	462a      	mov	r2, r5
 8000e2c:	f00a 010f 	and.w	r1, sl, #15
 8000e30:	4638      	mov	r0, r7
	for (int i = 0; i < list_size; i++) {
 8000e32:	3601      	adds	r6, #1
	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8000e34:	f002 f883 	bl	8002f3e <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8000e38:	4546      	cmp	r6, r8
 8000e3a:	d1d4      	bne.n	8000de6 <stm32_dt_pinctrl_configure+0x12>
		return 0;
 8000e3c:	2000      	movs	r0, #0
			return ret;
		}
	}

	return 0;
}
 8000e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
 8000e42:	f06f 0015 	mvn.w	r0, #21
 8000e46:	e7fa      	b.n	8000e3e <stm32_dt_pinctrl_configure+0x6a>
 8000e48:	080039e4 	.word	0x080039e4

08000e4c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000e4c:	4901      	ldr	r1, [pc, #4]	; (8000e54 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000e4e:	2210      	movs	r2, #16
	str	r2, [r1]
 8000e50:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000e52:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000e54:	e000ed10 	.word	0xe000ed10

08000e58 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000e58:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000e5a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000e5c:	f380 8811 	msr	BASEPRI, r0
	isb
 8000e60:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000e64:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000e68:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000e6a:	b662      	cpsie	i
	isb
 8000e6c:	f3bf 8f6f 	isb	sy

	bx	lr
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000e74:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db08      	blt.n	8000e8c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f000 001f 	and.w	r0, r0, #31
 8000e80:	fa02 f000 	lsl.w	r0, r2, r0
 8000e84:	095b      	lsrs	r3, r3, #5
 8000e86:	4a02      	ldr	r2, [pc, #8]	; (8000e90 <arch_irq_enable+0x1c>)
 8000e88:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000e94:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000e96:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	bfa8      	it	ge
 8000e9a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8000e9e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	bfb8      	it	lt
 8000ea4:	4b06      	ldrlt	r3, [pc, #24]	; (8000ec0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000eaa:	bfac      	ite	ge
 8000eac:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	bfb4      	ite	lt
 8000eb8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed14 	.word	0xe000ed14

08000ec4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000ec4:	bf30      	wfi
    b z_SysNmiOnReset
 8000ec6:	f7ff bffd 	b.w	8000ec4 <z_SysNmiOnReset>
 8000eca:	bf00      	nop

08000ecc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8000ece:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <z_arm_prep_c+0x44>)
 8000ed2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000ed6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000edc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000ee0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ee4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000eec:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000ef4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000ef8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000efc:	f001 f8b8 	bl	8002070 <z_bss_zero>
	z_data_copy();
 8000f00:	f001 fc6a 	bl	80027d8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000f04:	f000 f9be 	bl	8001284 <z_arm_interrupt_init>
	z_cstart();
 8000f08:	f001 f8bc 	bl	8002084 <z_cstart>
 8000f0c:	08000000 	.word	0x08000000
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000f14:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f16:	490a      	ldr	r1, [pc, #40]	; (8000f40 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000f18:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f1a:	6809      	ldr	r1, [r1, #0]
 8000f1c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000f1e:	4909      	ldr	r1, [pc, #36]	; (8000f44 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000f20:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000f22:	684b      	ldr	r3, [r1, #4]
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	604b      	str	r3, [r1, #4]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f383 8811 	msr	BASEPRI, r3
 8000f30:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000f34:	6893      	ldr	r3, [r2, #8]
}
 8000f36:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000378 	.word	0x20000378
 8000f40:	08003b94 	.word	0x08003b94
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000f48:	4912      	ldr	r1, [pc, #72]	; (8000f94 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000f4a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000f4c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000f50:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000f52:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000f56:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000f5a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000f5c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000f60:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000f64:	4f0c      	ldr	r7, [pc, #48]	; (8000f98 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000f66:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000f6a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8000f6c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000f6e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000f70:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8000f72:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000f74:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000f76:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000f7a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000f7c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000f7e:	f000 f9c1 	bl	8001304 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000f82:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000f86:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000f8a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000f8e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000f92:	4770      	bx	lr
    ldr r1, =_kernel
 8000f94:	20000378 	.word	0x20000378
    ldr v4, =_SCS_ICSR
 8000f98:	e000ed04 	.word	0xe000ed04

08000f9c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000f9c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000fa0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000fa2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000fa6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000faa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000fac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000fb0:	2902      	cmp	r1, #2
    beq _oops
 8000fb2:	d0ff      	beq.n	8000fb4 <_oops>

08000fb4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000fb4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8000fb6:	f001 fea9 	bl	8002d0c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8000fba:	bd01      	pop	{r0, pc}

08000fbc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000fbc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000fc0:	9b00      	ldr	r3, [sp, #0]
 8000fc2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000fc6:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000fc8:	9b01      	ldr	r3, [sp, #4]
 8000fca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000fce:	9b02      	ldr	r3, [sp, #8]
 8000fd0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000fd4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fdc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000fe0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000fe4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000fe6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000fe8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8000fea:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	08002c37 	.word	0x08002c37

08000ff4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8000ff4:	4a09      	ldr	r2, [pc, #36]	; (800101c <z_check_thread_stack_fail+0x28>)
{
 8000ff6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8000ff8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8000ffa:	b170      	cbz	r0, 800101a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8000ffc:	f113 0f16 	cmn.w	r3, #22
 8001000:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001002:	d005      	beq.n	8001010 <z_check_thread_stack_fail+0x1c>
 8001004:	f1a0 0220 	sub.w	r2, r0, #32
 8001008:	429a      	cmp	r2, r3
 800100a:	d805      	bhi.n	8001018 <z_check_thread_stack_fail+0x24>
 800100c:	4283      	cmp	r3, r0
 800100e:	d203      	bcs.n	8001018 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8001010:	4281      	cmp	r1, r0
 8001012:	bf28      	it	cs
 8001014:	2000      	movcs	r0, #0
 8001016:	4770      	bx	lr
 8001018:	2000      	movs	r0, #0
}
 800101a:	4770      	bx	lr
 800101c:	20000378 	.word	0x20000378

08001020 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001020:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <arch_switch_to_main_thread+0x28>)
 8001024:	6098      	str	r0, [r3, #8]
{
 8001026:	460d      	mov	r5, r1
 8001028:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800102a:	f000 f96b 	bl	8001304 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800102e:	4620      	mov	r0, r4
 8001030:	f385 8809 	msr	PSP, r5
 8001034:	2100      	movs	r1, #0
 8001036:	b663      	cpsie	if
 8001038:	f381 8811 	msr	BASEPRI, r1
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	2200      	movs	r2, #0
 8001042:	2300      	movs	r3, #0
 8001044:	f001 fdf7 	bl	8002c36 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001048:	20000378 	.word	0x20000378

0800104c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800104c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800104e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001052:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001056:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800105a:	4904      	ldr	r1, [pc, #16]	; (800106c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800105c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800105e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001060:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001062:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001066:	4902      	ldr	r1, [pc, #8]	; (8001070 <_isr_wrapper+0x24>)
	bx r1
 8001068:	4708      	bx	r1
 800106a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800106c:	080036b4 	.word	0x080036b4
	ldr r1, =z_arm_int_exit
 8001070:	08001075 	.word	0x08001075

08001074 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001076:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001078:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 800107a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800107c:	d003      	beq.n	8001086 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800107e:	4903      	ldr	r1, [pc, #12]	; (800108c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001084:	600a      	str	r2, [r1, #0]

08001086 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001086:	4770      	bx	lr
	ldr r3, =_kernel
 8001088:	20000378 	.word	0x20000378
	ldr r1, =_SCS_ICSR
 800108c:	e000ed04 	.word	0xe000ed04

08001090 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8001090:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <mem_manage_fault+0x68>)
{
 8001094:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800109a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 800109c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800109e:	0790      	lsls	r0, r2, #30
 80010a0:	d519      	bpl.n	80010d6 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 80010a2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80010a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010a6:	0612      	lsls	r2, r2, #24
 80010a8:	d515      	bpl.n	80010d6 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 80010aa:	b119      	cbz	r1, 80010b4 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80010ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80010b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80010b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80010b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ba:	06d1      	lsls	r1, r2, #27
 80010bc:	d40e      	bmi.n	80010dc <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80010c0:	079a      	lsls	r2, r3, #30
 80010c2:	d40b      	bmi.n	80010dc <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80010c4:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80010c6:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <mem_manage_fault+0x68>)
 80010c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80010ca:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80010ce:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 80010d0:	2300      	movs	r3, #0
 80010d2:	7023      	strb	r3, [r4, #0]

	return reason;
}
 80010d4:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 80010d6:	f06f 0015 	mvn.w	r0, #21
 80010da:	e7eb      	b.n	80010b4 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <mem_manage_fault+0x68>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	051b      	lsls	r3, r3, #20
 80010e2:	d5ef      	bpl.n	80010c4 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff ff85 	bl	8000ff4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80010ea:	2800      	cmp	r0, #0
 80010ec:	d0ea      	beq.n	80010c4 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80010ee:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80010f2:	2002      	movs	r0, #2
 80010f4:	e7e7      	b.n	80010c6 <mem_manage_fault+0x36>
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <bus_fault.constprop.0+0x38>)
 80010fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001104:	0592      	lsls	r2, r2, #22
 8001106:	d508      	bpl.n	800111a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8001108:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800110a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800110c:	0412      	lsls	r2, r2, #16
 800110e:	d504      	bpl.n	800111a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8001110:	b118      	cbz	r0, 800111a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <bus_fault.constprop.0+0x38>)
 800111c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800111e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001120:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001122:	bf58      	it	pl
 8001124:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001126:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8001128:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800112a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001130:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001138:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <z_arm_fault+0x124>)
 800113c:	685b      	ldr	r3, [r3, #4]
{
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001146:	2600      	movs	r6, #0
 8001148:	f386 8811 	msr	BASEPRI, r6
 800114c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001150:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8001154:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8001158:	d111      	bne.n	800117e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800115a:	f002 010c 	and.w	r1, r2, #12
 800115e:	2908      	cmp	r1, #8
 8001160:	d00d      	beq.n	800117e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001162:	0711      	lsls	r1, r2, #28
 8001164:	d401      	bmi.n	800116a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8001166:	4605      	mov	r5, r0
			*nested_exc = true;
 8001168:	2601      	movs	r6, #1
	*recoverable = false;
 800116a:	2200      	movs	r2, #0
	switch (fault) {
 800116c:	3b03      	subs	r3, #3
	*recoverable = false;
 800116e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8001172:	2b03      	cmp	r3, #3
 8001174:	d86b      	bhi.n	800124e <z_arm_fault+0x116>
 8001176:	e8df f003 	tbb	[pc, r3]
 800117a:	5504      	.short	0x5504
 800117c:	5d59      	.short	0x5d59
		return NULL;
 800117e:	4635      	mov	r5, r6
 8001180:	e7f3      	b.n	800116a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001182:	4b36      	ldr	r3, [pc, #216]	; (800125c <z_arm_fault+0x124>)
 8001184:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001186:	f014 0402 	ands.w	r4, r4, #2
 800118a:	d160      	bne.n	800124e <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800118c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118e:	2a00      	cmp	r2, #0
 8001190:	db15      	blt.n	80011be <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001194:	0052      	lsls	r2, r2, #1
 8001196:	d512      	bpl.n	80011be <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
 8001198:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800119a:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 800119e:	f64d 7202 	movw	r2, #57090	; 0xdf02
 80011a2:	4291      	cmp	r1, r2
 80011a4:	d00a      	beq.n	80011bc <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
 80011a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80011aa:	b30a      	cbz	r2, 80011f0 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
 80011ac:	f10d 0207 	add.w	r2, sp, #7
 80011b0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff ff6c 	bl	8001090 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 80011b8:	4604      	mov	r4, r0
		break;
 80011ba:	e000      	b.n	80011be <z_arm_fault+0x86>
			reason = esf->basic.r0;
 80011bc:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80011be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011c2:	b99b      	cbnz	r3, 80011ec <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80011c4:	2220      	movs	r2, #32
 80011c6:	4629      	mov	r1, r5
 80011c8:	a802      	add	r0, sp, #8
 80011ca:	f001 fdca 	bl	8002d62 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80011ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011d0:	2e00      	cmp	r6, #0
 80011d2:	d03e      	beq.n	8001252 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80011d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011d8:	b922      	cbnz	r2, 80011e4 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80011da:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80011de:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80011e2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80011e4:	a902      	add	r1, sp, #8
 80011e6:	4620      	mov	r0, r4
 80011e8:	f001 fd8e 	bl	8002d08 <z_arm_fatal_error>
}
 80011ec:	b00a      	add	sp, #40	; 0x28
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 80011f0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80011f4:	b12a      	cbz	r2, 8001202 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
 80011f6:	f10d 0107 	add.w	r1, sp, #7
 80011fa:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80011fc:	f7ff ff7e 	bl	80010fc <bus_fault.constprop.0>
 8001200:	e7da      	b.n	80011b8 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
 8001202:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001204:	b292      	uxth	r2, r2
 8001206:	2a00      	cmp	r2, #0
 8001208:	d0d9      	beq.n	80011be <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800120a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800120c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800120e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001218:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800121c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
 8001222:	e7cc      	b.n	80011be <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
 8001224:	f10d 0207 	add.w	r2, sp, #7
 8001228:	2100      	movs	r1, #0
 800122a:	e7c2      	b.n	80011b2 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
 800122c:	f10d 0107 	add.w	r1, sp, #7
 8001230:	2000      	movs	r0, #0
 8001232:	e7e3      	b.n	80011fc <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <z_arm_fault+0x124>)
 8001236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800123a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800123c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800123e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001244:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001248:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800124e:	2400      	movs	r4, #0
 8001250:	e7b5      	b.n	80011be <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001252:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	e7c2      	b.n	80011e2 <z_arm_fault+0xaa>
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001260:	4a02      	ldr	r2, [pc, #8]	; (800126c <z_arm_fault_init+0xc>)
 8001262:	6953      	ldr	r3, [r2, #20]
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001270:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001274:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001278:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800127a:	4672      	mov	r2, lr
	bl z_arm_fault
 800127c:	f7ff ff5c 	bl	8001138 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001280:	bd01      	pop	{r0, pc}
 8001282:	bf00      	nop

08001284 <z_arm_interrupt_init>:
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	2110      	movs	r1, #16
 800128a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800128c:	3301      	adds	r3, #1
 800128e:	2b56      	cmp	r3, #86	; 0x56
 8001290:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001294:	d1f9      	bne.n	800128a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100

0800129c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800129c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800129e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80012a4:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80012a8:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80012aa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80012ae:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80012b2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80012b4:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80012b6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80012ba:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80012be:	f7ff fe05 	bl	8000ecc <z_arm_prep_c>
 80012c2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80012c4:	20000b60 	.word	0x20000b60

080012c8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <z_impl_k_thread_abort+0x1c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4283      	cmp	r3, r0
 80012ce:	d107      	bne.n	80012e0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012d0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80012d4:	b123      	cbz	r3, 80012e0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <z_impl_k_thread_abort+0x20>)
 80012d8:	6853      	ldr	r3, [r2, #4]
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012de:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 80012e0:	f001 ba28 	b.w	8002734 <z_thread_abort>
 80012e4:	20000378 	.word	0x20000378
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <z_arm_configure_static_mpu_regions+0xc>)
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <z_arm_configure_static_mpu_regions+0x10>)
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <z_arm_configure_static_mpu_regions+0x14>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	f000 b86e 	b.w	80013d4 <arm_core_mpu_configure_static_mpu_regions>
 80012f8:	20020000 	.word	0x20020000
 80012fc:	20000000 	.word	0x20000000
 8001300:	08003a10 	.word	0x08003a10

08001304 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8001304:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8001308:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 800130a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800130e:	2120      	movs	r1, #32
 8001310:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8001314:	4618      	mov	r0, r3
 8001316:	2101      	movs	r1, #1
 8001318:	f000 b866 	b.w	80013e8 <arm_core_mpu_configure_dynamic_mpu_regions>
 800131c:	20000220 	.word	0x20000220
 8001320:	150b0000 	.word	0x150b0000

08001324 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8001326:	4f1f      	ldr	r7, [pc, #124]	; (80013a4 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8001328:	2600      	movs	r6, #0
 800132a:	428e      	cmp	r6, r1
 800132c:	db01      	blt.n	8001332 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800132e:	4610      	mov	r0, r2
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8001332:	6844      	ldr	r4, [r0, #4]
 8001334:	b39c      	cbz	r4, 800139e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 8001336:	b153      	cbz	r3, 800134e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8001338:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800133c:	ea14 0f0c 	tst.w	r4, ip
 8001340:	d118      	bne.n	8001374 <mpu_configure_regions+0x50>
		&&
 8001342:	2c1f      	cmp	r4, #31
 8001344:	d916      	bls.n	8001374 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 8001346:	6805      	ldr	r5, [r0, #0]
		&&
 8001348:	ea1c 0f05 	tst.w	ip, r5
 800134c:	d112      	bne.n	8001374 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800134e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8001350:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8001352:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8001356:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 8001358:	d90f      	bls.n	800137a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 800135a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800135e:	d80e      	bhi.n	800137e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8001360:	3c01      	subs	r4, #1
 8001362:	fab4 f484 	clz	r4, r4
 8001366:	f1c4 041f 	rsb	r4, r4, #31
 800136a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 800136c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800136e:	ea4c 0404 	orr.w	r4, ip, r4
 8001372:	d906      	bls.n	8001382 <mpu_configure_regions+0x5e>
			return -EINVAL;
 8001374:	f06f 0215 	mvn.w	r2, #21
 8001378:	e7d9      	b.n	800132e <mpu_configure_regions+0xa>
		return REGION_32B;
 800137a:	2408      	movs	r4, #8
 800137c:	e7f6      	b.n	800136c <mpu_configure_regions+0x48>
		return REGION_4G;
 800137e:	243e      	movs	r4, #62	; 0x3e
 8001380:	e7f4      	b.n	800136c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001382:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001386:	4315      	orrs	r5, r2
 8001388:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800138c:	f044 0401 	orr.w	r4, r4, #1
 8001390:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001394:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8001398:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800139a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 800139e:	3601      	adds	r6, #1
 80013a0:	300c      	adds	r0, #12
 80013a2:	e7c2      	b.n	800132a <mpu_configure_regions+0x6>
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <arm_core_mpu_enable+0x14>)
 80013aa:	2205      	movs	r2, #5
 80013ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80013b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013b4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80013c0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <arm_core_mpu_disable+0x10>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 80013d4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80013d6:	4c03      	ldr	r4, [pc, #12]	; (80013e4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80013d8:	2301      	movs	r3, #1
 80013da:	7822      	ldrb	r2, [r4, #0]
 80013dc:	f7ff ffa2 	bl	8001324 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80013e0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 80013e2:	bd10      	pop	{r4, pc}
 80013e4:	200003ac 	.word	0x200003ac

080013e8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 80013e8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 80013ec:	2300      	movs	r3, #0
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	f7ff ff98 	bl	8001324 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80013f4:	f110 0f16 	cmn.w	r0, #22
 80013f8:	d002      	beq.n	8001400 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80013fa:	4a06      	ldr	r2, [pc, #24]	; (8001414 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80013fc:	2807      	cmp	r0, #7
 80013fe:	dd00      	ble.n	8001402 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8001400:	bd08      	pop	{r3, pc}
 8001402:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8001406:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800140a:	3001      	adds	r0, #1
 800140c:	e7f6      	b.n	80013fc <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 800140e:	bf00      	nop
 8001410:	200003ac 	.word	0x200003ac
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8001418:	4914      	ldr	r1, [pc, #80]	; (800146c <z_arm_mpu_init+0x54>)
 800141a:	6808      	ldr	r0, [r1, #0]
 800141c:	2808      	cmp	r0, #8
{
 800141e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8001420:	d821      	bhi.n	8001466 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001422:	f7ff ffcd 	bl	80013c0 <arm_core_mpu_disable>
 8001426:	4c12      	ldr	r4, [pc, #72]	; (8001470 <z_arm_mpu_init+0x58>)
 8001428:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800142a:	2200      	movs	r2, #0
 800142c:	4290      	cmp	r0, r2
 800142e:	f101 010c 	add.w	r1, r1, #12
 8001432:	d105      	bne.n	8001440 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <z_arm_mpu_init+0x5c>)
 8001436:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8001438:	f7ff ffb6 	bl	80013a8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800143c:	2000      	movs	r0, #0
}
 800143e:	bd10      	pop	{r4, pc}
 8001440:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001444:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8001448:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 800144c:	4313      	orrs	r3, r2
 800144e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001452:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001462:	3201      	adds	r2, #1
 8001464:	e7e2      	b.n	800142c <z_arm_mpu_init+0x14>
		return -1;
 8001466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146a:	e7e8      	b.n	800143e <z_arm_mpu_init+0x26>
 800146c:	08003a1c 	.word	0x08003a1c
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	200003ac 	.word	0x200003ac

08001478 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8001478:	4b01      	ldr	r3, [pc, #4]	; (8001480 <__stdout_hook_install+0x8>)
 800147a:	6018      	str	r0, [r3, #0]
}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000004 	.word	0x20000004

08001484 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8001484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001488:	4f0d      	ldr	r7, [pc, #52]	; (80014c0 <__stm32_exti_isr.isra.0+0x3c>)
 800148a:	4604      	mov	r4, r0
 800148c:	460e      	mov	r6, r1
 800148e:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001490:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001494:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8001498:	42b4      	cmp	r4, r6
 800149a:	db01      	blt.n	80014a0 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 800149c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014a0:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80014a2:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 80014a6:	ea33 0202 	bics.w	r2, r3, r2
 80014aa:	d107      	bne.n	80014bc <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80014ac:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 80014ae:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80014b2:	b11b      	cbz	r3, 80014bc <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 80014b4:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 80014b8:	4620      	mov	r0, r4
 80014ba:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80014bc:	3401      	adds	r4, #1
 80014be:	e7eb      	b.n	8001498 <__stm32_exti_isr.isra.0+0x14>
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 80014c6:	2301      	movs	r3, #1
 80014c8:	6811      	ldr	r1, [r2, #0]
 80014ca:	4083      	lsls	r3, r0
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <stm32_exti_enable+0x18>)
 80014d2:	5618      	ldrsb	r0, [r3, r0]
 80014d4:	f7ff bcce 	b.w	8000e74 <arch_irq_enable>
 80014d8:	40013c00 	.word	0x40013c00
 80014dc:	08003bf0 	.word	0x08003bf0

080014e0 <stm32_exti_disable>:
	if (line < 32) {
 80014e0:	281f      	cmp	r0, #31
 80014e2:	dc07      	bgt.n	80014f4 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80014e4:	4904      	ldr	r1, [pc, #16]	; (80014f8 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 80014e6:	2201      	movs	r2, #1
 80014e8:	680b      	ldr	r3, [r1, #0]
 80014ea:	fa02 f000 	lsl.w	r0, r2, r0
 80014ee:	ea23 0000 	bic.w	r0, r3, r0
 80014f2:	6008      	str	r0, [r1, #0]
}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40013c00 	.word	0x40013c00

080014fc <stm32_exti_trigger>:
	switch (trigger) {
 80014fc:	2903      	cmp	r1, #3
 80014fe:	d80f      	bhi.n	8001520 <stm32_exti_trigger+0x24>
 8001500:	e8df f001 	tbb	[pc, r1]
 8001504:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800150a:	2201      	movs	r2, #1
 800150c:	6899      	ldr	r1, [r3, #8]
 800150e:	fa02 f000 	lsl.w	r0, r2, r0
 8001512:	ea21 0100 	bic.w	r1, r1, r0
 8001516:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 800151e:	60d8      	str	r0, [r3, #12]
}
 8001520:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001522:	2301      	movs	r3, #1
 8001524:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <stm32_exti_trigger+0x64>)
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	4302      	orrs	r2, r0
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e7f2      	b.n	8001518 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8001532:	2301      	movs	r3, #1
 8001534:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <stm32_exti_trigger+0x64>)
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	4302      	orrs	r2, r0
 800153e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	ea22 0000 	bic.w	r0, r2, r0
 8001546:	6098      	str	r0, [r3, #8]
}
 8001548:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800154a:	2301      	movs	r3, #1
 800154c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <stm32_exti_trigger+0x64>)
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	4302      	orrs	r2, r0
 8001556:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	4310      	orrs	r0, r2
 800155c:	e7df      	b.n	800151e <stm32_exti_trigger+0x22>
 800155e:	bf00      	nop
 8001560:	40013c00 	.word	0x40013c00

08001564 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <stm32_exti_set_callback+0x20>)
{
 8001566:	b510      	push	{r4, lr}
 8001568:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800156a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800156e:	b928      	cbnz	r0, 800157c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001570:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001574:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001578:	605a      	str	r2, [r3, #4]

	return 0;
}
 800157a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800157c:	f06f 000f 	mvn.w	r0, #15
 8001580:	e7fb      	b.n	800157a <stm32_exti_set_callback+0x16>
 8001582:	bf00      	nop
 8001584:	2000022c 	.word	0x2000022c

08001588 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <stm32_exti_unset_callback+0x10>)
 800158a:	2200      	movs	r2, #0
 800158c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001590:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001594:	605a      	str	r2, [r3, #4]
}
 8001596:	4770      	bx	lr
 8001598:	2000022c 	.word	0x2000022c

0800159c <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 800159c:	680b      	ldr	r3, [r1, #0]
{
 800159e:	b084      	sub	sp, #16
	switch (pclken->bus) {
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d82d      	bhi.n	8001600 <stm32_clock_control_on+0x64>
 80015a4:	e8df f003 	tbb	[pc, r3]
 80015a8:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015ac:	4a16      	ldr	r2, [pc, #88]	; (8001608 <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80015ae:	684b      	ldr	r3, [r1, #4]
 80015b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80015b2:	4319      	orrs	r1, r3
 80015b4:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015b8:	4013      	ands	r3, r2
 80015ba:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80015bc:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80015be:	2000      	movs	r0, #0
}
 80015c0:	b004      	add	sp, #16
 80015c2:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015c4:	4a10      	ldr	r2, [pc, #64]	; (8001608 <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80015c6:	684b      	ldr	r3, [r1, #4]
 80015c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80015ca:	4319      	orrs	r1, r3
 80015cc:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015d0:	4013      	ands	r3, r2
 80015d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015d4:	9b01      	ldr	r3, [sp, #4]
 80015d6:	e7f2      	b.n	80015be <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80015da:	684b      	ldr	r3, [r1, #4]
 80015dc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80015de:	4319      	orrs	r1, r3
 80015e0:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015e4:	4013      	ands	r3, r2
 80015e6:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80015e8:	9b02      	ldr	r3, [sp, #8]
 80015ea:	e7e8      	b.n	80015be <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80015ee:	684b      	ldr	r3, [r1, #4]
 80015f0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80015f2:	4319      	orrs	r1, r3
 80015f4:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015f8:	4013      	ands	r3, r2
 80015fa:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80015fc:	9b03      	ldr	r3, [sp, #12]
 80015fe:	e7de      	b.n	80015be <stm32_clock_control_on+0x22>
	switch (pclken->bus) {
 8001600:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001604:	e7dc      	b.n	80015c0 <stm32_clock_control_on+0x24>
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 800160c:	680b      	ldr	r3, [r1, #0]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d820      	bhi.n	8001654 <stm32_clock_control_off+0x48>
 8001612:	e8df f003 	tbb	[pc, r3]
 8001616:	0a02      	.short	0x0a02
 8001618:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <stm32_clock_control_off+0x50>)
 800161c:	6849      	ldr	r1, [r1, #4]
 800161e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001620:	ea23 0301 	bic.w	r3, r3, r1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8001626:	2000      	movs	r0, #0
}
 8001628:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <stm32_clock_control_off+0x50>)
 800162c:	6849      	ldr	r1, [r1, #4]
 800162e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001630:	ea23 0301 	bic.w	r3, r3, r1
 8001634:	6353      	str	r3, [r2, #52]	; 0x34
 8001636:	e7f6      	b.n	8001626 <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8001638:	4a08      	ldr	r2, [pc, #32]	; (800165c <stm32_clock_control_off+0x50>)
 800163a:	6849      	ldr	r1, [r1, #4]
 800163c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800163e:	ea23 0301 	bic.w	r3, r3, r1
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	e7ef      	b.n	8001626 <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <stm32_clock_control_off+0x50>)
 8001648:	6849      	ldr	r1, [r1, #4]
 800164a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800164c:	ea23 0301 	bic.w	r3, r3, r1
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	e7e8      	b.n	8001626 <stm32_clock_control_off+0x1a>
	switch (pclken->bus) {
 8001654:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <stm32_clock_control_get_subsys_rate+0x24>)
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001662:	6809      	ldr	r1, [r1, #0]
	uint32_t ahb_clock = SystemCoreClock;
 8001664:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8001666:	2906      	cmp	r1, #6
 8001668:	d809      	bhi.n	800167e <stm32_clock_control_get_subsys_rate+0x1e>
 800166a:	e8df f001 	tbb	[pc, r1]
 800166e:	0505      	.short	0x0505
 8001670:	08080504 	.word	0x08080504
 8001674:	05          	.byte	0x05
 8001675:	00          	.byte	0x00
	return clock / prescaler;
 8001676:	085b      	lsrs	r3, r3, #1
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8001678:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800167a:	2000      	movs	r0, #0
		break;
 800167c:	4770      	bx	lr
	switch (pclken->bus) {
 800167e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8001682:	4770      	bx	lr
 8001684:	2000002c 	.word	0x2000002c

08001688 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8001688:	b530      	push	{r4, r5, lr}
 800168a:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800168c:	2300      	movs	r3, #0
 800168e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001692:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8001696:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001698:	f000 f838 	bl	800170c <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 800169c:	a803      	add	r0, sp, #12
 800169e:	f001 fbe8 	bl	8002e72 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <stm32_clock_control_init+0x7c>)
 80016a4:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80016a6:	0791      	lsls	r1, r2, #30
 80016a8:	d406      	bmi.n	80016b8 <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80016b2:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80016b4:	0792      	lsls	r2, r2, #30
 80016b6:	d5fc      	bpl.n	80016b2 <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016b8:	4c12      	ldr	r4, [pc, #72]	; (8001704 <stm32_clock_control_init+0x7c>)
 80016ba:	68a3      	ldr	r3, [r4, #8]
 80016bc:	f023 0303 	bic.w	r3, r3, #3
 80016c0:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016c2:	68a3      	ldr	r3, [r4, #8]
 80016c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c8:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016ca:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80016cc:	f015 050c 	ands.w	r5, r5, #12
 80016d0:	d1fb      	bne.n	80016ca <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80016d2:	6823      	ldr	r3, [r4, #0]
		LL_RCC_HSE_EnableDiv2();
	}
#endif

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <stm32_clock_control_init+0x80>)
 80016d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016da:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 80016dc:	6863      	ldr	r3, [r4, #4]
 80016de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80016e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016e6:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 80016e8:	aa03      	add	r2, sp, #12
 80016ea:	466b      	mov	r3, sp
 80016ec:	4629      	mov	r1, r5
 80016ee:	f000 fbe9 	bl	8001ec4 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 80016fa:	f001 fbc1 	bl	8002e80 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80016fe:	4628      	mov	r0, r5
 8001700:	b007      	add	sp, #28
 8001702:	bd30      	pop	{r4, r5, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	007a1200 	.word	0x007a1200

0800170c <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <config_enable_default_clocks+0x1c>)
 800170e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001710:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8001718:	b082      	sub	sp, #8
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001720:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8001722:	b002      	add	sp, #8
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800172c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <uart_console_init+0x24>)
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <uart_console_init+0x28>)
 8001732:	6018      	str	r0, [r3, #0]
 8001734:	f001 fe1c 	bl	8003370 <z_device_ready>
 8001738:	b138      	cbz	r0, 800174a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <uart_console_init+0x2c>)
 800173c:	f7ff fe9c 	bl	8001478 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <uart_console_init+0x2c>)
 8001742:	f7fe ff51 	bl	80005e8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8001746:	2000      	movs	r0, #0
}
 8001748:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800174a:	f06f 0012 	mvn.w	r0, #18
 800174e:	e7fb      	b.n	8001748 <uart_console_init+0x1c>
 8001750:	200002e4 	.word	0x200002e4
 8001754:	08003684 	.word	0x08003684
 8001758:	0800175d 	.word	0x0800175d

0800175c <console_out>:
	if ('\n' == c) {
 800175c:	280a      	cmp	r0, #10
{
 800175e:	b538      	push	{r3, r4, r5, lr}
 8001760:	4d07      	ldr	r5, [pc, #28]	; (8001780 <console_out+0x24>)
 8001762:	4604      	mov	r4, r0
	if ('\n' == c) {
 8001764:	d104      	bne.n	8001770 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 8001766:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001768:	6883      	ldr	r3, [r0, #8]
 800176a:	210d      	movs	r1, #13
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8001770:	6828      	ldr	r0, [r5, #0]
 8001772:	6883      	ldr	r3, [r0, #8]
 8001774:	b2e1      	uxtb	r1, r4
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4798      	blx	r3
}
 800177a:	4620      	mov	r0, r4
 800177c:	bd38      	pop	{r3, r4, r5, pc}
 800177e:	bf00      	nop
 8001780:	200002e4 	.word	0x200002e4

08001784 <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	4605      	mov	r5, r0
 8001788:	4c07      	ldr	r4, [pc, #28]	; (80017a8 <clock_control_on.constprop.0+0x24>)
 800178a:	4620      	mov	r0, r4
 800178c:	f001 fdf0 	bl	8003370 <z_device_ready>
 8001790:	b130      	cbz	r0, 80017a0 <clock_control_on.constprop.0+0x1c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	4629      	mov	r1, r5
 8001796:	4620      	mov	r0, r4
 8001798:	681b      	ldr	r3, [r3, #0]
}
 800179a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 800179e:	4718      	bx	r3
}
 80017a0:	f06f 0012 	mvn.w	r0, #18
 80017a4:	bd70      	pop	{r4, r5, r6, pc}
 80017a6:	bf00      	nop
 80017a8:	08003594 	.word	0x08003594

080017ac <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 80017ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017ae:	460c      	mov	r4, r1
 80017b0:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 80017b2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 80017b6:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80017b8:	6902      	ldr	r2, [r0, #16]
{
 80017ba:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80017bc:	d123      	bne.n	8001806 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80017be:	f004 0303 	and.w	r3, r4, #3
 80017c2:	3304      	adds	r3, #4
 80017c4:	009a      	lsls	r2, r3, #2
 80017c6:	230f      	movs	r3, #15
 80017c8:	4093      	lsls	r3, r2
 80017ca:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4933      	ldr	r1, [pc, #204]	; (80018a0 <gpio_stm32_pin_interrupt_configure+0xf4>)
 80017d2:	3202      	adds	r2, #2
 80017d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017d8:	0c19      	lsrs	r1, r3, #16
 80017da:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d109      	bne.n	8001802 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff fe76 	bl	80014e0 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff fec7 	bl	8001588 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80017fa:	2100      	movs	r1, #0
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff fe7d 	bl	80014fc <stm32_exti_trigger>
	int err = 0;
 8001802:	2500      	movs	r5, #0
 8001804:	e03e      	b.n	8001884 <gpio_stm32_pin_interrupt_configure+0xd8>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001806:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800180a:	d042      	beq.n	8001892 <gpio_stm32_pin_interrupt_configure+0xe6>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800180c:	4925      	ldr	r1, [pc, #148]	; (80018a4 <gpio_stm32_pin_interrupt_configure+0xf8>)
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fea8 	bl	8001564 <stm32_exti_set_callback>
 8001814:	4605      	mov	r5, r0
 8001816:	2800      	cmp	r0, #0
 8001818:	d13e      	bne.n	8001898 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <gpio_stm32_pin_interrupt_configure+0xfc>)
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 800181c:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 800181e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001822:	466b      	mov	r3, sp
 8001824:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffab 	bl	8001784 <clock_control_on.constprop.0>
	if (ret != 0) {
 800182e:	b9c0      	cbnz	r0, 8001862 <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001830:	f004 0103 	and.w	r1, r4, #3
 8001834:	3104      	adds	r1, #4
 8001836:	008b      	lsls	r3, r1, #2
 8001838:	210f      	movs	r1, #15
 800183a:	4099      	lsls	r1, r3
 800183c:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001840:	b2ca      	uxtb	r2, r1
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001848:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800184c:	0c0b      	lsrs	r3, r1, #16
 800184e:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 800185c:	409f      	lsls	r7, r3
 800185e:	430f      	orrs	r7, r1
 8001860:	6097      	str	r7, [r2, #8]

	switch (trig) {
 8001862:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8001866:	d010      	beq.n	800188a <gpio_stm32_pin_interrupt_configure+0xde>
 8001868:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 800186c:	d00f      	beq.n	800188e <gpio_stm32_pin_interrupt_configure+0xe2>
 800186e:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8001872:	bf14      	ite	ne
 8001874:	2100      	movne	r1, #0
 8001876:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff fe3f 	bl	80014fc <stm32_exti_trigger>

	stm32_exti_enable(pin);
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff fe20 	bl	80014c4 <stm32_exti_enable>

exit:
	return err;
}
 8001884:	4628      	mov	r0, r5
 8001886:	b003      	add	sp, #12
 8001888:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 800188a:	2101      	movs	r1, #1
 800188c:	e7f4      	b.n	8001878 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 800188e:	2103      	movs	r1, #3
 8001890:	e7f2      	b.n	8001878 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 8001892:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8001896:	e7f5      	b.n	8001884 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8001898:	f06f 050f 	mvn.w	r5, #15
	return err;
 800189c:	e7f2      	b.n	8001884 <gpio_stm32_pin_interrupt_configure+0xd8>
 800189e:	bf00      	nop
 80018a0:	40013800 	.word	0x40013800
 80018a4:	08002f19 	.word	0x08002f19
 80018a8:	080039dc 	.word	0x080039dc

080018ac <gpio_stm32_clock_request>:
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
					(clock_control_subsys_t *)&cfg->pclken);
 80018ae:	6844      	ldr	r4, [r0, #4]
 80018b0:	340c      	adds	r4, #12
	if (on) {
 80018b2:	b121      	cbz	r1, 80018be <gpio_stm32_clock_request+0x12>
		ret = clock_control_on(clk,
 80018b4:	4620      	mov	r0, r4
}
 80018b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = clock_control_on(clk,
 80018ba:	f7ff bf63 	b.w	8001784 <clock_control_on.constprop.0>
 80018be:	4d07      	ldr	r5, [pc, #28]	; (80018dc <gpio_stm32_clock_request+0x30>)
 80018c0:	4628      	mov	r0, r5
 80018c2:	f001 fd55 	bl	8003370 <z_device_ready>
 80018c6:	b130      	cbz	r0, 80018d6 <gpio_stm32_clock_request+0x2a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 80018c8:	68ab      	ldr	r3, [r5, #8]
 80018ca:	4621      	mov	r1, r4
 80018cc:	4628      	mov	r0, r5
 80018ce:	685b      	ldr	r3, [r3, #4]
}
 80018d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80018d4:	4718      	bx	r3
 80018d6:	f06f 0012 	mvn.w	r0, #18
 80018da:	bd70      	pop	{r4, r5, r6, pc}
 80018dc:	08003594 	.word	0x08003594

080018e0 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80018e0:	6843      	ldr	r3, [r0, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018e4:	f103 0214 	add.w	r2, r3, #20
 80018e8:	e852 2f00 	ldrex	r2, [r2]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ec:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018f0:	f103 0014 	add.w	r0, r3, #20
 80018f4:	e840 2100 	strex	r1, r2, [r0]
 80018f8:	2900      	cmp	r1, #0
 80018fa:	d1f3      	bne.n	80018e4 <uart_stm32_irq_err_enable+0x4>

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <uart_stm32_irq_err_enable+0x54>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <uart_stm32_irq_err_enable+0x32>
 8001902:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001906:	4293      	cmp	r3, r2
 8001908:	d003      	beq.n	8001912 <uart_stm32_irq_err_enable+0x32>
 800190a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 800190e:	4293      	cmp	r3, r2
 8001910:	d103      	bne.n	800191a <uart_stm32_irq_err_enable+0x3a>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001918:	611a      	str	r2, [r3, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800191a:	f103 020c 	add.w	r2, r3, #12
 800191e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8001922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001926:	f103 000c 	add.w	r0, r3, #12
 800192a:	e840 2100 	strex	r1, r2, [r0]
 800192e:	2900      	cmp	r1, #0
 8001930:	d1f3      	bne.n	800191a <uart_stm32_irq_err_enable+0x3a>
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 8001932:	4770      	bx	lr
 8001934:	40011000 	.word	0x40011000

08001938 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001938:	6843      	ldr	r3, [r0, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800193c:	f103 0214 	add.w	r2, r3, #20
 8001940:	e852 2f00 	ldrex	r2, [r2]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8001944:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001948:	f103 0014 	add.w	r0, r3, #20
 800194c:	e840 2100 	strex	r1, r2, [r0]
 8001950:	2900      	cmp	r1, #0
 8001952:	d1f3      	bne.n	800193c <uart_stm32_irq_err_disable+0x4>

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <uart_stm32_irq_err_disable+0x54>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <uart_stm32_irq_err_disable+0x32>
 800195a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800195e:	4293      	cmp	r3, r2
 8001960:	d003      	beq.n	800196a <uart_stm32_irq_err_disable+0x32>
 8001962:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8001966:	4293      	cmp	r3, r2
 8001968:	d103      	bne.n	8001972 <uart_stm32_irq_err_disable+0x3a>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001970:	611a      	str	r2, [r3, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001972:	f103 020c 	add.w	r2, r3, #12
 8001976:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 800197a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800197e:	f103 000c 	add.w	r0, r3, #12
 8001982:	e840 2100 	strex	r1, r2, [r0]
 8001986:	2900      	cmp	r1, #0
 8001988:	d1f3      	bne.n	8001972 <uart_stm32_irq_err_disable+0x3a>
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 800198a:	4770      	bx	lr
 800198c:	40011000 	.word	0x40011000

08001990 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8001994:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001996:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8001998:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001a54 <uart_stm32_init+0xc4>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800199c:	46b1      	mov	r9, r6
{
 800199e:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80019a0:	f859 4b0c 	ldr.w	r4, [r9], #12
	data->clock = clk;
 80019a4:	f8c7 8004 	str.w	r8, [r7, #4]
 80019a8:	4640      	mov	r0, r8
 80019aa:	f001 fce1 	bl	8003370 <z_device_ready>
 80019ae:	b918      	cbnz	r0, 80019b8 <uart_stm32_init+0x28>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 80019b0:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 80019b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 80019b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80019bc:	4649      	mov	r1, r9
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4640      	mov	r0, r8
 80019c2:	4798      	blx	r3
	if (clock_control_on(data->clock,
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d1f3      	bne.n	80019b0 <uart_stm32_init+0x20>
					 (uint32_t)UART_STRUCT(dev));
 80019c8:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 80019ca:	e9d6 0107 	ldrd	r0, r1, [r6, #28]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f7ff fa00 	bl	8000dd4 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 80019d4:	2800      	cmp	r0, #0
 80019d6:	dbed      	blt.n	80019b4 <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80019d8:	68e3      	ldr	r3, [r4, #12]
 80019da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019de:	60e3      	str	r3, [r4, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019e0:	f104 030c 	add.w	r3, r4, #12
 80019e4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80019e8:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ec:	f104 010c 	add.w	r1, r4, #12
 80019f0:	e841 3200 	strex	r2, r3, [r1]
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	d1f3      	bne.n	80019e0 <uart_stm32_init+0x50>
	if (config->parity == 2) {
 80019f8:	69b3      	ldr	r3, [r6, #24]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d025      	beq.n	8001a4a <uart_stm32_init+0xba>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	bf0a      	itet	eq
 8001a02:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 8001a06:	2100      	movne	r1, #0
 8001a08:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001a0c:	68e3      	ldr	r3, [r4, #12]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a18:	6923      	ldr	r3, [r4, #16]
 8001a1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a1e:	6123      	str	r3, [r4, #16]
	if (config->hw_flow_control) {
 8001a20:	7d33      	ldrb	r3, [r6, #20]
 8001a22:	b12b      	cbz	r3, 8001a30 <uart_stm32_init+0xa0>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001a24:	686b      	ldr	r3, [r5, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a28:	6953      	ldr	r3, [r2, #20]
 8001a2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a2e:	6153      	str	r3, [r2, #20]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4628      	mov	r0, r5
 8001a34:	f001 fc2c 	bl	8003290 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a38:	68e3      	ldr	r3, [r4, #12]
 8001a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a3e:	60e3      	str	r3, [r4, #12]
	config->uconf.irq_config_func(dev);
 8001a40:	4628      	mov	r0, r5
 8001a42:	68b3      	ldr	r3, [r6, #8]
 8001a44:	4798      	blx	r3
	return 0;
 8001a46:	2000      	movs	r0, #0
 8001a48:	e7b4      	b.n	80019b4 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8001a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a52:	e7db      	b.n	8001a0c <uart_stm32_init+0x7c>
 8001a54:	08003594 	.word	0x08003594

08001a58 <uart_stm32_configure>:
{
 8001a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001a5c:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001a5e:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001a60:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001a62:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8001a64:	2a01      	cmp	r2, #1
{
 8001a66:	460d      	mov	r5, r1
	switch (parity) {
 8001a68:	d07c      	beq.n	8001b64 <uart_stm32_configure+0x10c>
		return LL_USART_PARITY_NONE;
 8001a6a:	2a02      	cmp	r2, #2
 8001a6c:	bf0c      	ite	eq
 8001a6e:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8001a72:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001a74:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001a78:	f895 e006 	ldrb.w	lr, [r5, #6]
 8001a7c:	f1b9 0f02 	cmp.w	r9, #2
 8001a80:	bf96      	itet	ls
 8001a82:	4b3d      	ldrls	r3, [pc, #244]	; (8001b78 <uart_stm32_configure+0x120>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001a84:	f44f 5800 	movhi.w	r8, #8192	; 0x2000
 8001a88:	f833 8019 	ldrhls.w	r8, [r3, r9, lsl #1]
	switch (db) {
 8001a8c:	f1be 0f04 	cmp.w	lr, #4
 8001a90:	d06b      	beq.n	8001b6a <uart_stm32_configure+0x112>
		return LL_USART_DATAWIDTH_9B;
 8001a92:	2a00      	cmp	r2, #0
 8001a94:	bf0c      	ite	eq
 8001a96:	2300      	moveq	r3, #0
 8001a98:	f44f 5380 	movne.w	r3, #4096	; 0x1000
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001a9c:	79ef      	ldrb	r7, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001a9e:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8001aa2:	2f01      	cmp	r7, #1
 8001aa4:	bf14      	ite	ne
 8001aa6:	f04f 0c00 	movne.w	ip, #0
 8001aaa:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001aae:	f1ba 0f01 	cmp.w	sl, #1
 8001ab2:	d95d      	bls.n	8001b70 <uart_stm32_configure+0x118>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8001ab4:	b112      	cbz	r2, 8001abc <uart_stm32_configure+0x64>
 8001ab6:	f1be 0f04 	cmp.w	lr, #4
 8001aba:	d059      	beq.n	8001b70 <uart_stm32_configure+0x118>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001abc:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8001ac0:	d056      	beq.n	8001b70 <uart_stm32_configure+0x118>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001ac2:	f1be 0f02 	cmp.w	lr, #2
 8001ac6:	d953      	bls.n	8001b70 <uart_stm32_configure+0x118>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8001ac8:	f1be 0f04 	cmp.w	lr, #4
 8001acc:	d050      	beq.n	8001b70 <uart_stm32_configure+0x118>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8001ace:	b167      	cbz	r7, 8001aea <uart_stm32_configure+0x92>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8001ad0:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <uart_stm32_configure+0x124>)
 8001ad2:	4294      	cmp	r4, r2
 8001ad4:	d007      	beq.n	8001ae6 <uart_stm32_configure+0x8e>
 8001ad6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001ada:	4294      	cmp	r4, r2
 8001adc:	d003      	beq.n	8001ae6 <uart_stm32_configure+0x8e>
 8001ade:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8001ae2:	4294      	cmp	r4, r2
 8001ae4:	d144      	bne.n	8001b70 <uart_stm32_configure+0x118>
 8001ae6:	2f01      	cmp	r7, #1
 8001ae8:	d142      	bne.n	8001b70 <uart_stm32_configure+0x118>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001aea:	68e2      	ldr	r2, [r4, #12]
 8001aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001af0:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001af2:	68e2      	ldr	r2, [r4, #12]
 8001af4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001af8:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001afa:	bf1f      	itttt	ne
 8001afc:	68e7      	ldrne	r7, [r4, #12]
 8001afe:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8001b02:	430f      	orrne	r7, r1
 8001b04:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001b06:	6922      	ldr	r2, [r4, #16]
 8001b08:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001b0c:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001b0e:	bf1f      	itttt	ne
 8001b10:	6921      	ldrne	r1, [r4, #16]
 8001b12:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8001b16:	ea41 0108 	orrne.w	r1, r1, r8
 8001b1a:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001b1c:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 8001b1e:	6829      	ldr	r1, [r5, #0]
 8001b20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8001b24:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001b26:	bf1f      	itttt	ne
 8001b28:	68e2      	ldrne	r2, [r4, #12]
 8001b2a:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8001b2e:	431a      	orrne	r2, r3
 8001b30:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001b32:	6963      	ldr	r3, [r4, #20]
 8001b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001b38:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001b3a:	bf1f      	itttt	ne
 8001b3c:	6963      	ldrne	r3, [r4, #20]
 8001b3e:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8001b42:	ea43 030c 	orrne.w	r3, r3, ip
 8001b46:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 8001b48:	6833      	ldr	r3, [r6, #0]
 8001b4a:	4299      	cmp	r1, r3
 8001b4c:	d003      	beq.n	8001b56 <uart_stm32_configure+0xfe>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001b4e:	f001 fb9f 	bl	8003290 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001b56:	68e3      	ldr	r3, [r4, #12]
 8001b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b5c:	60e3      	str	r3, [r4, #12]
	return 0;
 8001b5e:	2000      	movs	r0, #0
};
 8001b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 8001b64:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001b68:	e784      	b.n	8001a74 <uart_stm32_configure+0x1c>
		return LL_USART_DATAWIDTH_9B;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	e795      	b.n	8001a9c <uart_stm32_configure+0x44>
		return -ENOTSUP;
 8001b70:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001b74:	e7f4      	b.n	8001b60 <uart_stm32_configure+0x108>
 8001b76:	bf00      	nop
 8001b78:	08003b98 	.word	0x08003b98
 8001b7c:	40011000 	.word	0x40011000

08001b80 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001b80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8001b84:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001b86:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001b88:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001b8a:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <elapsed+0x34>)
 8001b8e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001b92:	4909      	ldr	r1, [pc, #36]	; (8001bb8 <elapsed+0x38>)
 8001b94:	d101      	bne.n	8001b9a <elapsed+0x1a>
	    || (val1 < val2)) {
 8001b96:	4282      	cmp	r2, r0
 8001b98:	d206      	bcs.n	8001ba8 <elapsed+0x28>
		overflow_cyc += last_load;
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	680c      	ldr	r4, [r1, #0]
 8001b9e:	4422      	add	r2, r4
 8001ba0:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001ba2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001ba6:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	680a      	ldr	r2, [r1, #0]
 8001bac:	4413      	add	r3, r2
}
 8001bae:	1a18      	subs	r0, r3, r0
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000374 	.word	0x20000374
 8001bb8:	20000370 	.word	0x20000370

08001bbc <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8001bbc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8001bbe:	f7ff ffdf 	bl	8001b80 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <sys_clock_isr+0x38>)
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <sys_clock_isr+0x3c>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	6811      	ldr	r1, [r2, #0]
 8001bca:	4408      	add	r0, r1
 8001bcc:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <sys_clock_isr+0x40>)
 8001bd4:	6813      	ldr	r3, [r2, #0]
 8001bd6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001bda:	1ac0      	subs	r0, r0, r3
 8001bdc:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001be0:	fb01 3300 	mla	r3, r1, r0, r3
 8001be4:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001be6:	f000 fed7 	bl	8002998 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
}
 8001bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001bee:	f7ff ba41 	b.w	8001074 <z_arm_exc_exit>
 8001bf2:	bf00      	nop
 8001bf4:	20000374 	.word	0x20000374
 8001bf8:	2000036c 	.word	0x2000036c
 8001bfc:	20000368 	.word	0x20000368

08001c00 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <sys_clock_driver_init+0x28>)
 8001c02:	2210      	movs	r2, #16
 8001c04:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <sys_clock_driver_init+0x2c>)
 8001c0a:	f242 527f 	movw	r2, #9599	; 0x257f
 8001c0e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <sys_clock_driver_init+0x30>)
 8001c12:	2000      	movs	r0, #0
 8001c14:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001c16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001c1a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001c1c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	f042 0207 	orr.w	r2, r2, #7
 8001c24:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00
 8001c2c:	20000370 	.word	0x20000370
 8001c30:	20000374 	.word	0x20000374

08001c34 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	4d32      	ldr	r5, [pc, #200]	; (8001d00 <sys_clock_set_timeout+0xcc>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001c38:	b159      	cbz	r1, 8001c52 <sys_clock_set_timeout+0x1e>
 8001c3a:	1c43      	adds	r3, r0, #1
 8001c3c:	d109      	bne.n	8001c52 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001c3e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001c42:	6913      	ldr	r3, [r2, #16]
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001c4a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001c4e:	602b      	str	r3, [r5, #0]
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8001c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001c52:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8001c56:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001c5a:	bf08      	it	eq
 8001c5c:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001c5e:	1e44      	subs	r4, r0, #1
 8001c60:	2c00      	cmp	r4, #0
	uint32_t last_load_ = last_load;
 8001c62:	682f      	ldr	r7, [r5, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001c64:	dd32      	ble.n	8001ccc <sys_clock_set_timeout+0x98>
 8001c66:	429c      	cmp	r4, r3
 8001c68:	bfa8      	it	ge
 8001c6a:	461c      	movge	r4, r3
	__asm__ volatile(
 8001c6c:	f04f 0310 	mov.w	r3, #16
 8001c70:	f3ef 8611 	mrs	r6, BASEPRI
 8001c74:	f383 8812 	msr	BASEPRI_MAX, r3
 8001c78:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001c7c:	f7ff ff80 	bl	8001b80 <elapsed>
	cycle_count += pending;
 8001c80:	4920      	ldr	r1, [pc, #128]	; (8001d04 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8001c82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8001c86:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8001c88:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001c8c:	680b      	ldr	r3, [r1, #0]
 8001c8e:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <sys_clock_set_timeout+0xd4>)
	cycle_count += pending;
 8001c92:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 8001c94:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <sys_clock_set_timeout+0xd8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001c9a:	1ac2      	subs	r2, r0, r3
 8001c9c:	d518      	bpl.n	8001cd0 <sys_clock_set_timeout+0x9c>
		last_load = MIN_DELAY;
 8001c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8001ca2:	602b      	str	r3, [r5, #0]
	val2 = SysTick->VAL;
 8001ca4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8001ca8:	682c      	ldr	r4, [r5, #0]
	val2 = SysTick->VAL;
 8001caa:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 8001cac:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8001cae:	bf38      	it	cc
 8001cb0:	44bc      	addcc	ip, r7
	SysTick->LOAD = last_load - 1;
 8001cb2:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 8001cb4:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 8001cb8:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 8001cba:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 8001cbc:	2400      	movs	r4, #0
 8001cbe:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8001cc0:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8001cc2:	f386 8811 	msr	BASEPRI, r6
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	e7c1      	b.n	8001c50 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001ccc:	2400      	movs	r4, #0
 8001cce:	e7cd      	b.n	8001c6c <sys_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8001cd0:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay += unannounced;
 8001cd4:	fb0e 2404 	mla	r4, lr, r4, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001cd8:	f504 5415 	add.w	r4, r4, #9536	; 0x2540
		delay -= unannounced;
 8001cdc:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8001cde:	343f      	adds	r4, #63	; 0x3f
 8001ce0:	fbb4 f4fe 	udiv	r4, r4, lr
		delay -= unannounced;
 8001ce4:	fb0e 3404 	mla	r4, lr, r4, r3
		delay = MAX(delay, MIN_DELAY);
 8001ce8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001cec:	d904      	bls.n	8001cf8 <sys_clock_set_timeout+0xc4>
		if (delay > MAX_CYCLES) {
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <sys_clock_set_timeout+0xdc>)
 8001cf0:	429c      	cmp	r4, r3
 8001cf2:	d8d6      	bhi.n	8001ca2 <sys_clock_set_timeout+0x6e>
			last_load = delay;
 8001cf4:	602c      	str	r4, [r5, #0]
 8001cf6:	e7d5      	b.n	8001ca4 <sys_clock_set_timeout+0x70>
		delay = MAX(delay, MIN_DELAY);
 8001cf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001cfc:	e7fa      	b.n	8001cf4 <sys_clock_set_timeout+0xc0>
 8001cfe:	bf00      	nop
 8001d00:	20000370 	.word	0x20000370
 8001d04:	2000036c 	.word	0x2000036c
 8001d08:	20000374 	.word	0x20000374
 8001d0c:	20000368 	.word	0x20000368
 8001d10:	00ffc300 	.word	0x00ffc300

08001d14 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8001d14:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001d16:	f04f 0310 	mov.w	r3, #16
 8001d1a:	f3ef 8411 	mrs	r4, BASEPRI
 8001d1e:	f383 8812 	msr	BASEPRI_MAX, r3
 8001d22:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001d26:	f7ff ff2b 	bl	8001b80 <elapsed>
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <sys_clock_elapsed+0x34>)
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <sys_clock_elapsed+0x38>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	4403      	add	r3, r0
	__asm__ volatile(
 8001d36:	f384 8811 	msr	BASEPRI, r4
 8001d3a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8001d3e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001d42:	fbb3 f0f0 	udiv	r0, r3, r0
 8001d46:	bd10      	pop	{r4, pc}
 8001d48:	2000036c 	.word	0x2000036c
 8001d4c:	20000368 	.word	0x20000368

08001d50 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <UTILS_PLL_IsBusy+0x18>)
 8001d52:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001d54:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001d56:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8001d5e:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8001d60:	bf14      	ite	ne
 8001d62:	2001      	movne	r0, #1
 8001d64:	2000      	moveq	r0, #0
 8001d66:	4770      	bx	lr
 8001d68:	40023800 	.word	0x40023800

08001d6c <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d049      	beq.n	8001e04 <LL_SetFlashLatency+0x98>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001d70:	4a2a      	ldr	r2, [pc, #168]	; (8001e1c <LL_SetFlashLatency+0xb0>)
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001d78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d7c:	d117      	bne.n	8001dae <LL_SetFlashLatency+0x42>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <LL_SetFlashLatency+0xb4>)
 8001d80:	4298      	cmp	r0, r3
 8001d82:	d945      	bls.n	8001e10 <LL_SetFlashLatency+0xa4>
        latency = LL_FLASH_LATENCY_3;
 8001d84:	2303      	movs	r3, #3
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d86:	4927      	ldr	r1, [pc, #156]	; (8001e24 <LL_SetFlashLatency+0xb8>)
 8001d88:	4288      	cmp	r0, r1
 8001d8a:	d902      	bls.n	8001d92 <LL_SetFlashLatency+0x26>
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	bf38      	it	cc
 8001d90:	2301      	movcc	r3, #1
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001d98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d9c:	d10e      	bne.n	8001dbc <LL_SetFlashLatency+0x50>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <LL_SetFlashLatency+0xbc>)
 8001da0:	4290      	cmp	r0, r2
 8001da2:	d908      	bls.n	8001db6 <LL_SetFlashLatency+0x4a>
 8001da4:	b1cb      	cbz	r3, 8001dda <LL_SetFlashLatency+0x6e>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	bf38      	it	cc
 8001daa:	2301      	movcc	r3, #1
 8001dac:	e006      	b.n	8001dbc <LL_SetFlashLatency+0x50>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001dae:	2300      	movs	r3, #0
 8001db0:	e7ef      	b.n	8001d92 <LL_SetFlashLatency+0x26>
        latency = LL_FLASH_LATENCY_2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	e7ed      	b.n	8001d92 <LL_SetFlashLatency+0x26>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001db6:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <LL_SetFlashLatency+0xb8>)
 8001db8:	4290      	cmp	r0, r2
 8001dba:	d8f4      	bhi.n	8001da6 <LL_SetFlashLatency+0x3a>
 8001dbc:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <LL_SetFlashLatency+0xb0>)
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8001dc4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001dc8:	d10c      	bne.n	8001de4 <LL_SetFlashLatency+0x78>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <LL_SetFlashLatency+0xbc>)
 8001dcc:	4290      	cmp	r0, r2
 8001dce:	d906      	bls.n	8001dde <LL_SetFlashLatency+0x72>
 8001dd0:	b1d3      	cbz	r3, 8001e08 <LL_SetFlashLatency+0x9c>
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	bf38      	it	cc
 8001dd6:	2301      	movcc	r3, #1
 8001dd8:	e004      	b.n	8001de4 <LL_SetFlashLatency+0x78>
        latency = LL_FLASH_LATENCY_2;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e7ee      	b.n	8001dbc <LL_SetFlashLatency+0x50>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001dde:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <LL_SetFlashLatency+0xb8>)
 8001de0:	4290      	cmp	r0, r2
 8001de2:	d8f6      	bhi.n	8001dd2 <LL_SetFlashLatency+0x66>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001de4:	4911      	ldr	r1, [pc, #68]	; (8001e2c <LL_SetFlashLatency+0xc0>)
 8001de6:	680a      	ldr	r2, [r1, #0]
 8001de8:	f022 0207 	bic.w	r2, r2, #7
 8001dec:	431a      	orrs	r2, r3
 8001dee:	600a      	str	r2, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001df0:	680a      	ldr	r2, [r1, #0]
 8001df2:	f002 0207 	and.w	r2, r2, #7
    } while ((getlatency != latency) && (timeout > 0));
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d008      	beq.n	8001e0c <LL_SetFlashLatency+0xa0>
 8001dfa:	680a      	ldr	r2, [r1, #0]
 8001dfc:	f002 0207 	and.w	r2, r2, #7
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d003      	beq.n	8001e0c <LL_SetFlashLatency+0xa0>
    status = ERROR;
 8001e04:	2001      	movs	r0, #1
 8001e06:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_2;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e7eb      	b.n	8001de4 <LL_SetFlashLatency+0x78>
      status = SUCCESS;
 8001e0c:	2000      	movs	r0, #0
}
 8001e0e:	4770      	bx	lr
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <LL_SetFlashLatency+0xbc>)
 8001e12:	4298      	cmp	r0, r3
 8001e14:	d8cd      	bhi.n	8001db2 <LL_SetFlashLatency+0x46>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001e16:	2300      	movs	r3, #0
 8001e18:	e7b5      	b.n	8001d86 <LL_SetFlashLatency+0x1a>
 8001e1a:	bf00      	nop
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	055d4a80 	.word	0x055d4a80
 8001e24:	01c9c380 	.word	0x01c9c380
 8001e28:	03d09000 	.word	0x03d09000
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001e30:	680b      	ldr	r3, [r1, #0]
 8001e32:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 8001e34:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8001e3c:	4e1f      	ldr	r6, [pc, #124]	; (8001ebc <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001e3e:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8001e42:	6833      	ldr	r3, [r6, #0]
 8001e44:	42a3      	cmp	r3, r4
{
 8001e46:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8001e48:	d327      	bcc.n	8001e9a <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e52:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001e54:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8001e56:	0192      	lsls	r2, r2, #6
 8001e58:	d5fc      	bpl.n	8001e54 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	6829      	ldr	r1, [r5, #0]
 8001e5e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	f022 0203 	bic.w	r2, r2, #3
 8001e6c:	f042 0202 	orr.w	r2, r2, #2
 8001e70:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001e7a:	2a08      	cmp	r2, #8
 8001e7c:	d1fa      	bne.n	8001e74 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	6869      	ldr	r1, [r5, #4]
 8001e82:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	68a9      	ldr	r1, [r5, #8]
 8001e8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]
}
 8001e96:	2000      	movs	r0, #0
 8001e98:	e004      	b.n	8001ea4 <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff ff66 	bl	8001d6c <LL_SetFlashLatency>
  if(status == SUCCESS)
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	d0d2      	beq.n	8001e4a <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8001ea4:	6833      	ldr	r3, [r6, #0]
 8001ea6:	42a3      	cmp	r3, r4
 8001ea8:	d902      	bls.n	8001eb0 <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff ff5e 	bl	8001d6c <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8001eb0:	b900      	cbnz	r0, 8001eb4 <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 8001eb2:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}
 8001eb6:	bf00      	nop
 8001eb8:	08003c4f 	.word	0x08003c4f
 8001ebc:	2000002c 	.word	0x2000002c
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <LL_PLL_ConfigSystemClock_HSE>:
{
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	460e      	mov	r6, r1
 8001ec8:	4605      	mov	r5, r0
 8001eca:	4614      	mov	r4, r2
 8001ecc:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8001ece:	f7ff ff3f 	bl	8001d50 <UTILS_PLL_IsBusy>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d136      	bne.n	8001f44 <LL_PLL_ConfigSystemClock_HSE+0x80>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001ed6:	6827      	ldr	r7, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001ed8:	f8d4 c004 	ldr.w	ip, [r4, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001edc:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001ede:	4c1a      	ldr	r4, [pc, #104]	; (8001f48 <LL_PLL_ConfigSystemClock_HSE+0x84>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001ee0:	f007 003f 	and.w	r0, r7, #63	; 0x3f
 8001ee4:	fbb5 f5f0 	udiv	r5, r5, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001ee8:	f3cc 0008 	ubfx	r0, ip, #0, #9
 8001eec:	4345      	muls	r5, r0
 8001eee:	6822      	ldr	r2, [r4, #0]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ef0:	0c18      	lsrs	r0, r3, #16
 8001ef2:	3001      	adds	r0, #1
 8001ef4:	0040      	lsls	r0, r0, #1
 8001ef6:	fbb5 f0f0 	udiv	r0, r5, r0
    if(LL_RCC_HSE_IsReady() != 1U)
 8001efa:	0395      	lsls	r5, r2, #14
 8001efc:	d40f      	bmi.n	8001f1e <LL_PLL_ConfigSystemClock_HSE+0x5a>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001efe:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8001f00:	2e01      	cmp	r6, #1
 8001f02:	bf0c      	ite	eq
 8001f04:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f08:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8001f0c:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f0e:	6825      	ldr	r5, [r4, #0]
 8001f10:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8001f14:	6025      	str	r5, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001f16:	4c0c      	ldr	r4, [pc, #48]	; (8001f48 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8001f18:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8001f1a:	0392      	lsls	r2, r2, #14
 8001f1c:	d5fc      	bpl.n	8001f18 <LL_PLL_ConfigSystemClock_HSE+0x54>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001f1e:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8001f22:	6865      	ldr	r5, [r4, #4]
 8001f24:	402a      	ands	r2, r5
 8001f26:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
 8001f2a:	433a      	orrs	r2, r7
 8001f2c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f30:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001f32:	6862      	ldr	r2, [r4, #4]
 8001f34:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	6062      	str	r2, [r4, #4]
}
 8001f3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001f40:	f7ff bf76 	b.w	8001e30 <UTILS_EnablePLLAndSwitchSystem>
}
 8001f44:	2001      	movs	r0, #1
 8001f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	ffbf8000 	.word	0xffbf8000

08001f50 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <z_sys_init_run_level+0x3c>)
{
 8001f52:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001f54:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001f58:	3001      	adds	r0, #1
 8001f5a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001f5e:	42a6      	cmp	r6, r4
 8001f60:	d800      	bhi.n	8001f64 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8001f62:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8001f64:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001f68:	4628      	mov	r0, r5
 8001f6a:	4798      	blx	r3
		if (dev != NULL) {
 8001f6c:	b165      	cbz	r5, 8001f88 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 8001f6e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 8001f70:	b130      	cbz	r0, 8001f80 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8001f72:	2800      	cmp	r0, #0
 8001f74:	bfb8      	it	lt
 8001f76:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8001f78:	28ff      	cmp	r0, #255	; 0xff
 8001f7a:	bfa8      	it	ge
 8001f7c:	20ff      	movge	r0, #255	; 0xff
 8001f7e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8001f80:	785a      	ldrb	r2, [r3, #1]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001f88:	3408      	adds	r4, #8
 8001f8a:	e7e8      	b.n	8001f5e <z_sys_init_run_level+0xe>
 8001f8c:	08003b80 	.word	0x08003b80

08001f90 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8001f90:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8001f92:	4605      	mov	r5, r0
 8001f94:	b910      	cbnz	r0, 8001f9c <z_impl_device_get_binding+0xc>
		return NULL;
 8001f96:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 8001f98:	4620      	mov	r0, r4
 8001f9a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 8001f9c:	7803      	ldrb	r3, [r0, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f9      	beq.n	8001f96 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001fa2:	4c0e      	ldr	r4, [pc, #56]	; (8001fdc <z_impl_device_get_binding+0x4c>)
 8001fa4:	4e0e      	ldr	r6, [pc, #56]	; (8001fe0 <z_impl_device_get_binding+0x50>)
 8001fa6:	42b4      	cmp	r4, r6
 8001fa8:	d108      	bne.n	8001fbc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001faa:	4c0c      	ldr	r4, [pc, #48]	; (8001fdc <z_impl_device_get_binding+0x4c>)
 8001fac:	42b4      	cmp	r4, r6
 8001fae:	d0f2      	beq.n	8001f96 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f001 f9dd 	bl	8003370 <z_device_ready>
 8001fb6:	b950      	cbnz	r0, 8001fce <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001fb8:	3418      	adds	r4, #24
 8001fba:	e7f7      	b.n	8001fac <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f001 f9d7 	bl	8003370 <z_device_ready>
 8001fc2:	b110      	cbz	r0, 8001fca <z_impl_device_get_binding+0x3a>
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	d0e6      	beq.n	8001f98 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001fca:	3418      	adds	r4, #24
 8001fcc:	e7eb      	b.n	8001fa6 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001fce:	6821      	ldr	r1, [r4, #0]
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f000 feba 	bl	8002d4a <strcmp>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d1ee      	bne.n	8001fb8 <z_impl_device_get_binding+0x28>
 8001fda:	e7dd      	b.n	8001f98 <z_impl_device_get_binding+0x8>
 8001fdc:	08003594 	.word	0x08003594
 8001fe0:	080036b4 	.word	0x080036b4

08001fe4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8001fe4:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 8001fe6:	2300      	movs	r3, #0
{
 8001fe8:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
 8001fea:	2201      	movs	r2, #1
 8001fec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001ff6:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
 8001ff8:	4c0c      	ldr	r4, [pc, #48]	; (800202c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
 8001ffc:	490d      	ldr	r1, [pc, #52]	; (8002034 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8001ffe:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
 8002000:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002004:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
 8002008:	f44f 75b0 	mov.w	r5, #352	; 0x160
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	fb05 1100 	mla	r1, r5, r0, r1
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <init_idle_thread+0x54>)
 8002014:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002018:	4620      	mov	r0, r4
 800201a:	f000 f8a3 	bl	8002164 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800201e:	7b63      	ldrb	r3, [r4, #13]
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8002026:	b007      	add	sp, #28
 8002028:	bd30      	pop	{r4, r5, pc}
 800202a:	bf00      	nop
 800202c:	20000118 	.word	0x20000118
 8002030:	20000378 	.word	0x20000378
 8002034:	20000a00 	.word	0x20000a00
 8002038:	080033d3 	.word	0x080033d3

0800203c <bg_thread_main>:
{
 800203c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <bg_thread_main+0x2c>)
 8002040:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8002042:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8002044:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8002046:	f7ff ff83 	bl	8001f50 <z_sys_init_run_level>
	boot_banner();
 800204a:	f000 fd19 	bl	8002a80 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800204e:	2003      	movs	r0, #3
 8002050:	f7ff ff7e 	bl	8001f50 <z_sys_init_run_level>
	z_init_static_threads();
 8002054:	f000 f8b8 	bl	80021c8 <z_init_static_threads>
	main();
 8002058:	f7fe fa8a 	bl	8000570 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <bg_thread_main+0x30>)
 800205e:	7b13      	ldrb	r3, [r2, #12]
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8002066:	bd08      	pop	{r3, pc}
 8002068:	200003ad 	.word	0x200003ad
 800206c:	20000198 	.word	0x20000198

08002070 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <z_bss_zero+0xc>)
 8002072:	4a03      	ldr	r2, [pc, #12]	; (8002080 <z_bss_zero+0x10>)
 8002074:	2100      	movs	r1, #0
 8002076:	1a12      	subs	r2, r2, r0
 8002078:	f000 be7e 	b.w	8002d78 <memset>
 800207c:	20000098 	.word	0x20000098
 8002080:	200003b0 	.word	0x200003b0

08002084 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8002084:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002086:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8002144 <z_cstart+0xc0>
 800208a:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800208c:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8002090:	4d2d      	ldr	r5, [pc, #180]	; (8002148 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8002092:	4e2e      	ldr	r6, [pc, #184]	; (800214c <z_cstart+0xc8>)
 8002094:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002096:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8002150 <z_cstart+0xcc>
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	2400      	movs	r4, #0
 80020a0:	616b      	str	r3, [r5, #20]
 80020a2:	23f0      	movs	r3, #240	; 0xf0
 80020a4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 80020a8:	77ec      	strb	r4, [r5, #31]
 80020aa:	762c      	strb	r4, [r5, #24]
 80020ac:	766c      	strb	r4, [r5, #25]
 80020ae:	76ac      	strb	r4, [r5, #26]
 80020b0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80020b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80020b6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80020ba:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80020bc:	f7ff f8d0 	bl	8001260 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80020c0:	f7fe fec4 	bl	8000e4c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80020ca:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80020cc:	f7ff f9a4 	bl	8001418 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80020d0:	f7ff f90c 	bl	80012ec <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 80020d4:	f240 1301 	movw	r3, #257	; 0x101
 80020d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 80020dc:	ab06      	add	r3, sp, #24
 80020de:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 80020e0:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80020e4:	f001 f943 	bl	800336e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7ff ff31 	bl	8001f50 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80020ee:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 80020f0:	4d18      	ldr	r5, [pc, #96]	; (8002154 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80020f2:	f7ff ff2d 	bl	8001f50 <z_sys_init_run_level>
	z_sched_init();
 80020f6:	f000 fa6b 	bl	80025d0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <z_cstart+0xd4>)
 80020fc:	9305      	str	r3, [sp, #20]
 80020fe:	2301      	movs	r3, #1
 8002100:	4916      	ldr	r1, [pc, #88]	; (800215c <z_cstart+0xd8>)
 8002102:	9400      	str	r4, [sp, #0]
 8002104:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8002108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800210c:	464b      	mov	r3, r9
 800210e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002112:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
 8002114:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002116:	f000 f825 	bl	8002164 <z_setup_new_thread>
 800211a:	7b6a      	ldrb	r2, [r5, #13]
 800211c:	4607      	mov	r7, r0
 800211e:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8002122:	4628      	mov	r0, r5
 8002124:	736a      	strb	r2, [r5, #13]
 8002126:	f001 f98e 	bl	8003446 <z_ready_thread>
		init_idle_thread(i);
 800212a:	4620      	mov	r0, r4
 800212c:	f7ff ff5a 	bl	8001fe4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <z_cstart+0xdc>)
 8002132:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002134:	464a      	mov	r2, r9
 8002136:	4639      	mov	r1, r7
 8002138:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
 800213a:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
 800213c:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002140:	f7fe ff6e 	bl	8001020 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002144:	20001380 	.word	0x20001380
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	20000378 	.word	0x20000378
 8002150:	0800203d 	.word	0x0800203d
 8002154:	20000198 	.word	0x20000198
 8002158:	08003c5f 	.word	0x08003c5f
 800215c:	200005e0 	.word	0x200005e0
 8002160:	20000118 	.word	0x20000118

08002164 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002164:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002168:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800216a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800216c:	2604      	movs	r6, #4
 800216e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8002170:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002172:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002174:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8002178:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800217a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 800217c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8002182:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002184:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002188:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800218a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 800218e:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8002192:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8002194:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8002196:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002198:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800219c:	9202      	str	r2, [sp, #8]
 800219e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80021a0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 80021a2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80021a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021a6:	9200      	str	r2, [sp, #0]
 80021a8:	4642      	mov	r2, r8
{
 80021aa:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80021ac:	f7fe ff06 	bl	8000fbc <arch_new_thread>
	if (!_current) {
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 80021b2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	b103      	cbz	r3, 80021ba <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 80021ba:	6723      	str	r3, [r4, #112]	; 0x70
}
 80021bc:	4640      	mov	r0, r8
 80021be:	b004      	add	sp, #16
 80021c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c4:	20000378 	.word	0x20000378

080021c8 <z_init_static_threads>:
{
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ca:	4c22      	ldr	r4, [pc, #136]	; (8002254 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 80021cc:	4d22      	ldr	r5, [pc, #136]	; (8002258 <z_init_static_threads+0x90>)
{
 80021ce:	b087      	sub	sp, #28
 80021d0:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 80021d2:	42ae      	cmp	r6, r5
 80021d4:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80021d8:	d30b      	bcc.n	80021f2 <z_init_static_threads+0x2a>
	k_sched_lock();
 80021da:	f000 f891 	bl	8002300 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80021de:	4c1d      	ldr	r4, [pc, #116]	; (8002254 <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80021e0:	4f1e      	ldr	r7, [pc, #120]	; (800225c <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80021e2:	260a      	movs	r6, #10
 80021e4:	42ac      	cmp	r4, r5
 80021e6:	d320      	bcc.n	800222a <z_init_static_threads+0x62>
}
 80021e8:	b007      	add	sp, #28
 80021ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80021ee:	f000 b9d3 	b.w	8002598 <k_sched_unlock>
		z_setup_new_thread(
 80021f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80021f6:	9305      	str	r3, [sp, #20]
 80021f8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80021fc:	9304      	str	r3, [sp, #16]
 80021fe:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002202:	9303      	str	r3, [sp, #12]
 8002204:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800221a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800221e:	f7ff ffa1 	bl	8002164 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002222:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8002226:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002228:	e7d2      	b.n	80021d0 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800222a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800222c:	1c53      	adds	r3, r2, #1
 800222e:	d009      	beq.n	8002244 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8002230:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002234:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002238:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800223c:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800223e:	d103      	bne.n	8002248 <z_init_static_threads+0x80>
	z_sched_start(thread);
 8002240:	f000 f942 	bl	80024c8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002244:	3430      	adds	r4, #48	; 0x30
 8002246:	e7cd      	b.n	80021e4 <z_init_static_threads+0x1c>
 8002248:	4639      	mov	r1, r7
 800224a:	3018      	adds	r0, #24
 800224c:	f000 fb2a 	bl	80028a4 <z_add_timeout>
 8002250:	e7f8      	b.n	8002244 <z_init_static_threads+0x7c>
 8002252:	bf00      	nop
 8002254:	20000068 	.word	0x20000068
 8002258:	20000098 	.word	0x20000098
 800225c:	08003467 	.word	0x08003467

08002260 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8002260:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8002262:	4c08      	ldr	r4, [pc, #32]	; (8002284 <z_reset_time_slice+0x24>)
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	b15b      	cbz	r3, 8002280 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8002268:	f7ff fd54 	bl	8001d14 <sys_clock_elapsed>
 800226c:	4603      	mov	r3, r0
 800226e:	6820      	ldr	r0, [r4, #0]
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <z_reset_time_slice+0x28>)
 8002272:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8002274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8002278:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800227a:	2100      	movs	r1, #0
 800227c:	f001 b92b 	b.w	80034d6 <z_set_timeout_expiry>
}
 8002280:	bd10      	pop	{r4, pc}
 8002282:	bf00      	nop
 8002284:	200003a4 	.word	0x200003a4
 8002288:	20000378 	.word	0x20000378

0800228c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 800228c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800228e:	f04f 0310 	mov.w	r3, #16
 8002292:	f3ef 8411 	mrs	r4, BASEPRI
 8002296:	f383 8812 	msr	BASEPRI_MAX, r3
 800229a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <k_sched_time_slice_set+0x44>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 80022a4:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 80022a6:	f04f 030a 	mov.w	r3, #10
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <k_sched_time_slice_set+0x48>)
 80022ac:	fb00 f303 	mul.w	r3, r0, r3
 80022b0:	dc09      	bgt.n	80022c6 <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 80022b2:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <k_sched_time_slice_set+0x4c>)
 80022b6:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 80022b8:	f7ff ffd2 	bl	8002260 <z_reset_time_slice>
	__asm__ volatile(
 80022bc:	f384 8811 	msr	BASEPRI, r4
 80022c0:	f3bf 8f6f 	isb	sy
	}
}
 80022c4:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	bfb8      	it	lt
 80022ca:	2302      	movlt	r3, #2
 80022cc:	e7f1      	b.n	80022b2 <k_sched_time_slice_set+0x26>
 80022ce:	bf00      	nop
 80022d0:	20000378 	.word	0x20000378
 80022d4:	200003a4 	.word	0x200003a4
 80022d8:	200003a0 	.word	0x200003a0

080022dc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80022dc:	b949      	cbnz	r1, 80022f2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022de:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 80022e2:	b930      	cbnz	r0, 80022f2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <z_reschedule+0x16>
	ret = arch_swap(key);
 80022ee:	f7fe be11 	b.w	8000f14 <arch_swap>
 80022f2:	f381 8811 	msr	BASEPRI, r1
 80022f6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 80022fa:	4770      	bx	lr
 80022fc:	20000378 	.word	0x20000378

08002300 <k_sched_lock>:
	__asm__ volatile(
 8002300:	f04f 0310 	mov.w	r3, #16
 8002304:	f3ef 8111 	mrs	r1, BASEPRI
 8002308:	f383 8812 	msr	BASEPRI_MAX, r3
 800230c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <k_sched_lock+0x24>)
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	7bd3      	ldrb	r3, [r2, #15]
 8002316:	3b01      	subs	r3, #1
 8002318:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800231a:	f381 8811 	msr	BASEPRI, r1
 800231e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8002322:	4770      	bx	lr
 8002324:	20000378 	.word	0x20000378

08002328 <update_cache>:
{
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 800232c:	480c      	ldr	r0, [pc, #48]	; (8002360 <update_cache+0x38>)
 800232e:	4d0d      	ldr	r5, [pc, #52]	; (8002364 <update_cache+0x3c>)
 8002330:	f001 f883 	bl	800343a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8002334:	4604      	mov	r4, r0
 8002336:	b900      	cbnz	r0, 800233a <update_cache+0x12>
 8002338:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800233a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800233c:	b94a      	cbnz	r2, 8002352 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 800233e:	7b5a      	ldrb	r2, [r3, #13]
 8002340:	06d2      	lsls	r2, r2, #27
 8002342:	d106      	bne.n	8002352 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8002344:	69a2      	ldr	r2, [r4, #24]
 8002346:	b922      	cbnz	r2, 8002352 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8002348:	89da      	ldrh	r2, [r3, #14]
 800234a:	2a7f      	cmp	r2, #127	; 0x7f
 800234c:	d901      	bls.n	8002352 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 800234e:	61ab      	str	r3, [r5, #24]
}
 8002350:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8002352:	429c      	cmp	r4, r3
 8002354:	d001      	beq.n	800235a <update_cache+0x32>
			z_reset_time_slice();
 8002356:	f7ff ff83 	bl	8002260 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800235a:	61ac      	str	r4, [r5, #24]
}
 800235c:	e7f8      	b.n	8002350 <update_cache+0x28>
 800235e:	bf00      	nop
 8002360:	20000394 	.word	0x20000394
 8002364:	20000378 	.word	0x20000378

08002368 <move_thread_to_end_of_prio_q>:
{
 8002368:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800236a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800236e:	7b43      	ldrb	r3, [r0, #13]
 8002370:	2a00      	cmp	r2, #0
{
 8002372:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002374:	da04      	bge.n	8002380 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800237a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 800237c:	f001 f835 	bl	80033ea <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8002380:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8002382:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <move_thread_to_end_of_prio_q+0x70>)
 8002384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002388:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800238a:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800238e:	f102 051c 	add.w	r5, r2, #28
 8002392:	42ab      	cmp	r3, r5
 8002394:	d01b      	beq.n	80023ce <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002396:	b1d3      	cbz	r3, 80023ce <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 8002398:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 800239c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 80023a0:	4286      	cmp	r6, r0
 80023a2:	d00f      	beq.n	80023c4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 80023a4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80023a6:	2800      	cmp	r0, #0
 80023a8:	dd0c      	ble.n	80023c4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80023aa:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80023ac:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80023b0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80023b2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80023b4:	6890      	ldr	r0, [r2, #8]
 80023b6:	1a43      	subs	r3, r0, r1
 80023b8:	4258      	negs	r0, r3
}
 80023ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80023be:	4158      	adcs	r0, r3
 80023c0:	f7ff bfb2 	b.w	8002328 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80023c4:	42a3      	cmp	r3, r4
 80023c6:	d002      	beq.n	80023ce <move_thread_to_end_of_prio_q+0x66>
 80023c8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e6      	bne.n	800239c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 80023ce:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 80023d2:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80023d4:	6211      	str	r1, [r2, #32]
}
 80023d6:	e7ed      	b.n	80023b4 <move_thread_to_end_of_prio_q+0x4c>
 80023d8:	20000378 	.word	0x20000378

080023dc <z_time_slice>:
{
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	4601      	mov	r1, r0
	__asm__ volatile(
 80023e0:	f04f 0310 	mov.w	r3, #16
 80023e4:	f3ef 8411 	mrs	r4, BASEPRI
 80023e8:	f383 8812 	msr	BASEPRI_MAX, r3
 80023ec:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <z_time_slice+0x6c>)
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <z_time_slice+0x70>)
 80023f4:	6898      	ldr	r0, [r3, #8]
 80023f6:	6815      	ldr	r5, [r2, #0]
 80023f8:	42a8      	cmp	r0, r5
 80023fa:	d106      	bne.n	800240a <z_time_slice+0x2e>
			z_reset_time_slice();
 80023fc:	f7ff ff30 	bl	8002260 <z_reset_time_slice>
	__asm__ volatile(
 8002400:	f384 8811 	msr	BASEPRI, r4
 8002404:	f3bf 8f6f 	isb	sy
}
 8002408:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 800240a:	2500      	movs	r5, #0
 800240c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <z_time_slice+0x74>)
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	b1ba      	cbz	r2, 8002444 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 8002414:	89c2      	ldrh	r2, [r0, #14]
 8002416:	2a7f      	cmp	r2, #127	; 0x7f
 8002418:	d814      	bhi.n	8002444 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 800241a:	7b42      	ldrb	r2, [r0, #13]
 800241c:	06d2      	lsls	r2, r2, #27
 800241e:	d111      	bne.n	8002444 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8002420:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <z_time_slice+0x78>)
 8002422:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	4295      	cmp	r5, r2
 800242a:	db0b      	blt.n	8002444 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <z_time_slice+0x7c>)
 800242e:	4290      	cmp	r0, r2
 8002430:	d008      	beq.n	8002444 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	428a      	cmp	r2, r1
 8002436:	dc02      	bgt.n	800243e <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 8002438:	f7ff ff96 	bl	8002368 <move_thread_to_end_of_prio_q>
 800243c:	e7de      	b.n	80023fc <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 800243e:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	e7dd      	b.n	8002400 <z_time_slice+0x24>
 8002444:	2200      	movs	r2, #0
 8002446:	e7fb      	b.n	8002440 <z_time_slice+0x64>
 8002448:	20000378 	.word	0x20000378
 800244c:	2000039c 	.word	0x2000039c
 8002450:	200003a4 	.word	0x200003a4
 8002454:	200003a0 	.word	0x200003a0
 8002458:	20000118 	.word	0x20000118

0800245c <ready_thread>:
{
 800245c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800245e:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8002462:	7b43      	ldrb	r3, [r0, #13]
 8002464:	2a00      	cmp	r2, #0
 8002466:	db2a      	blt.n	80024be <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002468:	06da      	lsls	r2, r3, #27
 800246a:	d128      	bne.n	80024be <ready_thread+0x62>
 800246c:	6982      	ldr	r2, [r0, #24]
 800246e:	bb32      	cbnz	r2, 80024be <ready_thread+0x62>
	return list->head == list;
 8002470:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8002472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002476:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8002478:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800247c:	f102 051c 	add.w	r5, r2, #28
 8002480:	42ab      	cmp	r3, r5
 8002482:	d017      	beq.n	80024b4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002484:	b1b3      	cbz	r3, 80024b4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 8002486:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800248a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 800248e:	428e      	cmp	r6, r1
 8002490:	d00b      	beq.n	80024aa <ready_thread+0x4e>
		return b2 - b1;
 8002492:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002494:	2900      	cmp	r1, #0
 8002496:	dd08      	ble.n	80024aa <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8002498:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800249a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800249e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80024a0:	6058      	str	r0, [r3, #4]
}
 80024a2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7ff bf3f 	b.w	8002328 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80024aa:	42a3      	cmp	r3, r4
 80024ac:	d002      	beq.n	80024b4 <ready_thread+0x58>
 80024ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ea      	bne.n	800248a <ready_thread+0x2e>
	node->prev = tail;
 80024b4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 80024b8:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80024ba:	6210      	str	r0, [r2, #32]
}
 80024bc:	e7f1      	b.n	80024a2 <ready_thread+0x46>
}
 80024be:	bc70      	pop	{r4, r5, r6}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000378 	.word	0x20000378

080024c8 <z_sched_start>:
{
 80024c8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80024ca:	f04f 0210 	mov.w	r2, #16
 80024ce:	f3ef 8411 	mrs	r4, BASEPRI
 80024d2:	f382 8812 	msr	BASEPRI_MAX, r2
 80024d6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80024da:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80024dc:	0751      	lsls	r1, r2, #29
 80024de:	d404      	bmi.n	80024ea <z_sched_start+0x22>
	__asm__ volatile(
 80024e0:	f384 8811 	msr	BASEPRI, r4
 80024e4:	f3bf 8f6f 	isb	sy
}
 80024e8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80024ea:	f022 0204 	bic.w	r2, r2, #4
 80024ee:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80024f0:	f7ff ffb4 	bl	800245c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80024f4:	4621      	mov	r1, r4
 80024f6:	4802      	ldr	r0, [pc, #8]	; (8002500 <z_sched_start+0x38>)
}
 80024f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80024fc:	f7ff beee 	b.w	80022dc <z_reschedule>
 8002500:	200003ae 	.word	0x200003ae

08002504 <unready_thread>:
{
 8002504:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8002506:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800250a:	7b43      	ldrb	r3, [r0, #13]
 800250c:	2a00      	cmp	r2, #0
{
 800250e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002510:	da04      	bge.n	800251c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002516:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002518:	f000 ff67 	bl	80033ea <sys_dlist_remove>
	update_cache(thread == _current);
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <unready_thread+0x2c>)
 800251e:	6898      	ldr	r0, [r3, #8]
 8002520:	1a43      	subs	r3, r0, r1
 8002522:	4258      	negs	r0, r3
 8002524:	4158      	adcs	r0, r3
}
 8002526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800252a:	f7ff befd 	b.w	8002328 <update_cache>
 800252e:	bf00      	nop
 8002530:	20000378 	.word	0x20000378

08002534 <z_impl_k_thread_suspend>:
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8002538:	3018      	adds	r0, #24
 800253a:	f000 ffb6 	bl	80034aa <z_abort_timeout>
	__asm__ volatile(
 800253e:	f04f 0310 	mov.w	r3, #16
 8002542:	f3ef 8611 	mrs	r6, BASEPRI
 8002546:	f383 8812 	msr	BASEPRI_MAX, r3
 800254a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800254e:	f994 200d 	ldrsb.w	r2, [r4, #13]
 8002552:	7b63      	ldrb	r3, [r4, #13]
 8002554:	2a00      	cmp	r2, #0
 8002556:	da05      	bge.n	8002564 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800255c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800255e:	4620      	mov	r0, r4
 8002560:	f000 ff43 	bl	80033ea <sys_dlist_remove>
		update_cache(thread == _current);
 8002564:	4d0b      	ldr	r5, [pc, #44]	; (8002594 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002566:	7b63      	ldrb	r3, [r4, #13]
 8002568:	68a8      	ldr	r0, [r5, #8]
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	7363      	strb	r3, [r4, #13]
 8002570:	1b03      	subs	r3, r0, r4
 8002572:	4258      	negs	r0, r3
 8002574:	4158      	adcs	r0, r3
 8002576:	f7ff fed7 	bl	8002328 <update_cache>
	__asm__ volatile(
 800257a:	f386 8811 	msr	BASEPRI, r6
 800257e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8002582:	68ab      	ldr	r3, [r5, #8]
 8002584:	42a3      	cmp	r3, r4
 8002586:	d103      	bne.n	8002590 <z_impl_k_thread_suspend+0x5c>
}
 8002588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 800258c:	f000 bf4b 	b.w	8003426 <z_reschedule_unlocked>
}
 8002590:	bd70      	pop	{r4, r5, r6, pc}
 8002592:	bf00      	nop
 8002594:	20000378 	.word	0x20000378

08002598 <k_sched_unlock>:
{
 8002598:	b510      	push	{r4, lr}
	__asm__ volatile(
 800259a:	f04f 0310 	mov.w	r3, #16
 800259e:	f3ef 8411 	mrs	r4, BASEPRI
 80025a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80025a6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <k_sched_unlock+0x34>)
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	7bd3      	ldrb	r3, [r2, #15]
 80025b0:	3301      	adds	r3, #1
 80025b2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff feb7 	bl	8002328 <update_cache>
	__asm__ volatile(
 80025ba:	f384 8811 	msr	BASEPRI, r4
 80025be:	f3bf 8f6f 	isb	sy
}
 80025c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80025c6:	f000 bf2e 	b.w	8003426 <z_reschedule_unlocked>
 80025ca:	bf00      	nop
 80025cc:	20000378 	.word	0x20000378

080025d0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80025d2:	2100      	movs	r1, #0
 80025d4:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 80025d8:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80025dc:	4608      	mov	r0, r1
 80025de:	f7ff be55 	b.w	800228c <k_sched_time_slice_set>
 80025e2:	bf00      	nop
 80025e4:	20000378 	.word	0x20000378

080025e8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80025ea:	f04f 0310 	mov.w	r3, #16
 80025ee:	f3ef 8511 	mrs	r5, BASEPRI
 80025f2:	f383 8812 	msr	BASEPRI_MAX, r3
 80025f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80025fa:	491a      	ldr	r1, [pc, #104]	; (8002664 <z_impl_k_yield+0x7c>)
 80025fc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80025fe:	7b43      	ldrb	r3, [r0, #13]
 8002600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002604:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002606:	f000 fef0 	bl	80033ea <sys_dlist_remove>
	}
	queue_thread(_current);
 800260a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800260c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 800260e:	4608      	mov	r0, r1
 8002610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002614:	735a      	strb	r2, [r3, #13]
 8002616:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800261a:	4282      	cmp	r2, r0
 800261c:	d01c      	beq.n	8002658 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800261e:	b1da      	cbz	r2, 8002658 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 8002620:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 8002622:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8002626:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 800262a:	42a6      	cmp	r6, r4
 800262c:	d00f      	beq.n	800264e <z_impl_k_yield+0x66>
		return b2 - b1;
 800262e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002630:	2c00      	cmp	r4, #0
 8002632:	dd0c      	ble.n	800264e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8002634:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8002636:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 800263a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 800263c:	6053      	str	r3, [r2, #4]
	update_cache(1);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff fe72 	bl	8002328 <update_cache>
 8002644:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8002646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800264a:	f7fe bc63 	b.w	8000f14 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 800264e:	42ba      	cmp	r2, r7
 8002650:	d002      	beq.n	8002658 <z_impl_k_yield+0x70>
 8002652:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002654:	2a00      	cmp	r2, #0
 8002656:	d1e6      	bne.n	8002626 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8002658:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 800265a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 800265e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8002660:	620b      	str	r3, [r1, #32]
}
 8002662:	e7ec      	b.n	800263e <z_impl_k_yield+0x56>
 8002664:	20000378 	.word	0x20000378

08002668 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8002668:	ea50 0301 	orrs.w	r3, r0, r1
{
 800266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002670:	4605      	mov	r5, r0
 8002672:	460e      	mov	r6, r1
	if (ticks == 0) {
 8002674:	d103      	bne.n	800267e <z_tick_sleep+0x16>
		arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
 8002676:	f7ff ffb7 	bl	80025e8 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 800267a:	2000      	movs	r0, #0
 800267c:	e033      	b.n	80026e6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 800267e:	f06f 0401 	mvn.w	r4, #1
 8002682:	1a24      	subs	r4, r4, r0
 8002684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002688:	eb63 0301 	sbc.w	r3, r3, r1
 800268c:	2c01      	cmp	r4, #1
 800268e:	f173 0300 	sbcs.w	r3, r3, #0
 8002692:	da02      	bge.n	800269a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8002694:	f000 ff39 	bl	800350a <sys_clock_tick_get_32>
 8002698:	1944      	adds	r4, r0, r5
 800269a:	f04f 0310 	mov.w	r3, #16
 800269e:	f3ef 8811 	mrs	r8, BASEPRI
 80026a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80026a6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 80026aa:	4f10      	ldr	r7, [pc, #64]	; (80026ec <z_tick_sleep+0x84>)
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <z_tick_sleep+0x88>)
 80026ae:	68b8      	ldr	r0, [r7, #8]
 80026b0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 80026b2:	f7ff ff27 	bl	8002504 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80026b6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <z_tick_sleep+0x8c>)
 80026ba:	462a      	mov	r2, r5
 80026bc:	4633      	mov	r3, r6
 80026be:	3018      	adds	r0, #24
 80026c0:	f000 f8f0 	bl	80028a4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	7b53      	ldrb	r3, [r2, #13]
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	7353      	strb	r3, [r2, #13]
 80026ce:	4640      	mov	r0, r8
 80026d0:	f7fe fc20 	bl	8000f14 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80026d4:	f000 ff19 	bl	800350a <sys_clock_tick_get_32>
 80026d8:	1a20      	subs	r0, r4, r0
 80026da:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80026de:	2801      	cmp	r0, #1
 80026e0:	f173 0300 	sbcs.w	r3, r3, #0
 80026e4:	dbc9      	blt.n	800267a <z_tick_sleep+0x12>
}
 80026e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026ea:	bf00      	nop
 80026ec:	20000378 	.word	0x20000378
 80026f0:	2000039c 	.word	0x2000039c
 80026f4:	08003467 	.word	0x08003467

080026f8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80026f8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80026fc:	bf08      	it	eq
 80026fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8002702:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002704:	d106      	bne.n	8002714 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <z_impl_k_sleep+0x2c>)
 8002708:	6898      	ldr	r0, [r3, #8]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 800270a:	f7ff ff13 	bl	8002534 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 800270e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8002712:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8002714:	f7ff ffa8 	bl	8002668 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8002718:	220a      	movs	r2, #10
 800271a:	2300      	movs	r3, #0
 800271c:	17c1      	asrs	r1, r0, #31
 800271e:	f7fd fd3b 	bl	8000198 <__aeabi_uldivmod>
	return ret;
 8002722:	e7f6      	b.n	8002712 <z_impl_k_sleep+0x1a>
 8002724:	20000378 	.word	0x20000378

08002728 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002728:	4b01      	ldr	r3, [pc, #4]	; (8002730 <z_impl_z_current_get+0x8>)
 800272a:	6898      	ldr	r0, [r3, #8]
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000378 	.word	0x20000378

08002734 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8002734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002738:	4604      	mov	r4, r0
 800273a:	f04f 0310 	mov.w	r3, #16
 800273e:	f3ef 8611 	mrs	r6, BASEPRI
 8002742:	f383 8812 	msr	BASEPRI_MAX, r3
 8002746:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800274a:	7b43      	ldrb	r3, [r0, #13]
 800274c:	071a      	lsls	r2, r3, #28
 800274e:	d505      	bpl.n	800275c <z_thread_abort+0x28>
	__asm__ volatile(
 8002750:	f386 8811 	msr	BASEPRI, r6
 8002754:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8002758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800275c:	f023 0220 	bic.w	r2, r3, #32
 8002760:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8002764:	09d2      	lsrs	r2, r2, #7
 8002766:	d120      	bne.n	80027aa <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002768:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 800276a:	68a3      	ldr	r3, [r4, #8]
 800276c:	b113      	cbz	r3, 8002774 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 800276e:	4620      	mov	r0, r4
 8002770:	f000 fe43 	bl	80033fa <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8002774:	f104 0018 	add.w	r0, r4, #24
 8002778:	f000 fe97 	bl	80034aa <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800277c:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002780:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8002784:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002786:	42bd      	cmp	r5, r7
 8002788:	d000      	beq.n	800278c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800278a:	b9b5      	cbnz	r5, 80027ba <z_thread_abort+0x86>
		update_cache(1);
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fdcb 	bl	8002328 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <z_thread_abort+0xa0>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	42a3      	cmp	r3, r4
 8002798:	d1da      	bne.n	8002750 <z_thread_abort+0x1c>
 800279a:	f3ef 8305 	mrs	r3, IPSR
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1d6      	bne.n	8002750 <z_thread_abort+0x1c>
 80027a2:	4630      	mov	r0, r6
 80027a4:	f7fe fbb6 	bl	8000f14 <arch_swap>
	return ret;
 80027a8:	e7d2      	b.n	8002750 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80027aa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80027ae:	f043 0308 	orr.w	r3, r3, #8
 80027b2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80027b4:	f000 fe19 	bl	80033ea <sys_dlist_remove>
}
 80027b8:	e7d7      	b.n	800276a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 80027ba:	4628      	mov	r0, r5
 80027bc:	f000 fe1d 	bl	80033fa <unpend_thread_no_timeout>
 80027c0:	f105 0018 	add.w	r0, r5, #24
 80027c4:	f000 fe71 	bl	80034aa <z_abort_timeout>
 80027c8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 80027cc:	4628      	mov	r0, r5
 80027ce:	f7ff fe45 	bl	800245c <ready_thread>
 80027d2:	e7d7      	b.n	8002784 <z_thread_abort+0x50>
 80027d4:	20000378 	.word	0x20000378

080027d8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 80027d8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
 80027da:	4806      	ldr	r0, [pc, #24]	; (80027f4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <z_data_copy+0x20>)
 80027de:	4907      	ldr	r1, [pc, #28]	; (80027fc <z_data_copy+0x24>)
 80027e0:	1a12      	subs	r2, r2, r0
 80027e2:	f000 fabe 	bl	8002d62 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80027e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <z_data_copy+0x28>)
 80027ec:	4905      	ldr	r1, [pc, #20]	; (8002804 <z_data_copy+0x2c>)
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <z_data_copy+0x30>)
 80027f0:	f000 bab7 	b.w	8002d62 <memcpy>
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000098 	.word	0x20000098
 80027fc:	08003ca8 	.word	0x08003ca8
 8002800:	00000000 	.word	0x00000000
 8002804:	08003ca8 	.word	0x08003ca8
 8002808:	20000000 	.word	0x20000000

0800280c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <elapsed+0x10>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b90b      	cbnz	r3, 8002816 <elapsed+0xa>
 8002812:	f7ff ba7f 	b.w	8001d14 <sys_clock_elapsed>
}
 8002816:	2000      	movs	r0, #0
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	200003a8 	.word	0x200003a8

08002820 <next_timeout>:
	return list->head == list;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 8002822:	b510      	push	{r4, lr}
 8002824:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002826:	429c      	cmp	r4, r3
 8002828:	bf08      	it	eq
 800282a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800282c:	f7ff ffee 	bl	800280c <elapsed>
 8002830:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
 8002832:	b16c      	cbz	r4, 8002850 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8002834:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8002838:	1ac0      	subs	r0, r0, r3
 800283a:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 800283e:	2801      	cmp	r0, #1
 8002840:	f173 0200 	sbcs.w	r2, r3, #0
 8002844:	db0d      	blt.n	8002862 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8002846:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800284a:	f173 0300 	sbcs.w	r3, r3, #0
 800284e:	db01      	blt.n	8002854 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 8002850:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <next_timeout+0x4c>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	b113      	cbz	r3, 8002860 <next_timeout+0x40>
 800285a:	4298      	cmp	r0, r3
 800285c:	bfa8      	it	ge
 800285e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8002860:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8002862:	2000      	movs	r0, #0
 8002864:	e7f6      	b.n	8002854 <next_timeout+0x34>
 8002866:	bf00      	nop
 8002868:	20000030 	.word	0x20000030
 800286c:	20000378 	.word	0x20000378

08002870 <remove_timeout>:
{
 8002870:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 8002872:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002874:	b168      	cbz	r0, 8002892 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <remove_timeout+0x30>)
 8002878:	6852      	ldr	r2, [r2, #4]
 800287a:	4290      	cmp	r0, r2
 800287c:	d009      	beq.n	8002892 <remove_timeout+0x22>
	if (next(t) != NULL) {
 800287e:	b143      	cbz	r3, 8002892 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8002880:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8002884:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002888:	1912      	adds	r2, r2, r4
 800288a:	eb41 0105 	adc.w	r1, r1, r5
 800288e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8002892:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8002894:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002896:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002898:	2300      	movs	r3, #0
	node->prev = NULL;
 800289a:	e9c0 3300 	strd	r3, r3, [r0]
}
 800289e:	bd30      	pop	{r4, r5, pc}
 80028a0:	20000030 	.word	0x20000030

080028a4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a8:	bf08      	it	eq
 80028aa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80028ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b0:	4604      	mov	r4, r0
 80028b2:	461f      	mov	r7, r3
 80028b4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80028b6:	d067      	beq.n	8002988 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80028b8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80028ba:	f04f 0310 	mov.w	r3, #16
 80028be:	f3ef 8611 	mrs	r6, BASEPRI
 80028c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80028c6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80028ca:	f06f 0201 	mvn.w	r2, #1
 80028ce:	1b53      	subs	r3, r2, r5
 80028d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80028d4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	db1b      	blt.n	8002914 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <z_add_timeout+0xe8>)
 80028de:	e9d3 1300 	ldrd	r1, r3, [r3]
 80028e2:	1a52      	subs	r2, r2, r1
 80028e4:	eb6c 0303 	sbc.w	r3, ip, r3
 80028e8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 80028ea:	eb63 0307 	sbc.w	r3, r3, r7
 80028ee:	2d01      	cmp	r5, #1
 80028f0:	f173 0200 	sbcs.w	r2, r3, #0
 80028f4:	bfbc      	itt	lt
 80028f6:	2501      	movlt	r5, #1
 80028f8:	2300      	movlt	r3, #0
 80028fa:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 80028fe:	4824      	ldr	r0, [pc, #144]	; (8002990 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 8002900:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002904:	4283      	cmp	r3, r0
 8002906:	d118      	bne.n	800293a <z_add_timeout+0x96>
	node->prev = tail;
 8002908:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 800290c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8002910:	6044      	str	r4, [r0, #4]
}
 8002912:	e026      	b.n	8002962 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8002914:	f7ff ff7a 	bl	800280c <elapsed>
 8002918:	3501      	adds	r5, #1
 800291a:	f147 0700 	adc.w	r7, r7, #0
 800291e:	182d      	adds	r5, r5, r0
 8002920:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8002924:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8002928:	e7e9      	b.n	80028fe <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 800292a:	1a52      	subs	r2, r2, r1
 800292c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8002930:	459c      	cmp	ip, r3
 8002932:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8002936:	d0e7      	beq.n	8002908 <z_add_timeout+0x64>
 8002938:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0e4      	beq.n	8002908 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 800293e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8002942:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8002946:	428a      	cmp	r2, r1
 8002948:	eb75 0e07 	sbcs.w	lr, r5, r7
 800294c:	daed      	bge.n	800292a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 800294e:	1a8a      	subs	r2, r1, r2
 8002950:	eb67 0505 	sbc.w	r5, r7, r5
 8002954:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8002958:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800295a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800295e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8002960:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8002962:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002964:	4283      	cmp	r3, r0
 8002966:	d00b      	beq.n	8002980 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002968:	429c      	cmp	r4, r3
 800296a:	d109      	bne.n	8002980 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800296c:	f7ff ff58 	bl	8002820 <next_timeout>

			if (next_time == 0 ||
 8002970:	b118      	cbz	r0, 800297a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	4283      	cmp	r3, r0
 8002978:	d002      	beq.n	8002980 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 800297a:	2100      	movs	r1, #0
 800297c:	f7ff f95a 	bl	8001c34 <sys_clock_set_timeout>
	__asm__ volatile(
 8002980:	f386 8811 	msr	BASEPRI, r6
 8002984:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8002988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800298a:	bf00      	nop
 800298c:	20000218 	.word	0x20000218
 8002990:	20000030 	.word	0x20000030
 8002994:	20000378 	.word	0x20000378

08002998 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8002998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800299c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800299e:	f7ff fd1d 	bl	80023dc <z_time_slice>
	__asm__ volatile(
 80029a2:	f04f 0310 	mov.w	r3, #16
 80029a6:	f3ef 8411 	mrs	r4, BASEPRI
 80029aa:	f383 8812 	msr	BASEPRI_MAX, r3
 80029ae:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80029b2:	4e24      	ldr	r6, [pc, #144]	; (8002a44 <sys_clock_announce+0xac>)
	return list->head == list;
 80029b4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002a48 <sys_clock_announce+0xb0>
 80029b8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 80029ba:	4d24      	ldr	r5, [pc, #144]	; (8002a4c <sys_clock_announce+0xb4>)
 80029bc:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80029c0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80029c2:	4540      	cmp	r0, r8
		curr_tick += dt;
 80029c4:	e9d5 1e00 	ldrd	r1, lr, [r5]
 80029c8:	ea4f 77e2 	mov.w	r7, r2, asr #31
 80029cc:	d00b      	beq.n	80029e6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80029ce:	b150      	cbz	r0, 80029e6 <sys_clock_announce+0x4e>
 80029d0:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	eb77 090c 	sbcs.w	r9, r7, ip
 80029da:	da16      	bge.n	8002a0a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	eb6c 0c07 	sbc.w	ip, ip, r7
 80029e2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 80029e6:	1852      	adds	r2, r2, r1
 80029e8:	eb4e 0707 	adc.w	r7, lr, r7
 80029ec:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 80029f0:	2500      	movs	r5, #0
 80029f2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80029f4:	f7ff ff14 	bl	8002820 <next_timeout>
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7ff f91b 	bl	8001c34 <sys_clock_set_timeout>
	__asm__ volatile(
 80029fe:	f384 8811 	msr	BASEPRI, r4
 8002a02:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8002a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8002a0a:	1859      	adds	r1, r3, r1
 8002a0c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8002a14:	2200      	movs	r2, #0
 8002a16:	2300      	movs	r3, #0
 8002a18:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8002a1c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8002a20:	f7ff ff26 	bl	8002870 <remove_timeout>
 8002a24:	f384 8811 	msr	BASEPRI, r4
 8002a28:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002a2c:	6883      	ldr	r3, [r0, #8]
 8002a2e:	4798      	blx	r3
	__asm__ volatile(
 8002a30:	f04f 0310 	mov.w	r3, #16
 8002a34:	f3ef 8411 	mrs	r4, BASEPRI
 8002a38:	f383 8812 	msr	BASEPRI_MAX, r3
 8002a3c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8002a40:	e7bc      	b.n	80029bc <sys_clock_announce+0x24>
 8002a42:	bf00      	nop
 8002a44:	200003a8 	.word	0x200003a8
 8002a48:	20000030 	.word	0x20000030
 8002a4c:	20000218 	.word	0x20000218

08002a50 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8002a50:	b510      	push	{r4, lr}
 8002a52:	f04f 0310 	mov.w	r3, #16
 8002a56:	f3ef 8411 	mrs	r4, BASEPRI
 8002a5a:	f383 8812 	msr	BASEPRI_MAX, r3
 8002a5e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 8002a62:	f7ff f957 	bl	8001d14 <sys_clock_elapsed>
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <sys_clock_tick_get+0x2c>)
 8002a68:	e9d2 3100 	ldrd	r3, r1, [r2]
 8002a6c:	18c0      	adds	r0, r0, r3
 8002a6e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8002a72:	f384 8811 	msr	BASEPRI, r4
 8002a76:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8002a7a:	bd10      	pop	{r4, pc}
 8002a7c:	20000218 	.word	0x20000218

08002a80 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8002a80:	4a02      	ldr	r2, [pc, #8]	; (8002a8c <boot_banner+0xc>)
 8002a82:	4903      	ldr	r1, [pc, #12]	; (8002a90 <boot_banner+0x10>)
 8002a84:	4803      	ldr	r0, [pc, #12]	; (8002a94 <boot_banner+0x14>)
 8002a86:	f000 b8c9 	b.w	8002c1c <printk>
 8002a8a:	bf00      	nop
 8002a8c:	08003ca5 	.word	0x08003ca5
 8002a90:	08003c64 	.word	0x08003c64
 8002a94:	08003c7f 	.word	0x08003c7f

08002a98 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8002a98:	4770      	bx	lr

08002a9a <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	fa03 f101 	lsl.w	r1, r3, r1
 8002aa0:	6903      	ldr	r3, [r0, #16]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4219      	tst	r1, r3
 8002aa6:	d003      	beq.n	8002ab0 <gpio_pin_set.isra.0+0x16>
	if (value != 0)	{
 8002aa8:	b122      	cbz	r2, 8002ab4 <gpio_pin_set.isra.0+0x1a>
	return api->port_clear_bits_raw(port, pins);
 8002aaa:	6883      	ldr	r3, [r0, #8]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	e003      	b.n	8002ab8 <gpio_pin_set.isra.0+0x1e>
	if (value != 0)	{
 8002ab0:	2a00      	cmp	r2, #0
 8002ab2:	d0fa      	beq.n	8002aaa <gpio_pin_set.isra.0+0x10>
	return api->port_set_bits_raw(port, pins);
 8002ab4:	6883      	ldr	r3, [r0, #8]
 8002ab6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8002ab8:	4718      	bx	r3

08002aba <k_msleep.isra.0>:
			return t * ((uint64_t)to_hz / from_hz);
 8002aba:	210a      	movs	r1, #10
 8002abc:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 8002ac0:	f7ff be1a 	b.w	80026f8 <z_impl_k_sleep>

08002ac4 <datamode>:
	gpio_pin_set(inputdevice, RS_PIN, 1);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2105      	movs	r1, #5
 8002ac8:	f7ff bfe7 	b.w	8002a9a <gpio_pin_set.isra.0>

08002acc <commandmode>:
	gpio_pin_set(inputdevice, RS_PIN, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2105      	movs	r1, #5
 8002ad0:	f7ff bfe3 	b.w	8002a9a <gpio_pin_set.isra.0>

08002ad4 <epulse>:
void epulse(const struct device *inputdevice){ //function used in other LCD related functions to set EN on or off
 8002ad4:	b510      	push	{r4, lr}
	gpio_pin_set(inputdevice, E_PIN, 1);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2104      	movs	r1, #4
void epulse(const struct device *inputdevice){ //function used in other LCD related functions to set EN on or off
 8002ada:	4604      	mov	r4, r0
	gpio_pin_set(inputdevice, E_PIN, 1);
 8002adc:	f7ff ffdd 	bl	8002a9a <gpio_pin_set.isra.0>
	k_msleep(2);
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	f7ff ffea 	bl	8002aba <k_msleep.isra.0>
	gpio_pin_set(inputdevice, E_PIN, 0);
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	2200      	movs	r2, #0
}
 8002aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_pin_set(inputdevice, E_PIN, 0);
 8002aee:	2104      	movs	r1, #4
 8002af0:	f7ff bfd3 	b.w	8002a9a <gpio_pin_set.isra.0>

08002af4 <lcdinitwrite>:
void lcdinitwrite(const struct device *inputdev, uint8_t cmddata){ //function for writing half bits. used in initialization and the commandwrite functions
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	4604      	mov	r4, r0
 8002af8:	460d      	mov	r5, r1
	commandmode(inputdev);
 8002afa:	f7ff ffe7 	bl	8002acc <commandmode>
	gpio_pin_set(inputdev, D7_PIN, (cmddata & (1<<7)) ? 1 : 0);//bit shifting to get at the data in the register, pretty sure this is more optimized than just for looping over them with an array
 8002afe:	09ea      	lsrs	r2, r5, #7
 8002b00:	4620      	mov	r0, r4
 8002b02:	2100      	movs	r1, #0
 8002b04:	f7ff ffc9 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D6_PIN, (cmddata & (1<<6)) ? 1 : 0);
 8002b08:	f3c5 1280 	ubfx	r2, r5, #6, #1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f7ff ffc3 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D5_PIN, (cmddata & (1<<5)) ? 1 : 0);
 8002b14:	f3c5 1240 	ubfx	r2, r5, #5, #1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	f7ff ffbd 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D4_PIN, (cmddata & (1<<4)) ? 1 : 0);
 8002b20:	4620      	mov	r0, r4
 8002b22:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8002b26:	2103      	movs	r1, #3
 8002b28:	f7ff ffb7 	bl	8002a9a <gpio_pin_set.isra.0>
	epulse(inputdev); 
 8002b2c:	4620      	mov	r0, r4
}
 8002b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	epulse(inputdev); 
 8002b32:	f7ff bfcf 	b.w	8002ad4 <epulse>

08002b36 <lcdbytewrite>:
void lcdbytewrite(const struct device *inputdev,uint8_t data){ //
 8002b36:	b538      	push	{r3, r4, r5, lr}
	gpio_pin_set(inputdev, D7_PIN, (data & (1<<7)));//bit shifting to get at the data in the register, pretty sure this is more optimized than just for looping over them with an array
 8002b38:	f001 0280 	and.w	r2, r1, #128	; 0x80
void lcdbytewrite(const struct device *inputdev,uint8_t data){ //
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
	gpio_pin_set(inputdev, D7_PIN, (data & (1<<7)));//bit shifting to get at the data in the register, pretty sure this is more optimized than just for looping over them with an array
 8002b40:	2100      	movs	r1, #0
 8002b42:	f7ff ffaa 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D6_PIN, (data & (1<<6)));
 8002b46:	f005 0240 	and.w	r2, r5, #64	; 0x40
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	f7ff ffa4 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D5_PIN, (data & (1<<5)));
 8002b52:	f005 0220 	and.w	r2, r5, #32
 8002b56:	4620      	mov	r0, r4
 8002b58:	2102      	movs	r1, #2
 8002b5a:	f7ff ff9e 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D4_PIN, (data & (1<<4)));
 8002b5e:	f005 0210 	and.w	r2, r5, #16
 8002b62:	2103      	movs	r1, #3
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7ff ff98 	bl	8002a9a <gpio_pin_set.isra.0>
	epulse(inputdev);	
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f7ff ffb2 	bl	8002ad4 <epulse>
	gpio_pin_set(inputdev, D7_PIN, (data & (1<<3)));
 8002b70:	f005 0208 	and.w	r2, r5, #8
 8002b74:	4620      	mov	r0, r4
 8002b76:	2100      	movs	r1, #0
 8002b78:	f7ff ff8f 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D6_PIN, (data & (1<<2)));
 8002b7c:	f005 0204 	and.w	r2, r5, #4
 8002b80:	4620      	mov	r0, r4
 8002b82:	2101      	movs	r1, #1
 8002b84:	f7ff ff89 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D5_PIN, (data & (1<<1)));
 8002b88:	f005 0202 	and.w	r2, r5, #2
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	2102      	movs	r1, #2
 8002b90:	f7ff ff83 	bl	8002a9a <gpio_pin_set.isra.0>
	gpio_pin_set(inputdev, D4_PIN, (data & (1<<0)));
 8002b94:	4620      	mov	r0, r4
 8002b96:	f005 0201 	and.w	r2, r5, #1
 8002b9a:	2103      	movs	r1, #3
 8002b9c:	f7ff ff7d 	bl	8002a9a <gpio_pin_set.isra.0>
	epulse(inputdev);
 8002ba0:	4620      	mov	r0, r4
}
 8002ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	epulse(inputdev);
 8002ba6:	f7ff bf95 	b.w	8002ad4 <epulse>

08002baa <lcdcmdwrite>:
void lcdcmdwrite(const struct device *inputdev, uint8_t cmddata){
 8002baa:	b538      	push	{r3, r4, r5, lr}
 8002bac:	4604      	mov	r4, r0
 8002bae:	460d      	mov	r5, r1
	commandmode(inputdev);
 8002bb0:	f7ff ff8c 	bl	8002acc <commandmode>
	lcdbytewrite(inputdev, cmddata);
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	4620      	mov	r0, r4
}
 8002bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcdbytewrite(inputdev, cmddata);
 8002bbc:	f7ff bfbb 	b.w	8002b36 <lcdbytewrite>

08002bc0 <lcddatawrite>:
void lcddatawrite(const struct device *inputdev, uint8_t data){
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	460d      	mov	r5, r1
	datamode(inputdev);
 8002bc6:	f7ff ff7d 	bl	8002ac4 <datamode>
	lcdbytewrite(inputdev, data);
 8002bca:	4629      	mov	r1, r5
 8002bcc:	4620      	mov	r0, r4
}
 8002bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcdbytewrite(inputdev, data);
 8002bd2:	f7ff bfb0 	b.w	8002b36 <lcdbytewrite>

08002bd6 <lcdcursorposition>:
	switch (rowpos){
 8002bd6:	b111      	cbz	r1, 8002bde <lcdcursorposition+0x8>
 8002bd8:	2901      	cmp	r1, #1
 8002bda:	d108      	bne.n	8002bee <lcdcursorposition+0x18>
 8002bdc:	2140      	movs	r1, #64	; 0x40
	if (colpos < 16){
 8002bde:	2a0f      	cmp	r2, #15
 8002be0:	d805      	bhi.n	8002bee <lcdcursorposition+0x18>
		hexadress += colpos; // add the number to the position register, this is done this way because we cant possibly fuck up our row position.
 8002be2:	4411      	add	r1, r2
	hexadress |= ddram;
 8002be4:	f061 017f 	orn	r1, r1, #127	; 0x7f
	lcdcmdwrite(inputdevice, hexadress);
 8002be8:	b2c9      	uxtb	r1, r1
 8002bea:	f7ff bfde 	b.w	8002baa <lcdcmdwrite>
}
 8002bee:	4770      	bx	lr

08002bf0 <gpio_pin_set.constprop.0.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8002bf0:	6903      	ldr	r3, [r0, #16]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	041b      	lsls	r3, r3, #16
		value = (value != 0) ? 0 : 1;
 8002bf6:	bf48      	it	mi
 8002bf8:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
 8002bfc:	b121      	cbz	r1, 8002c08 <gpio_pin_set.constprop.0.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
 8002bfe:	6883      	ldr	r3, [r0, #8]
 8002c00:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8002c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c06:	4718      	bx	r3
 8002c08:	6883      	ldr	r3, [r0, #8]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	e7f9      	b.n	8002c02 <gpio_pin_set.constprop.0.isra.0+0x12>

08002c0e <k_msleep.isra.0>:
 8002c0e:	210a      	movs	r1, #10
 8002c10:	fb80 0101 	smull	r0, r1, r0, r1
 8002c14:	f7ff bd70 	b.w	80026f8 <z_impl_k_sleep>

08002c18 <arch_printk_char_out>:
}
 8002c18:	2000      	movs	r0, #0
 8002c1a:	4770      	bx	lr

08002c1c <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
 8002c1c:	b40f      	push	{r0, r1, r2, r3}
 8002c1e:	b507      	push	{r0, r1, r2, lr}
 8002c20:	a904      	add	r1, sp, #16
 8002c22:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002c26:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8002c28:	f7fd fce4 	bl	80005f4 <vprintk>
	}
	va_end(ap);
}
 8002c2c:	b003      	add	sp, #12
 8002c2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c32:	b004      	add	sp, #16
 8002c34:	4770      	bx	lr

08002c36 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002c36:	4604      	mov	r4, r0
 8002c38:	b508      	push	{r3, lr}
 8002c3a:	4608      	mov	r0, r1
 8002c3c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8002c3e:	461a      	mov	r2, r3
 8002c40:	47a0      	blx	r4
	return z_impl_z_current_get();
 8002c42:	f7ff fd71 	bl	8002728 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8002c46:	f7fe fb3f 	bl	80012c8 <z_impl_k_thread_abort>

08002c4a <encode_uint>:
{
 8002c4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8002c50:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 8002c52:	2b6f      	cmp	r3, #111	; 0x6f
{
 8002c54:	4680      	mov	r8, r0
 8002c56:	460f      	mov	r7, r1
 8002c58:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8002c5a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8002c5e:	d029      	beq.n	8002cb4 <encode_uint+0x6a>
 8002c60:	d824      	bhi.n	8002cac <encode_uint+0x62>
		return 16;
 8002c62:	2b58      	cmp	r3, #88	; 0x58
 8002c64:	bf14      	ite	ne
 8002c66:	260a      	movne	r6, #10
 8002c68:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8002c6a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8002c6e:	4632      	mov	r2, r6
 8002c70:	2300      	movs	r3, #0
 8002c72:	4640      	mov	r0, r8
 8002c74:	4639      	mov	r1, r7
 8002c76:	f7fd fa8f 	bl	8000198 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002c7a:	2a09      	cmp	r2, #9
 8002c7c:	b2d4      	uxtb	r4, r2
 8002c7e:	d81e      	bhi.n	8002cbe <encode_uint+0x74>
 8002c80:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8002c82:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002c84:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8002c86:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002c8a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002c8e:	d301      	bcc.n	8002c94 <encode_uint+0x4a>
 8002c90:	45d1      	cmp	r9, sl
 8002c92:	d811      	bhi.n	8002cb8 <encode_uint+0x6e>
	if (conv->flag_hash) {
 8002c94:	782b      	ldrb	r3, [r5, #0]
 8002c96:	069b      	lsls	r3, r3, #26
 8002c98:	d505      	bpl.n	8002ca6 <encode_uint+0x5c>
		if (radix == 8) {
 8002c9a:	2e08      	cmp	r6, #8
 8002c9c:	d115      	bne.n	8002cca <encode_uint+0x80>
			conv->altform_0 = true;
 8002c9e:	78ab      	ldrb	r3, [r5, #2]
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002ca4:	70ab      	strb	r3, [r5, #2]
}
 8002ca6:	4648      	mov	r0, r9
 8002ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002cac:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8002cb0:	2b70      	cmp	r3, #112	; 0x70
 8002cb2:	e7d7      	b.n	8002c64 <encode_uint+0x1a>
	switch (specifier) {
 8002cb4:	2608      	movs	r6, #8
 8002cb6:	e7d8      	b.n	8002c6a <encode_uint+0x20>
		value /= radix;
 8002cb8:	4680      	mov	r8, r0
 8002cba:	460f      	mov	r7, r1
 8002cbc:	e7d7      	b.n	8002c6e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002cbe:	f1bb 0f19 	cmp.w	fp, #25
 8002cc2:	bf94      	ite	ls
 8002cc4:	3437      	addls	r4, #55	; 0x37
 8002cc6:	3457      	addhi	r4, #87	; 0x57
 8002cc8:	e7db      	b.n	8002c82 <encode_uint+0x38>
		} else if (radix == 16) {
 8002cca:	2e10      	cmp	r6, #16
 8002ccc:	d1eb      	bne.n	8002ca6 <encode_uint+0x5c>
			conv->altform_0c = true;
 8002cce:	78ab      	ldrb	r3, [r5, #2]
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	e7e6      	b.n	8002ca4 <encode_uint+0x5a>

08002cd6 <outs>:
{
 8002cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cda:	4607      	mov	r7, r0
 8002cdc:	4688      	mov	r8, r1
 8002cde:	4615      	mov	r5, r2
 8002ce0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002ce2:	4614      	mov	r4, r2
 8002ce4:	42b4      	cmp	r4, r6
 8002ce6:	eba4 0005 	sub.w	r0, r4, r5
 8002cea:	d302      	bcc.n	8002cf2 <outs+0x1c>
 8002cec:	b93e      	cbnz	r6, 8002cfe <outs+0x28>
 8002cee:	7823      	ldrb	r3, [r4, #0]
 8002cf0:	b12b      	cbz	r3, 8002cfe <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8002cf2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002cf6:	4641      	mov	r1, r8
 8002cf8:	47b8      	blx	r7
		if (rc < 0) {
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	daf2      	bge.n	8002ce4 <outs+0xe>
}
 8002cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d02 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002d02:	4770      	bx	lr

08002d04 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002d04:	2000      	movs	r0, #0
 8002d06:	4770      	bx	lr

08002d08 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002d08:	f000 bb48 	b.w	800339c <z_fatal_error>

08002d0c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8002d0c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002d0e:	6800      	ldr	r0, [r0, #0]
 8002d10:	f000 bb44 	b.w	800339c <z_fatal_error>

08002d14 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002d14:	2100      	movs	r1, #0
 8002d16:	2001      	movs	r0, #1
 8002d18:	f7ff bff6 	b.w	8002d08 <z_arm_fatal_error>

08002d1c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8002d1c:	b508      	push	{r3, lr}
	handler();
 8002d1e:	f7fe f8d1 	bl	8000ec4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002d26:	f7fe b9a5 	b.w	8001074 <z_arm_exc_exit>

08002d2a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002d2a:	4603      	mov	r3, r0
	size_t n = 0;
 8002d2c:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002d2e:	5c1a      	ldrb	r2, [r3, r0]
 8002d30:	b902      	cbnz	r2, 8002d34 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002d32:	4770      	bx	lr
		n++;
 8002d34:	3001      	adds	r0, #1
 8002d36:	e7fa      	b.n	8002d2e <strlen+0x4>

08002d38 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002d38:	4603      	mov	r3, r0
	size_t n = 0;
 8002d3a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002d3c:	5c1a      	ldrb	r2, [r3, r0]
 8002d3e:	b10a      	cbz	r2, 8002d44 <strnlen+0xc>
 8002d40:	4288      	cmp	r0, r1
 8002d42:	d100      	bne.n	8002d46 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002d44:	4770      	bx	lr
		n++;
 8002d46:	3001      	adds	r0, #1
 8002d48:	e7f8      	b.n	8002d3c <strnlen+0x4>

08002d4a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8002d4a:	1e43      	subs	r3, r0, #1
 8002d4c:	3901      	subs	r1, #1
 8002d4e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002d52:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002d56:	4282      	cmp	r2, r0
 8002d58:	d101      	bne.n	8002d5e <strcmp+0x14>
 8002d5a:	2a00      	cmp	r2, #0
 8002d5c:	d1f7      	bne.n	8002d4e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8002d5e:	1a10      	subs	r0, r2, r0
 8002d60:	4770      	bx	lr

08002d62 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8002d62:	b510      	push	{r4, lr}
 8002d64:	1e43      	subs	r3, r0, #1
 8002d66:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002d68:	4291      	cmp	r1, r2
 8002d6a:	d100      	bne.n	8002d6e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002d6c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8002d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d72:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002d76:	e7f7      	b.n	8002d68 <memcpy+0x6>

08002d78 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002d78:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002d7a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8002d7c:	4603      	mov	r3, r0
	while (n > 0) {
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d100      	bne.n	8002d84 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002d82:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002d84:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002d88:	e7f9      	b.n	8002d7e <memset+0x6>

08002d8a <_stdout_hook_default>:
}
 8002d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d8e:	4770      	bx	lr

08002d90 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8002d90:	2200      	movs	r2, #0
{
 8002d92:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002d94:	4611      	mov	r1, r2
 8002d96:	2006      	movs	r0, #6
 8002d98:	f7fe f87c 	bl	8000e94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	4611      	mov	r1, r2
 8002da0:	2007      	movs	r0, #7
 8002da2:	f7fe f877 	bl	8000e94 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002da6:	2200      	movs	r2, #0
 8002da8:	4611      	mov	r1, r2
 8002daa:	2008      	movs	r0, #8
 8002dac:	f7fe f872 	bl	8000e94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002db0:	2200      	movs	r2, #0
 8002db2:	4611      	mov	r1, r2
 8002db4:	2009      	movs	r0, #9
 8002db6:	f7fe f86d 	bl	8000e94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	200a      	movs	r0, #10
 8002dc0:	f7fe f868 	bl	8000e94 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	2017      	movs	r0, #23
 8002dca:	f7fe f863 	bl	8000e94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	2028      	movs	r0, #40	; 0x28
 8002dd4:	f7fe f85e 	bl	8000e94 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4611      	mov	r1, r2
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f7fe f859 	bl	8000e94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002de2:	2200      	movs	r2, #0
 8002de4:	4611      	mov	r1, r2
 8002de6:	202a      	movs	r0, #42	; 0x2a
 8002de8:	f7fe f854 	bl	8000e94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8002dec:	2200      	movs	r2, #0
 8002dee:	4611      	mov	r1, r2
 8002df0:	2002      	movs	r0, #2
 8002df2:	f7fe f84f 	bl	8000e94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002df6:	2200      	movs	r2, #0
 8002df8:	4611      	mov	r1, r2
 8002dfa:	2003      	movs	r0, #3
 8002dfc:	f7fe f84a 	bl	8000e94 <z_arm_irq_priority_set>
}
 8002e00:	2000      	movs	r0, #0
 8002e02:	bd08      	pop	{r3, pc}

08002e04 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 8002e04:	6902      	ldr	r2, [r0, #16]
 8002e06:	2117      	movs	r1, #23
 8002e08:	2016      	movs	r0, #22
 8002e0a:	f7fe bb3b 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e0e <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8002e0e:	6902      	ldr	r2, [r0, #16]
 8002e10:	2116      	movs	r1, #22
 8002e12:	2015      	movs	r0, #21
 8002e14:	f7fe bb36 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e18 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 8002e18:	6902      	ldr	r2, [r0, #16]
 8002e1a:	2113      	movs	r1, #19
 8002e1c:	2012      	movs	r0, #18
 8002e1e:	f7fe bb31 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e22 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 8002e22:	6902      	ldr	r2, [r0, #16]
 8002e24:	2111      	movs	r1, #17
 8002e26:	2010      	movs	r0, #16
 8002e28:	f7fe bb2c 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e2c <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8002e2c:	6902      	ldr	r2, [r0, #16]
 8002e2e:	2110      	movs	r1, #16
 8002e30:	200a      	movs	r0, #10
 8002e32:	f7fe bb27 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e36 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8002e36:	6902      	ldr	r2, [r0, #16]
 8002e38:	210a      	movs	r1, #10
 8002e3a:	2005      	movs	r0, #5
 8002e3c:	f7fe bb22 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e40 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8002e40:	6902      	ldr	r2, [r0, #16]
 8002e42:	2105      	movs	r1, #5
 8002e44:	2004      	movs	r0, #4
 8002e46:	f7fe bb1d 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e4a <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8002e4a:	6902      	ldr	r2, [r0, #16]
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	2003      	movs	r0, #3
 8002e50:	f7fe bb18 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e54 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8002e54:	6902      	ldr	r2, [r0, #16]
 8002e56:	2103      	movs	r1, #3
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f7fe bb13 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e5e <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8002e5e:	6902      	ldr	r2, [r0, #16]
 8002e60:	2102      	movs	r1, #2
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7fe bb0e 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e68 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8002e68:	6902      	ldr	r2, [r0, #16]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7fe bb09 	b.w	8001484 <__stm32_exti_isr.isra.0>

08002e72 <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8002e72:	2360      	movs	r3, #96	; 0x60
 8002e74:	2204      	movs	r2, #4
 8002e76:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(STM32_PLL_P_DIVISOR);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6083      	str	r3, [r0, #8]
}
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8002e80:	4770      	bx	lr

08002e82 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002e82:	6843      	ldr	r3, [r0, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002e86:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002e88:	600b      	str	r3, [r1, #0]
}
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	4770      	bx	lr

08002e8e <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002e8e:	6843      	ldr	r3, [r0, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002e92:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002e94:	4042      	eors	r2, r0
 8002e96:	400a      	ands	r2, r1
 8002e98:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002e9a:	615a      	str	r2, [r3, #20]
}
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	4770      	bx	lr

08002ea0 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002ea0:	6843      	ldr	r3, [r0, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
}
 8002ea4:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002ea6:	6199      	str	r1, [r3, #24]
}
 8002ea8:	4770      	bx	lr

08002eaa <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002eaa:	6843      	ldr	r3, [r0, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002eae:	0409      	lsls	r1, r1, #16
 8002eb0:	6199      	str	r1, [r3, #24]
}
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	4770      	bx	lr

08002eb6 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002eb6:	6843      	ldr	r3, [r0, #4]
 8002eb8:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002eba:	6953      	ldr	r3, [r2, #20]
 8002ebc:	404b      	eors	r3, r1
 8002ebe:	6153      	str	r3, [r2, #20]
}
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	4770      	bx	lr

08002ec4 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->data;
 8002ec4:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002ec6:	6898      	ldr	r0, [r3, #8]
{
 8002ec8:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002eca:	b158      	cbz	r0, 8002ee4 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002ecc:	2400      	movs	r4, #0
 8002ece:	4281      	cmp	r1, r0
 8002ed0:	d112      	bne.n	8002ef8 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8002ed2:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8002ed4:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8002ed6:	b954      	cbnz	r4, 8002eee <gpio_stm32_manage_callback+0x2a>
 8002ed8:	428d      	cmp	r5, r1
	list->head = node;
 8002eda:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002edc:	d100      	bne.n	8002ee0 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002ede:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8002ee4:	b96a      	cbnz	r2, 8002f02 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002ee6:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8002ee8:	bd30      	pop	{r4, r5, pc}
 8002eea:	4628      	mov	r0, r5
 8002eec:	e7ef      	b.n	8002ece <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8002eee:	428d      	cmp	r5, r1
	parent->next = child;
 8002ef0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8002ef2:	bf08      	it	eq
 8002ef4:	60dc      	streq	r4, [r3, #12]
}
 8002ef6:	e7f3      	b.n	8002ee0 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8002ef8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002efa:	4604      	mov	r4, r0
 8002efc:	2d00      	cmp	r5, #0
 8002efe:	d1f4      	bne.n	8002eea <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8002f00:	b13a      	cbz	r2, 8002f12 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8002f02:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	600a      	str	r2, [r1, #0]
	list->head = node;
 8002f08:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d1eb      	bne.n	8002ee6 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8002f0e:	60d9      	str	r1, [r3, #12]
}
 8002f10:	e7ea      	b.n	8002ee8 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8002f12:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002f16:	e7e7      	b.n	8002ee8 <gpio_stm32_manage_callback+0x24>

08002f18 <gpio_stm32_isr>:
{
 8002f18:	460b      	mov	r3, r1
 8002f1a:	6889      	ldr	r1, [r1, #8]
 8002f1c:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002f1e:	b169      	cbz	r1, 8002f3c <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002f20:	2501      	movs	r5, #1
 8002f22:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8002f24:	680c      	ldr	r4, [r1, #0]
 8002f26:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8002f28:	688a      	ldr	r2, [r1, #8]
 8002f2a:	402a      	ands	r2, r5
 8002f2c:	d002      	beq.n	8002f34 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002f2e:	684b      	ldr	r3, [r1, #4]
 8002f30:	4630      	mov	r0, r6
 8002f32:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002f34:	b114      	cbz	r4, 8002f3c <gpio_stm32_isr+0x24>
 8002f36:	4621      	mov	r1, r4
 8002f38:	6824      	ldr	r4, [r4, #0]
 8002f3a:	e7f5      	b.n	8002f28 <gpio_stm32_isr+0x10>
}
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}

08002f3e <gpio_stm32_configure>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f3e:	6840      	ldr	r0, [r0, #4]
{
 8002f40:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f42:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002f44:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f46:	6867      	ldr	r7, [r4, #4]
 8002f48:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002f4a:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8002f4e:	ea27 0700 	bic.w	r7, r7, r0
 8002f52:	408e      	lsls	r6, r1
 8002f54:	433e      	orrs	r6, r7
 8002f56:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002f5c:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f60:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002f64:	f04f 0e03 	mov.w	lr, #3
 8002f68:	007f      	lsls	r7, r7, #1
 8002f6a:	fa0e f707 	lsl.w	r7, lr, r7
 8002f6e:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8002f76:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002f7a:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8002f7e:	007f      	lsls	r7, r7, #1
 8002f80:	40be      	lsls	r6, r7
 8002f82:	ea46 060c 	orr.w	r6, r6, ip
 8002f86:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8002f8c:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f90:	68e7      	ldr	r7, [r4, #12]
 8002f92:	0076      	lsls	r6, r6, #1
 8002f94:	fa0e f606 	lsl.w	r6, lr, r6
 8002f98:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8002fa0:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8002fa4:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8002fa8:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002faa:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002fae:	40b2      	lsls	r2, r6
 8002fb0:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8002fb2:	2d20      	cmp	r5, #32
 8002fb4:	60e2      	str	r2, [r4, #12]
 8002fb6:	d115      	bne.n	8002fe4 <gpio_stm32_configure+0xa6>
		if (pin < 8) {
 8002fb8:	2907      	cmp	r1, #7
 8002fba:	dc2b      	bgt.n	8003014 <gpio_stm32_configure+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002fc0:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8002fc2:	b32a      	cbz	r2, 8003010 <gpio_stm32_configure+0xd2>
  return __builtin_clz(value);
 8002fc4:	fab2 f282 	clz	r2, r2
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	260f      	movs	r6, #15
 8002fcc:	fa06 f202 	lsl.w	r2, r6, r2
 8002fd0:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	0092      	lsls	r2, r2, #2
 8002fde:	4093      	lsls	r3, r2
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8002fe8:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002fec:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	fa90 f0a0 	rbit	r0, r0
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8002ff6:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002ffa:	092d      	lsrs	r5, r5, #4
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	0040      	lsls	r0, r0, #1
 8003002:	ea22 0303 	bic.w	r3, r2, r3
 8003006:	fa05 f000 	lsl.w	r0, r5, r0
 800300a:	4318      	orrs	r0, r3
 800300c:	6020      	str	r0, [r4, #0]
}
 800300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8003010:	462a      	mov	r2, r5
 8003012:	e7d9      	b.n	8002fc8 <gpio_stm32_configure+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003014:	0a02      	lsrs	r2, r0, #8
 8003016:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800301c:	b181      	cbz	r1, 8003040 <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 800301e:	fab1 f181 	clz	r1, r1
 8003022:	0089      	lsls	r1, r1, #2
 8003024:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800302a:	fab2 f282 	clz	r2, r2
 800302e:	fa07 f101 	lsl.w	r1, r7, r1
 8003032:	0092      	lsls	r2, r2, #2
 8003034:	ea26 0101 	bic.w	r1, r6, r1
 8003038:	4093      	lsls	r3, r2
 800303a:	430b      	orrs	r3, r1
 800303c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800303e:	e7d1      	b.n	8002fe4 <gpio_stm32_configure+0xa6>
    return 32U;
 8003040:	4629      	mov	r1, r5
 8003042:	e7ee      	b.n	8003022 <gpio_stm32_configure+0xe4>

08003044 <gpio_stm32_config>:
{
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	460d      	mov	r5, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 8003048:	0591      	lsls	r1, r2, #22
{
 800304a:	4604      	mov	r4, r0
 800304c:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 800304e:	d519      	bpl.n	8003084 <gpio_stm32_config+0x40>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8003050:	079a      	lsls	r2, r3, #30
 8003052:	d510      	bpl.n	8003076 <gpio_stm32_config+0x32>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8003054:	0758      	lsls	r0, r3, #29
 8003056:	d530      	bpl.n	80030ba <gpio_stm32_config+0x76>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8003058:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 800305a:	06d9      	lsls	r1, r3, #27
 800305c:	d50d      	bpl.n	800307a <gpio_stm32_config+0x36>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003062:	0519      	lsls	r1, r3, #20
 8003064:	d41e      	bmi.n	80030a4 <gpio_stm32_config+0x60>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8003066:	0558      	lsls	r0, r3, #21
 8003068:	d515      	bpl.n	8003096 <gpio_stm32_config+0x52>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800306a:	2101      	movs	r1, #1
 800306c:	40a9      	lsls	r1, r5
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff ff1b 	bl	8002eaa <gpio_stm32_port_clear_bits_raw>
 8003074:	e00f      	b.n	8003096 <gpio_stm32_config+0x52>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8003076:	2210      	movs	r2, #16
 8003078:	e7ef      	b.n	800305a <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800307a:	0698      	lsls	r0, r3, #26
 800307c:	d5f1      	bpl.n	8003062 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800307e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8003082:	e7ee      	b.n	8003062 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8003084:	05d1      	lsls	r1, r2, #23
 8003086:	d513      	bpl.n	80030b0 <gpio_stm32_config+0x6c>
		if ((flags & GPIO_PULL_UP) != 0) {
 8003088:	06da      	lsls	r2, r3, #27
 800308a:	d413      	bmi.n	80030b4 <gpio_stm32_config+0x70>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800308c:	f013 0220 	ands.w	r2, r3, #32
 8003090:	bf18      	it	ne
 8003092:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(dev, pin, pincfg, 0);
 8003096:	4620      	mov	r0, r4
 8003098:	2300      	movs	r3, #0
 800309a:	4629      	mov	r1, r5
 800309c:	f7ff ff4f 	bl	8002f3e <gpio_stm32_configure>
 80030a0:	2000      	movs	r0, #0
}
 80030a2:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030a4:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80030a6:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030a8:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80030aa:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 80030ac:	618b      	str	r3, [r1, #24]
	return 0;
 80030ae:	e7f2      	b.n	8003096 <gpio_stm32_config+0x52>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 80030b0:	2230      	movs	r2, #48	; 0x30
 80030b2:	e7f0      	b.n	8003096 <gpio_stm32_config+0x52>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80030b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b8:	e7ed      	b.n	8003096 <gpio_stm32_config+0x52>
				return -ENOTSUP;
 80030ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 80030be:	e7f0      	b.n	80030a2 <gpio_stm32_config+0x5e>

080030c0 <gpio_stm32_init>:
 */
static int gpio_stm32_init(const struct device *dev)
{
	struct gpio_stm32_data *data = dev->data;

	data->dev = dev;
 80030c0:	6902      	ldr	r2, [r0, #16]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_runtime_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 80030c2:	2101      	movs	r1, #1
	data->dev = dev;
 80030c4:	6050      	str	r0, [r2, #4]
	return gpio_stm32_clock_request(dev, true);
 80030c6:	f7fe bbf1 	b.w	80018ac <gpio_stm32_clock_request>

080030ca <LL_USART_ClearFlag_FE>:
{
 80030ca:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 80030cc:	6803      	ldr	r3, [r0, #0]
 80030ce:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80030d0:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 80030d2:	6843      	ldr	r3, [r0, #4]
 80030d4:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80030d6:	9b01      	ldr	r3, [sp, #4]
}
 80030d8:	b002      	add	sp, #8
 80030da:	4770      	bx	lr

080030dc <uart_stm32_poll_in>:
{
 80030dc:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80030de:	6843      	ldr	r3, [r0, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80030e2:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80030e4:	071a      	lsls	r2, r3, #28
 80030e6:	d501      	bpl.n	80030ec <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 80030e8:	f7ff ffef 	bl	80030ca <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80030ec:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 80030ee:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80030f0:	bf43      	ittte	mi
 80030f2:	6843      	ldrmi	r3, [r0, #4]
 80030f4:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80030f6:	2000      	movmi	r0, #0
		return -1;
 80030f8:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 80030fc:	bd08      	pop	{r3, pc}

080030fe <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80030fe:	6843      	ldr	r3, [r0, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003102:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8003104:	0612      	lsls	r2, r2, #24
 8003106:	d5fc      	bpl.n	8003102 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8003108:	6059      	str	r1, [r3, #4]
}
 800310a:	4770      	bx	lr

0800310c <uart_stm32_err_check>:
{
 800310c:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800310e:	6843      	ldr	r3, [r0, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003112:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8003114:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8003116:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003118:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800311a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 800311e:	bf48      	it	mi
 8003120:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8003124:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8003126:	bf48      	it	mi
 8003128:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 800312c:	07d3      	lsls	r3, r2, #31
 800312e:	d501      	bpl.n	8003134 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 8003130:	f7ff ffcb 	bl	80030ca <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8003134:	0791      	lsls	r1, r2, #30
 8003136:	d501      	bpl.n	800313c <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 8003138:	f7ff ffc7 	bl	80030ca <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 800313c:	0753      	lsls	r3, r2, #29
 800313e:	d501      	bpl.n	8003144 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 8003140:	f7ff ffc3 	bl	80030ca <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8003144:	f7ff ffc1 	bl	80030ca <LL_USART_ClearFlag_FE>
}
 8003148:	4610      	mov	r0, r2
 800314a:	bd08      	pop	{r3, pc}

0800314c <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800314c:	6843      	ldr	r3, [r0, #4]
{
 800314e:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003150:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 8003152:	2300      	movs	r3, #0
 8003154:	b2d8      	uxtb	r0, r3
 8003156:	1a15      	subs	r5, r2, r0
 8003158:	2d00      	cmp	r5, #0
 800315a:	dd04      	ble.n	8003166 <uart_stm32_fifo_fill+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800315c:	6825      	ldr	r5, [r4, #0]
 800315e:	062d      	lsls	r5, r5, #24
 8003160:	f103 0301 	add.w	r3, r3, #1
 8003164:	d400      	bmi.n	8003168 <uart_stm32_fifo_fill+0x1c>
}
 8003166:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 8003168:	5c08      	ldrb	r0, [r1, r0]
 800316a:	6060      	str	r0, [r4, #4]
}
 800316c:	e7f2      	b.n	8003154 <uart_stm32_fifo_fill+0x8>

0800316e <uart_stm32_fifo_read>:
{
 800316e:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003170:	6843      	ldr	r3, [r0, #4]
 8003172:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 8003174:	2500      	movs	r5, #0
 8003176:	b2e8      	uxtb	r0, r5
 8003178:	1a13      	subs	r3, r2, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	dd02      	ble.n	8003184 <uart_stm32_fifo_read+0x16>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	069b      	lsls	r3, r3, #26
 8003182:	d400      	bmi.n	8003186 <uart_stm32_fifo_read+0x18>
}
 8003184:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003186:	6863      	ldr	r3, [r4, #4]
 8003188:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800318a:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800318c:	0718      	lsls	r0, r3, #28
 800318e:	d502      	bpl.n	8003196 <uart_stm32_fifo_read+0x28>
			LL_USART_ClearFlag_ORE(UartInstance);
 8003190:	4620      	mov	r0, r4
 8003192:	f7ff ff9a 	bl	80030ca <LL_USART_ClearFlag_FE>
 8003196:	3501      	adds	r5, #1
 8003198:	e7ed      	b.n	8003176 <uart_stm32_fifo_read+0x8>

0800319a <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800319a:	6843      	ldr	r3, [r0, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	f102 030c 	add.w	r3, r2, #12
 80031a2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80031a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	f102 000c 	add.w	r0, r2, #12
 80031ae:	e840 3100 	strex	r1, r3, [r0]
 80031b2:	2900      	cmp	r1, #0
 80031b4:	d1f3      	bne.n	800319e <uart_stm32_irq_tx_enable+0x4>
}
 80031b6:	4770      	bx	lr

080031b8 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80031b8:	6843      	ldr	r3, [r0, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	f102 030c 	add.w	r3, r2, #12
 80031c0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80031c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	f102 000c 	add.w	r0, r2, #12
 80031cc:	e840 3100 	strex	r1, r3, [r0]
 80031d0:	2900      	cmp	r1, #0
 80031d2:	d1f3      	bne.n	80031bc <uart_stm32_irq_tx_disable+0x4>
}
 80031d4:	4770      	bx	lr

080031d6 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80031d6:	6843      	ldr	r3, [r0, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80031da:	6818      	ldr	r0, [r3, #0]
	return LL_USART_IsActiveFlag_TXE(UartInstance) &&
 80031dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80031e0:	bf1c      	itt	ne
 80031e2:	68d8      	ldrne	r0, [r3, #12]
 80031e4:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 80031e8:	4770      	bx	lr

080031ea <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80031ea:	6843      	ldr	r3, [r0, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80031ee:	6818      	ldr	r0, [r3, #0]
}
 80031f0:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80031f4:	4770      	bx	lr

080031f6 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80031f6:	6843      	ldr	r3, [r0, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	f102 030c 	add.w	r3, r2, #12
 80031fe:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003202:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	f102 000c 	add.w	r0, r2, #12
 800320a:	e840 3100 	strex	r1, r3, [r0]
 800320e:	2900      	cmp	r1, #0
 8003210:	d1f3      	bne.n	80031fa <uart_stm32_irq_rx_enable+0x4>
}
 8003212:	4770      	bx	lr

08003214 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003214:	6843      	ldr	r3, [r0, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	f102 030c 	add.w	r3, r2, #12
 800321c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003220:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	f102 000c 	add.w	r0, r2, #12
 8003228:	e840 3100 	strex	r1, r3, [r0]
 800322c:	2900      	cmp	r1, #0
 800322e:	d1f3      	bne.n	8003218 <uart_stm32_irq_rx_disable+0x4>
}
 8003230:	4770      	bx	lr

08003232 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003232:	6843      	ldr	r3, [r0, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003236:	6818      	ldr	r0, [r3, #0]
}
 8003238:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800323c:	4770      	bx	lr

0800323e <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800323e:	6843      	ldr	r3, [r0, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8003244:	0691      	lsls	r1, r2, #26
 8003246:	d502      	bpl.n	800324e <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8003248:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 800324a:	0692      	lsls	r2, r2, #26
 800324c:	d407      	bmi.n	800325e <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800324e:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8003250:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003254:	d004      	beq.n	8003260 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8003256:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 8003258:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800325c:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 800325e:	2001      	movs	r0, #1
}
 8003260:	4770      	bx	lr

08003262 <uart_stm32_irq_update>:
}
 8003262:	2001      	movs	r0, #1
 8003264:	4770      	bx	lr

08003266 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8003266:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 8003268:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 800326c:	4770      	bx	lr

0800326e <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800326e:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 8003270:	6893      	ldr	r3, [r2, #8]
 8003272:	b10b      	cbz	r3, 8003278 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 8003274:	68d1      	ldr	r1, [r2, #12]
 8003276:	4718      	bx	r3
}
 8003278:	4770      	bx	lr

0800327a <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 800327a:	b508      	push	{r3, lr}
 800327c:	2200      	movs	r2, #0
 800327e:	2026      	movs	r0, #38	; 0x26
 8003280:	4611      	mov	r1, r2
 8003282:	f7fd fe07 	bl	8000e94 <z_arm_irq_priority_set>
 8003286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800328a:	2026      	movs	r0, #38	; 0x26
 800328c:	f7fd bdf2 	b.w	8000e74 <arch_irq_enable>

08003290 <uart_stm32_set_baudrate>:
{
 8003290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 8003292:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003294:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8003296:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003298:	f857 4b0c 	ldr.w	r4, [r7], #12
{
 800329c:	460d      	mov	r5, r1
 800329e:	4630      	mov	r0, r6
 80032a0:	f000 f866 	bl	8003370 <z_device_ready>
 80032a4:	b308      	cbz	r0, 80032ea <uart_stm32_set_baudrate+0x5a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80032a6:	68b3      	ldr	r3, [r6, #8]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	b1f3      	cbz	r3, 80032ea <uart_stm32_set_baudrate+0x5a>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80032ac:	aa01      	add	r2, sp, #4
 80032ae:	4639      	mov	r1, r7
 80032b0:	4630      	mov	r0, r6
 80032b2:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 80032b4:	2800      	cmp	r0, #0
 80032b6:	db18      	blt.n	80032ea <uart_stm32_set_baudrate+0x5a>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80032b8:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80032ba:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80032bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80032c0:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80032c2:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80032c4:	00aa      	lsls	r2, r5, #2
 80032c6:	0fab      	lsrs	r3, r5, #30
 80032c8:	fba0 0101 	umull	r0, r1, r0, r1
 80032cc:	f7fc ff64 	bl	8000198 <__aeabi_uldivmod>
 80032d0:	2264      	movs	r2, #100	; 0x64
 80032d2:	fbb0 f1f2 	udiv	r1, r0, r2
 80032d6:	fb02 0311 	mls	r3, r2, r1, r0
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	3332      	adds	r3, #50	; 0x32
 80032de:	fbb3 f3f2 	udiv	r3, r3, r2
 80032e2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	60a3      	str	r3, [r4, #8]
}
 80032ea:	b003      	add	sp, #12
 80032ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ee <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80032ee:	6903      	ldr	r3, [r0, #16]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80032f4:	6843      	ldr	r3, [r0, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80032f8:	68d3      	ldr	r3, [r2, #12]
 80032fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d029      	beq.n	8003358 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 8003304:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8003308:	f1dc 0300 	rsbs	r3, ip, #0
 800330c:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8003310:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003312:	6913      	ldr	r3, [r2, #16]
 8003314:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d01e      	beq.n	800335c <uart_stm32_config_get+0x6e>
 800331e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003322:	d01d      	beq.n	8003360 <uart_stm32_config_get+0x72>
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2303      	movne	r3, #3
 800332a:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800332c:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800332e:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003330:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8003332:	04c0      	lsls	r0, r0, #19
 8003334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003338:	d514      	bpl.n	8003364 <uart_stm32_config_get+0x76>
			return UART_CFG_DATA_BITS_9;
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2303      	movne	r3, #3
 8003340:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8003342:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003344:	6953      	ldr	r3, [r2, #20]
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800334a:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800334e:	4253      	negs	r3, r2
 8003350:	4153      	adcs	r3, r2
 8003352:	71cb      	strb	r3, [r1, #7]
}
 8003354:	2000      	movs	r0, #0
 8003356:	4770      	bx	lr
	switch (parity) {
 8003358:	2302      	movs	r3, #2
 800335a:	e7d9      	b.n	8003310 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 800335c:	2300      	movs	r3, #0
 800335e:	e7e5      	b.n	800332c <uart_stm32_config_get+0x3e>
		return UART_CFG_STOP_BITS_1_5;
 8003360:	2302      	movs	r3, #2
 8003362:	e7e3      	b.n	800332c <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_7;
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf0c      	ite	eq
 8003368:	2303      	moveq	r3, #3
 800336a:	2302      	movne	r3, #2
 800336c:	e7e9      	b.n	8003342 <uart_stm32_config_get+0x54>

0800336e <z_device_state_init>:
}
 800336e:	4770      	bx	lr

08003370 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8003370:	b138      	cbz	r0, 8003382 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8003372:	68c3      	ldr	r3, [r0, #12]
 8003374:	8818      	ldrh	r0, [r3, #0]
 8003376:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800337a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800337e:	4258      	negs	r0, r3
 8003380:	4158      	adcs	r0, r3
}
 8003382:	4770      	bx	lr

08003384 <arch_system_halt>:
	__asm__ volatile(
 8003384:	f04f 0210 	mov.w	r2, #16
 8003388:	f3ef 8311 	mrs	r3, BASEPRI
 800338c:	f382 8812 	msr	BASEPRI_MAX, r2
 8003390:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8003394:	e7fe      	b.n	8003394 <arch_system_halt+0x10>

08003396 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8003396:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003398:	f7ff fff4 	bl	8003384 <arch_system_halt>

0800339c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	4605      	mov	r5, r0
 80033a0:	460e      	mov	r6, r1
 80033a2:	f04f 0310 	mov.w	r3, #16
 80033a6:	f3ef 8711 	mrs	r7, BASEPRI
 80033aa:	f383 8812 	msr	BASEPRI_MAX, r3
 80033ae:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 80033b2:	f7ff f9b9 	bl	8002728 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 80033b6:	4631      	mov	r1, r6
 80033b8:	4604      	mov	r4, r0
 80033ba:	4628      	mov	r0, r5
 80033bc:	f7ff ffeb 	bl	8003396 <k_sys_fatal_error_handler>
	__asm__ volatile(
 80033c0:	f387 8811 	msr	BASEPRI, r7
 80033c4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80033c8:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80033ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033ce:	f7fd bf7b 	b.w	80012c8 <z_impl_k_thread_abort>

080033d2 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 80033d2:	b508      	push	{r3, lr}
	__asm__ volatile(
 80033d4:	f04f 0210 	mov.w	r2, #16
 80033d8:	f3ef 8311 	mrs	r3, BASEPRI
 80033dc:	f382 8812 	msr	BASEPRI_MAX, r2
 80033e0:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80033e4:	f7fd fd38 	bl	8000e58 <arch_cpu_idle>
 80033e8:	e7f4      	b.n	80033d4 <idle+0x2>

080033ea <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 80033ea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80033ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80033f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80033f2:	2300      	movs	r3, #0
	node->prev = NULL;
 80033f4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 80033f8:	4770      	bx	lr

080033fa <unpend_thread_no_timeout>:
{
 80033fa:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80033fc:	f7ff fff5 	bl	80033ea <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8003400:	7b43      	ldrb	r3, [r0, #13]
 8003402:	f023 0302 	bic.w	r3, r3, #2
 8003406:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	6083      	str	r3, [r0, #8]
}
 800340c:	bd08      	pop	{r3, pc}

0800340e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800340e:	4603      	mov	r3, r0
 8003410:	b920      	cbnz	r0, 800341c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003412:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8003416:	b90a      	cbnz	r2, 800341c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8003418:	f7fd bd7c 	b.w	8000f14 <arch_swap>
	__asm__ volatile(
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
}
 8003424:	4770      	bx	lr

08003426 <z_reschedule_unlocked>:
	__asm__ volatile(
 8003426:	f04f 0310 	mov.w	r3, #16
 800342a:	f3ef 8011 	mrs	r0, BASEPRI
 800342e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003432:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8003436:	f7ff bfea 	b.w	800340e <z_reschedule_irqlock>

0800343a <z_priq_dumb_best>:
{
 800343a:	4603      	mov	r3, r0
	return list->head == list;
 800343c:	6800      	ldr	r0, [r0, #0]
}
 800343e:	4283      	cmp	r3, r0
 8003440:	bf08      	it	eq
 8003442:	2000      	moveq	r0, #0
 8003444:	4770      	bx	lr

08003446 <z_ready_thread>:
{
 8003446:	b510      	push	{r4, lr}
 8003448:	f04f 0310 	mov.w	r3, #16
 800344c:	f3ef 8411 	mrs	r4, BASEPRI
 8003450:	f383 8812 	msr	BASEPRI_MAX, r3
 8003454:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8003458:	f7ff f800 	bl	800245c <ready_thread>
	__asm__ volatile(
 800345c:	f384 8811 	msr	BASEPRI, r4
 8003460:	f3bf 8f6f 	isb	sy
}
 8003464:	bd10      	pop	{r4, pc}

08003466 <z_thread_timeout>:
{
 8003466:	b510      	push	{r4, lr}
 8003468:	4601      	mov	r1, r0
	__asm__ volatile(
 800346a:	f04f 0310 	mov.w	r3, #16
 800346e:	f3ef 8411 	mrs	r4, BASEPRI
 8003472:	f383 8812 	msr	BASEPRI_MAX, r3
 8003476:	f3bf 8f6f 	isb	sy
		if (!killed) {
 800347a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 800347e:	f013 0f28 	tst.w	r3, #40	; 0x28
 8003482:	d10d      	bne.n	80034a0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8003484:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8003488:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 800348a:	b10b      	cbz	r3, 8003490 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 800348c:	f7ff ffb5 	bl	80033fa <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003490:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8003494:	f023 0314 	bic.w	r3, r3, #20
 8003498:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 800349c:	f7fe ffde 	bl	800245c <ready_thread>
	__asm__ volatile(
 80034a0:	f384 8811 	msr	BASEPRI, r4
 80034a4:	f3bf 8f6f 	isb	sy
}
 80034a8:	bd10      	pop	{r4, pc}

080034aa <z_abort_timeout>:
{
 80034aa:	b510      	push	{r4, lr}
	__asm__ volatile(
 80034ac:	f04f 0210 	mov.w	r2, #16
 80034b0:	f3ef 8411 	mrs	r4, BASEPRI
 80034b4:	f382 8812 	msr	BASEPRI_MAX, r2
 80034b8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	b13b      	cbz	r3, 80034d0 <z_abort_timeout+0x26>
			remove_timeout(to);
 80034c0:	f7ff f9d6 	bl	8002870 <remove_timeout>
			ret = 0;
 80034c4:	2000      	movs	r0, #0
	__asm__ volatile(
 80034c6:	f384 8811 	msr	BASEPRI, r4
 80034ca:	f3bf 8f6f 	isb	sy
}
 80034ce:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80034d0:	f06f 0015 	mvn.w	r0, #21
 80034d4:	e7f7      	b.n	80034c6 <z_abort_timeout+0x1c>

080034d6 <z_set_timeout_expiry>:
{
 80034d6:	b570      	push	{r4, r5, r6, lr}
 80034d8:	4604      	mov	r4, r0
 80034da:	460d      	mov	r5, r1
	__asm__ volatile(
 80034dc:	f04f 0310 	mov.w	r3, #16
 80034e0:	f3ef 8611 	mrs	r6, BASEPRI
 80034e4:	f383 8812 	msr	BASEPRI_MAX, r3
 80034e8:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 80034ec:	f7ff f998 	bl	8002820 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80034f0:	2801      	cmp	r0, #1
 80034f2:	dd05      	ble.n	8003500 <z_set_timeout_expiry+0x2a>
 80034f4:	42a0      	cmp	r0, r4
 80034f6:	db03      	blt.n	8003500 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80034f8:	4629      	mov	r1, r5
 80034fa:	4620      	mov	r0, r4
 80034fc:	f7fe fb9a 	bl	8001c34 <sys_clock_set_timeout>
	__asm__ volatile(
 8003500:	f386 8811 	msr	BASEPRI, r6
 8003504:	f3bf 8f6f 	isb	sy
}
 8003508:	bd70      	pop	{r4, r5, r6, pc}

0800350a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 800350a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 800350c:	f7ff faa0 	bl	8002a50 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8003510:	bd08      	pop	{r3, pc}
